#[allow(dead_code, unused_imports, non_camel_case_types)]
#[allow(clippy::all)]
#[allow(rustdoc::broken_intra_doc_links)]
pub mod api {
	#[allow(unused_imports)]
	mod root_mod {
		pub use super::*;
	}
	pub static PALLETS: [&str; 48usize] = [
		"System",
		"Timestamp",
		"Sudo",
		"TransactionPayment",
		"AssetTxPayment",
		"Indices",
		"Balances",
		"Multisig",
		"ParachainSystem",
		"ParachainInfo",
		"Authorship",
		"CollatorSelection",
		"Session",
		"Aura",
		"AuraExt",
		"Council",
		"CouncilMembership",
		"Treasury",
		"Democracy",
		"TechnicalCommittee",
		"TechnicalCommitteeMembership",
		"ReleaseCommittee",
		"ReleaseMembership",
		"Scheduler",
		"Utility",
		"Preimage",
		"Proxy",
		"XcmpQueue",
		"PolkadotXcm",
		"CumulusXcm",
		"DmpQueue",
		"XTokens",
		"UnknownTokens",
		"Tokens",
		"CrowdloanRewards",
		"Assets",
		"AssetsRegistry",
		"Referenda",
		"ConvictionVoting",
		"OpenGovBalances",
		"Origins",
		"Whitelist",
		"CallFilter",
		"Ibc",
		"Ics20Fee",
		"PalletMultihopXcmIbc",
		"PalletXcmHelper",
		"PalletLiquidStaking",
	];
	pub static RUNTIME_APIS: [&str; 0usize] = [];
	#[doc = r" The error type returned when there is a runtime issue."]
	pub type DispatchError = runtime_types::sp_runtime::DispatchError;
	#[doc = r" The outer event enum."]
	pub type Event = runtime_types::composable_runtime::RuntimeEvent;
	#[doc = r" The outer extrinsic enum."]
	pub type Call = runtime_types::composable_runtime::RuntimeCall;
	#[doc = r" The outer error enum representing the DispatchError's Module variant."]
	pub type Error = runtime_types::composable_runtime::RuntimeError;
	pub fn constants() -> ConstantsApi {
		ConstantsApi
	}
	pub fn storage() -> StorageApi {
		StorageApi
	}
	pub fn tx() -> TransactionApi {
		TransactionApi
	}
	pub fn apis() -> runtime_apis::RuntimeApi {
		runtime_apis::RuntimeApi
	}
	pub mod runtime_apis {
		use super::{root_mod, runtime_types};
		use ::subxt::ext::subxt_core::ext::codec::Encode;
		pub struct RuntimeApi;
		impl RuntimeApi {}
	}
	pub fn custom() -> CustomValuesApi {
		CustomValuesApi
	}
	pub struct CustomValuesApi;
	impl CustomValuesApi {}
	pub struct ConstantsApi;
	impl ConstantsApi {
		pub fn system(&self) -> system::constants::ConstantsApi {
			system::constants::ConstantsApi
		}
		pub fn timestamp(&self) -> timestamp::constants::ConstantsApi {
			timestamp::constants::ConstantsApi
		}
		pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi {
			transaction_payment::constants::ConstantsApi
		}
		pub fn asset_tx_payment(&self) -> asset_tx_payment::constants::ConstantsApi {
			asset_tx_payment::constants::ConstantsApi
		}
		pub fn indices(&self) -> indices::constants::ConstantsApi {
			indices::constants::ConstantsApi
		}
		pub fn balances(&self) -> balances::constants::ConstantsApi {
			balances::constants::ConstantsApi
		}
		pub fn multisig(&self) -> multisig::constants::ConstantsApi {
			multisig::constants::ConstantsApi
		}
		pub fn council(&self) -> council::constants::ConstantsApi {
			council::constants::ConstantsApi
		}
		pub fn treasury(&self) -> treasury::constants::ConstantsApi {
			treasury::constants::ConstantsApi
		}
		pub fn democracy(&self) -> democracy::constants::ConstantsApi {
			democracy::constants::ConstantsApi
		}
		pub fn technical_committee(&self) -> technical_committee::constants::ConstantsApi {
			technical_committee::constants::ConstantsApi
		}
		pub fn release_committee(&self) -> release_committee::constants::ConstantsApi {
			release_committee::constants::ConstantsApi
		}
		pub fn scheduler(&self) -> scheduler::constants::ConstantsApi {
			scheduler::constants::ConstantsApi
		}
		pub fn utility(&self) -> utility::constants::ConstantsApi {
			utility::constants::ConstantsApi
		}
		pub fn proxy(&self) -> proxy::constants::ConstantsApi {
			proxy::constants::ConstantsApi
		}
		pub fn x_tokens(&self) -> x_tokens::constants::ConstantsApi {
			x_tokens::constants::ConstantsApi
		}
		pub fn tokens(&self) -> tokens::constants::ConstantsApi {
			tokens::constants::ConstantsApi
		}
		pub fn crowdloan_rewards(&self) -> crowdloan_rewards::constants::ConstantsApi {
			crowdloan_rewards::constants::ConstantsApi
		}
		pub fn assets(&self) -> assets::constants::ConstantsApi {
			assets::constants::ConstantsApi
		}
		pub fn assets_registry(&self) -> assets_registry::constants::ConstantsApi {
			assets_registry::constants::ConstantsApi
		}
		pub fn referenda(&self) -> referenda::constants::ConstantsApi {
			referenda::constants::ConstantsApi
		}
		pub fn conviction_voting(&self) -> conviction_voting::constants::ConstantsApi {
			conviction_voting::constants::ConstantsApi
		}
		pub fn open_gov_balances(&self) -> open_gov_balances::constants::ConstantsApi {
			open_gov_balances::constants::ConstantsApi
		}
		pub fn call_filter(&self) -> call_filter::constants::ConstantsApi {
			call_filter::constants::ConstantsApi
		}
		pub fn ibc(&self) -> ibc::constants::ConstantsApi {
			ibc::constants::ConstantsApi
		}
		pub fn ics20_fee(&self) -> ics20_fee::constants::ConstantsApi {
			ics20_fee::constants::ConstantsApi
		}
		pub fn pallet_multihop_xcm_ibc(&self) -> pallet_multihop_xcm_ibc::constants::ConstantsApi {
			pallet_multihop_xcm_ibc::constants::ConstantsApi
		}
		pub fn pallet_xcm_helper(&self) -> pallet_xcm_helper::constants::ConstantsApi {
			pallet_xcm_helper::constants::ConstantsApi
		}
		pub fn pallet_liquid_staking(&self) -> pallet_liquid_staking::constants::ConstantsApi {
			pallet_liquid_staking::constants::ConstantsApi
		}
	}
	pub struct StorageApi;
	impl StorageApi {
		pub fn system(&self) -> system::storage::StorageApi {
			system::storage::StorageApi
		}
		pub fn timestamp(&self) -> timestamp::storage::StorageApi {
			timestamp::storage::StorageApi
		}
		pub fn sudo(&self) -> sudo::storage::StorageApi {
			sudo::storage::StorageApi
		}
		pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi {
			transaction_payment::storage::StorageApi
		}
		pub fn asset_tx_payment(&self) -> asset_tx_payment::storage::StorageApi {
			asset_tx_payment::storage::StorageApi
		}
		pub fn indices(&self) -> indices::storage::StorageApi {
			indices::storage::StorageApi
		}
		pub fn balances(&self) -> balances::storage::StorageApi {
			balances::storage::StorageApi
		}
		pub fn multisig(&self) -> multisig::storage::StorageApi {
			multisig::storage::StorageApi
		}
		pub fn parachain_system(&self) -> parachain_system::storage::StorageApi {
			parachain_system::storage::StorageApi
		}
		pub fn parachain_info(&self) -> parachain_info::storage::StorageApi {
			parachain_info::storage::StorageApi
		}
		pub fn authorship(&self) -> authorship::storage::StorageApi {
			authorship::storage::StorageApi
		}
		pub fn collator_selection(&self) -> collator_selection::storage::StorageApi {
			collator_selection::storage::StorageApi
		}
		pub fn session(&self) -> session::storage::StorageApi {
			session::storage::StorageApi
		}
		pub fn aura(&self) -> aura::storage::StorageApi {
			aura::storage::StorageApi
		}
		pub fn aura_ext(&self) -> aura_ext::storage::StorageApi {
			aura_ext::storage::StorageApi
		}
		pub fn council(&self) -> council::storage::StorageApi {
			council::storage::StorageApi
		}
		pub fn council_membership(&self) -> council_membership::storage::StorageApi {
			council_membership::storage::StorageApi
		}
		pub fn treasury(&self) -> treasury::storage::StorageApi {
			treasury::storage::StorageApi
		}
		pub fn democracy(&self) -> democracy::storage::StorageApi {
			democracy::storage::StorageApi
		}
		pub fn technical_committee(&self) -> technical_committee::storage::StorageApi {
			technical_committee::storage::StorageApi
		}
		pub fn technical_committee_membership(
			&self,
		) -> technical_committee_membership::storage::StorageApi {
			technical_committee_membership::storage::StorageApi
		}
		pub fn release_committee(&self) -> release_committee::storage::StorageApi {
			release_committee::storage::StorageApi
		}
		pub fn release_membership(&self) -> release_membership::storage::StorageApi {
			release_membership::storage::StorageApi
		}
		pub fn scheduler(&self) -> scheduler::storage::StorageApi {
			scheduler::storage::StorageApi
		}
		pub fn preimage(&self) -> preimage::storage::StorageApi {
			preimage::storage::StorageApi
		}
		pub fn proxy(&self) -> proxy::storage::StorageApi {
			proxy::storage::StorageApi
		}
		pub fn xcmp_queue(&self) -> xcmp_queue::storage::StorageApi {
			xcmp_queue::storage::StorageApi
		}
		pub fn polkadot_xcm(&self) -> polkadot_xcm::storage::StorageApi {
			polkadot_xcm::storage::StorageApi
		}
		pub fn dmp_queue(&self) -> dmp_queue::storage::StorageApi {
			dmp_queue::storage::StorageApi
		}
		pub fn unknown_tokens(&self) -> unknown_tokens::storage::StorageApi {
			unknown_tokens::storage::StorageApi
		}
		pub fn tokens(&self) -> tokens::storage::StorageApi {
			tokens::storage::StorageApi
		}
		pub fn crowdloan_rewards(&self) -> crowdloan_rewards::storage::StorageApi {
			crowdloan_rewards::storage::StorageApi
		}
		pub fn assets_registry(&self) -> assets_registry::storage::StorageApi {
			assets_registry::storage::StorageApi
		}
		pub fn referenda(&self) -> referenda::storage::StorageApi {
			referenda::storage::StorageApi
		}
		pub fn conviction_voting(&self) -> conviction_voting::storage::StorageApi {
			conviction_voting::storage::StorageApi
		}
		pub fn open_gov_balances(&self) -> open_gov_balances::storage::StorageApi {
			open_gov_balances::storage::StorageApi
		}
		pub fn whitelist(&self) -> whitelist::storage::StorageApi {
			whitelist::storage::StorageApi
		}
		pub fn call_filter(&self) -> call_filter::storage::StorageApi {
			call_filter::storage::StorageApi
		}
		pub fn ibc(&self) -> ibc::storage::StorageApi {
			ibc::storage::StorageApi
		}
		pub fn ics20_fee(&self) -> ics20_fee::storage::StorageApi {
			ics20_fee::storage::StorageApi
		}
		pub fn pallet_multihop_xcm_ibc(&self) -> pallet_multihop_xcm_ibc::storage::StorageApi {
			pallet_multihop_xcm_ibc::storage::StorageApi
		}
		pub fn pallet_xcm_helper(&self) -> pallet_xcm_helper::storage::StorageApi {
			pallet_xcm_helper::storage::StorageApi
		}
		pub fn pallet_liquid_staking(&self) -> pallet_liquid_staking::storage::StorageApi {
			pallet_liquid_staking::storage::StorageApi
		}
	}
	pub struct TransactionApi;
	impl TransactionApi {
		pub fn system(&self) -> system::calls::TransactionApi {
			system::calls::TransactionApi
		}
		pub fn timestamp(&self) -> timestamp::calls::TransactionApi {
			timestamp::calls::TransactionApi
		}
		pub fn sudo(&self) -> sudo::calls::TransactionApi {
			sudo::calls::TransactionApi
		}
		pub fn asset_tx_payment(&self) -> asset_tx_payment::calls::TransactionApi {
			asset_tx_payment::calls::TransactionApi
		}
		pub fn indices(&self) -> indices::calls::TransactionApi {
			indices::calls::TransactionApi
		}
		pub fn balances(&self) -> balances::calls::TransactionApi {
			balances::calls::TransactionApi
		}
		pub fn multisig(&self) -> multisig::calls::TransactionApi {
			multisig::calls::TransactionApi
		}
		pub fn parachain_system(&self) -> parachain_system::calls::TransactionApi {
			parachain_system::calls::TransactionApi
		}
		pub fn parachain_info(&self) -> parachain_info::calls::TransactionApi {
			parachain_info::calls::TransactionApi
		}
		pub fn collator_selection(&self) -> collator_selection::calls::TransactionApi {
			collator_selection::calls::TransactionApi
		}
		pub fn session(&self) -> session::calls::TransactionApi {
			session::calls::TransactionApi
		}
		pub fn council(&self) -> council::calls::TransactionApi {
			council::calls::TransactionApi
		}
		pub fn council_membership(&self) -> council_membership::calls::TransactionApi {
			council_membership::calls::TransactionApi
		}
		pub fn treasury(&self) -> treasury::calls::TransactionApi {
			treasury::calls::TransactionApi
		}
		pub fn democracy(&self) -> democracy::calls::TransactionApi {
			democracy::calls::TransactionApi
		}
		pub fn technical_committee(&self) -> technical_committee::calls::TransactionApi {
			technical_committee::calls::TransactionApi
		}
		pub fn technical_committee_membership(
			&self,
		) -> technical_committee_membership::calls::TransactionApi {
			technical_committee_membership::calls::TransactionApi
		}
		pub fn release_committee(&self) -> release_committee::calls::TransactionApi {
			release_committee::calls::TransactionApi
		}
		pub fn release_membership(&self) -> release_membership::calls::TransactionApi {
			release_membership::calls::TransactionApi
		}
		pub fn scheduler(&self) -> scheduler::calls::TransactionApi {
			scheduler::calls::TransactionApi
		}
		pub fn utility(&self) -> utility::calls::TransactionApi {
			utility::calls::TransactionApi
		}
		pub fn preimage(&self) -> preimage::calls::TransactionApi {
			preimage::calls::TransactionApi
		}
		pub fn proxy(&self) -> proxy::calls::TransactionApi {
			proxy::calls::TransactionApi
		}
		pub fn xcmp_queue(&self) -> xcmp_queue::calls::TransactionApi {
			xcmp_queue::calls::TransactionApi
		}
		pub fn polkadot_xcm(&self) -> polkadot_xcm::calls::TransactionApi {
			polkadot_xcm::calls::TransactionApi
		}
		pub fn cumulus_xcm(&self) -> cumulus_xcm::calls::TransactionApi {
			cumulus_xcm::calls::TransactionApi
		}
		pub fn dmp_queue(&self) -> dmp_queue::calls::TransactionApi {
			dmp_queue::calls::TransactionApi
		}
		pub fn x_tokens(&self) -> x_tokens::calls::TransactionApi {
			x_tokens::calls::TransactionApi
		}
		pub fn unknown_tokens(&self) -> unknown_tokens::calls::TransactionApi {
			unknown_tokens::calls::TransactionApi
		}
		pub fn tokens(&self) -> tokens::calls::TransactionApi {
			tokens::calls::TransactionApi
		}
		pub fn crowdloan_rewards(&self) -> crowdloan_rewards::calls::TransactionApi {
			crowdloan_rewards::calls::TransactionApi
		}
		pub fn assets(&self) -> assets::calls::TransactionApi {
			assets::calls::TransactionApi
		}
		pub fn assets_registry(&self) -> assets_registry::calls::TransactionApi {
			assets_registry::calls::TransactionApi
		}
		pub fn referenda(&self) -> referenda::calls::TransactionApi {
			referenda::calls::TransactionApi
		}
		pub fn conviction_voting(&self) -> conviction_voting::calls::TransactionApi {
			conviction_voting::calls::TransactionApi
		}
		pub fn open_gov_balances(&self) -> open_gov_balances::calls::TransactionApi {
			open_gov_balances::calls::TransactionApi
		}
		pub fn whitelist(&self) -> whitelist::calls::TransactionApi {
			whitelist::calls::TransactionApi
		}
		pub fn call_filter(&self) -> call_filter::calls::TransactionApi {
			call_filter::calls::TransactionApi
		}
		pub fn ibc(&self) -> ibc::calls::TransactionApi {
			ibc::calls::TransactionApi
		}
		pub fn ics20_fee(&self) -> ics20_fee::calls::TransactionApi {
			ics20_fee::calls::TransactionApi
		}
		pub fn pallet_multihop_xcm_ibc(&self) -> pallet_multihop_xcm_ibc::calls::TransactionApi {
			pallet_multihop_xcm_ibc::calls::TransactionApi
		}
		pub fn pallet_xcm_helper(&self) -> pallet_xcm_helper::calls::TransactionApi {
			pallet_xcm_helper::calls::TransactionApi
		}
		pub fn pallet_liquid_staking(&self) -> pallet_liquid_staking::calls::TransactionApi {
			pallet_liquid_staking::calls::TransactionApi
		}
	}
	#[doc = r" check whether the metadata provided is aligned with this statically generated code."]
	pub fn is_codegen_valid_for(metadata: &::subxt::ext::subxt_core::Metadata) -> bool {
		let runtime_metadata_hash = metadata
			.hasher()
			.only_these_pallets(&PALLETS)
			.only_these_runtime_apis(&RUNTIME_APIS)
			.hash();
		runtime_metadata_hash ==
			[
				234u8, 84u8, 93u8, 109u8, 146u8, 158u8, 6u8, 13u8, 28u8, 146u8, 27u8, 100u8, 238u8,
				37u8, 166u8, 47u8, 215u8, 36u8, 171u8, 176u8, 101u8, 35u8, 193u8, 188u8, 211u8,
				146u8, 243u8, 189u8, 220u8, 149u8, 187u8, 238u8,
			]
	}
	pub mod system {
		use super::{root_mod, runtime_types};
		#[doc = "Error for the System pallet"]
		pub type Error = runtime_types::frame_system::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::frame_system::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Make some on-chain remark."]
				#[doc = ""]
				#[doc = "- `O(1)`"]
				pub struct Remark {
					pub remark: remark::Remark,
				}
				pub mod remark {
					use super::runtime_types;
					pub type Remark =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Remark {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "remark";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the number of pages in the WebAssembly environment's heap."]
				pub struct SetHeapPages {
					pub pages: set_heap_pages::Pages,
				}
				pub mod set_heap_pages {
					use super::runtime_types;
					pub type Pages = ::core::primitive::u64;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetHeapPages {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "set_heap_pages";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the new runtime code."]
				pub struct SetCode {
					pub code: set_code::Code,
				}
				pub mod set_code {
					use super::runtime_types;
					pub type Code =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetCode {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "set_code";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the new runtime code without doing any checks of the given `code`."]
				pub struct SetCodeWithoutChecks {
					pub code: set_code_without_checks::Code,
				}
				pub mod set_code_without_checks {
					use super::runtime_types;
					pub type Code =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetCodeWithoutChecks {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "set_code_without_checks";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set some items of storage."]
				pub struct SetStorage {
					pub items: set_storage::Items,
				}
				pub mod set_storage {
					use super::runtime_types;
					pub type Items = ::subxt::ext::subxt_core::alloc::vec::Vec<(
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					)>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetStorage {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "set_storage";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Kill some items from storage."]
				pub struct KillStorage {
					pub keys: kill_storage::Keys,
				}
				pub mod kill_storage {
					use super::runtime_types;
					pub type Keys = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for KillStorage {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "kill_storage";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Kill all storage items with a key that starts with the given prefix."]
				#[doc = ""]
				#[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
				#[doc = "the prefix we are removing to accurately calculate the weight of this function."]
				pub struct KillPrefix {
					pub prefix: kill_prefix::Prefix,
					pub subkeys: kill_prefix::Subkeys,
				}
				pub mod kill_prefix {
					use super::runtime_types;
					pub type Prefix =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
					pub type Subkeys = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for KillPrefix {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "kill_prefix";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Make some on-chain remark and emit event."]
				pub struct RemarkWithEvent {
					pub remark: remark_with_event::Remark,
				}
				pub mod remark_with_event {
					use super::runtime_types;
					pub type Remark =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemarkWithEvent {
					const PALLET: &'static str = "System";
					const CALL: &'static str = "remark_with_event";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Make some on-chain remark."]
				#[doc = ""]
				#[doc = "- `O(1)`"]
				pub fn remark(
					&self,
					remark: types::remark::Remark,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Remark> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"System",
						"remark",
						types::Remark { remark },
						[
							43u8, 126u8, 180u8, 174u8, 141u8, 48u8, 52u8, 125u8, 166u8, 212u8,
							216u8, 98u8, 100u8, 24u8, 132u8, 71u8, 101u8, 64u8, 246u8, 169u8, 33u8,
							250u8, 147u8, 208u8, 2u8, 40u8, 129u8, 209u8, 232u8, 207u8, 207u8,
							13u8,
						],
					)
				}
				#[doc = "Set the number of pages in the WebAssembly environment's heap."]
				pub fn set_heap_pages(
					&self,
					pages: types::set_heap_pages::Pages,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetHeapPages> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"System",
						"set_heap_pages",
						types::SetHeapPages { pages },
						[
							188u8, 191u8, 99u8, 216u8, 219u8, 109u8, 141u8, 50u8, 78u8, 235u8,
							215u8, 242u8, 195u8, 24u8, 111u8, 76u8, 229u8, 64u8, 99u8, 225u8,
							134u8, 121u8, 81u8, 209u8, 127u8, 223u8, 98u8, 215u8, 150u8, 70u8,
							57u8, 147u8,
						],
					)
				}
				#[doc = "Set the new runtime code."]
				pub fn set_code(
					&self,
					code: types::set_code::Code,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetCode> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"System",
						"set_code",
						types::SetCode { code },
						[
							233u8, 248u8, 88u8, 245u8, 28u8, 65u8, 25u8, 169u8, 35u8, 237u8, 19u8,
							203u8, 136u8, 160u8, 18u8, 3u8, 20u8, 197u8, 81u8, 169u8, 244u8, 188u8,
							27u8, 147u8, 147u8, 236u8, 65u8, 25u8, 3u8, 143u8, 182u8, 22u8,
						],
					)
				}
				#[doc = "Set the new runtime code without doing any checks of the given `code`."]
				pub fn set_code_without_checks(
					&self,
					code: types::set_code_without_checks::Code,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetCodeWithoutChecks>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"System",
						"set_code_without_checks",
						types::SetCodeWithoutChecks { code },
						[
							82u8, 212u8, 157u8, 44u8, 70u8, 0u8, 143u8, 15u8, 109u8, 109u8, 107u8,
							157u8, 141u8, 42u8, 169u8, 11u8, 15u8, 186u8, 252u8, 138u8, 10u8,
							147u8, 15u8, 178u8, 247u8, 229u8, 213u8, 98u8, 207u8, 231u8, 119u8,
							115u8,
						],
					)
				}
				#[doc = "Set some items of storage."]
				pub fn set_storage(
					&self,
					items: types::set_storage::Items,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetStorage> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"System",
						"set_storage",
						types::SetStorage { items },
						[
							141u8, 216u8, 52u8, 222u8, 223u8, 136u8, 123u8, 181u8, 19u8, 75u8,
							163u8, 102u8, 229u8, 189u8, 158u8, 142u8, 95u8, 235u8, 240u8, 49u8,
							150u8, 76u8, 78u8, 137u8, 126u8, 88u8, 183u8, 88u8, 231u8, 146u8,
							234u8, 43u8,
						],
					)
				}
				#[doc = "Kill some items from storage."]
				pub fn kill_storage(
					&self,
					keys: types::kill_storage::Keys,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::KillStorage> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"System",
						"kill_storage",
						types::KillStorage { keys },
						[
							73u8, 63u8, 196u8, 36u8, 144u8, 114u8, 34u8, 213u8, 108u8, 93u8, 209u8,
							234u8, 153u8, 185u8, 33u8, 91u8, 187u8, 195u8, 223u8, 130u8, 58u8,
							156u8, 63u8, 47u8, 228u8, 249u8, 216u8, 139u8, 143u8, 177u8, 41u8,
							35u8,
						],
					)
				}
				#[doc = "Kill all storage items with a key that starts with the given prefix."]
				#[doc = ""]
				#[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
				#[doc = "the prefix we are removing to accurately calculate the weight of this function."]
				pub fn kill_prefix(
					&self,
					prefix: types::kill_prefix::Prefix,
					subkeys: types::kill_prefix::Subkeys,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::KillPrefix> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"System",
						"kill_prefix",
						types::KillPrefix { prefix, subkeys },
						[
							184u8, 57u8, 139u8, 24u8, 208u8, 87u8, 108u8, 215u8, 198u8, 189u8,
							175u8, 242u8, 167u8, 215u8, 97u8, 63u8, 110u8, 166u8, 238u8, 98u8,
							67u8, 236u8, 111u8, 110u8, 234u8, 81u8, 102u8, 5u8, 182u8, 5u8, 214u8,
							85u8,
						],
					)
				}
				#[doc = "Make some on-chain remark and emit event."]
				pub fn remark_with_event(
					&self,
					remark: types::remark_with_event::Remark,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemarkWithEvent>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"System",
						"remark_with_event",
						types::RemarkWithEvent { remark },
						[
							120u8, 120u8, 153u8, 92u8, 184u8, 85u8, 34u8, 2u8, 174u8, 206u8, 105u8,
							228u8, 233u8, 130u8, 80u8, 246u8, 228u8, 59u8, 234u8, 240u8, 4u8, 49u8,
							147u8, 170u8, 115u8, 91u8, 149u8, 200u8, 228u8, 181u8, 8u8, 154u8,
						],
					)
				}
			}
		}
		#[doc = "Event for the System pallet."]
		pub type Event = runtime_types::frame_system::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An extrinsic completed successfully."]
			pub struct ExtrinsicSuccess {
				pub dispatch_info: extrinsic_success::DispatchInfo,
			}
			pub mod extrinsic_success {
				use super::runtime_types;
				pub type DispatchInfo = runtime_types::frame_support::dispatch::DispatchInfo;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ExtrinsicSuccess {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "ExtrinsicSuccess";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An extrinsic failed."]
			pub struct ExtrinsicFailed {
				pub dispatch_error: extrinsic_failed::DispatchError,
				pub dispatch_info: extrinsic_failed::DispatchInfo,
			}
			pub mod extrinsic_failed {
				use super::runtime_types;
				pub type DispatchError = runtime_types::sp_runtime::DispatchError;
				pub type DispatchInfo = runtime_types::frame_support::dispatch::DispatchInfo;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ExtrinsicFailed {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "ExtrinsicFailed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "`:code` was updated."]
			pub struct CodeUpdated;
			impl ::subxt::ext::subxt_core::events::StaticEvent for CodeUpdated {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "CodeUpdated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A new account was created."]
			pub struct NewAccount {
				pub account: new_account::Account,
			}
			pub mod new_account {
				use super::runtime_types;
				pub type Account = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NewAccount {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "NewAccount";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An account was reaped."]
			pub struct KilledAccount {
				pub account: killed_account::Account,
			}
			pub mod killed_account {
				use super::runtime_types;
				pub type Account = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for KilledAccount {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "KilledAccount";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "On on-chain remark happened."]
			pub struct Remarked {
				pub sender: remarked::Sender,
				pub hash: remarked::Hash,
			}
			pub mod remarked {
				use super::runtime_types;
				pub type Sender = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Hash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Remarked {
				const PALLET: &'static str = "System";
				const EVENT: &'static str = "Remarked";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod account {
					use super::runtime_types;
					pub type Account = runtime_types::frame_system::AccountInfo<
						::core::primitive::u32,
						runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod extrinsic_count {
					use super::runtime_types;
					pub type ExtrinsicCount = ::core::primitive::u32;
				}
				pub mod block_weight {
					use super::runtime_types;
					pub type BlockWeight = runtime_types::frame_support::dispatch::PerDispatchClass<
						runtime_types::sp_weights::weight_v2::Weight,
					>;
				}
				pub mod all_extrinsics_len {
					use super::runtime_types;
					pub type AllExtrinsicsLen = ::core::primitive::u32;
				}
				pub mod block_hash {
					use super::runtime_types;
					pub type BlockHash = ::subxt::ext::subxt_core::utils::H256;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod extrinsic_data {
					use super::runtime_types;
					pub type ExtrinsicData =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod number {
					use super::runtime_types;
					pub type Number = ::core::primitive::u32;
				}
				pub mod parent_hash {
					use super::runtime_types;
					pub type ParentHash = ::subxt::ext::subxt_core::utils::H256;
				}
				pub mod digest {
					use super::runtime_types;
					pub type Digest = runtime_types::sp_runtime::generic::digest::Digest;
				}
				pub mod events {
					use super::runtime_types;
					pub type Events = ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::frame_system::EventRecord<
							runtime_types::composable_runtime::RuntimeEvent,
							::subxt::ext::subxt_core::utils::H256,
						>,
					>;
				}
				pub mod event_count {
					use super::runtime_types;
					pub type EventCount = ::core::primitive::u32;
				}
				pub mod event_topics {
					use super::runtime_types;
					pub type EventTopics = ::subxt::ext::subxt_core::alloc::vec::Vec<(
						::core::primitive::u32,
						::core::primitive::u32,
					)>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
				}
				pub mod last_runtime_upgrade {
					use super::runtime_types;
					pub type LastRuntimeUpgrade =
						runtime_types::frame_system::LastRuntimeUpgradeInfo;
				}
				pub mod upgraded_to_u32_ref_count {
					use super::runtime_types;
					pub type UpgradedToU32RefCount = ::core::primitive::bool;
				}
				pub mod upgraded_to_triple_ref_count {
					use super::runtime_types;
					pub type UpgradedToTripleRefCount = ::core::primitive::bool;
				}
				pub mod execution_phase {
					use super::runtime_types;
					pub type ExecutionPhase = runtime_types::frame_system::Phase;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The full account information for a particular account ID."]
				pub fn account_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::account::Account,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"Account",
						(),
						[
							14u8, 233u8, 115u8, 214u8, 0u8, 109u8, 222u8, 121u8, 162u8, 65u8, 60u8,
							175u8, 209u8, 79u8, 222u8, 124u8, 22u8, 235u8, 138u8, 176u8, 133u8,
							124u8, 90u8, 158u8, 85u8, 45u8, 37u8, 174u8, 47u8, 79u8, 47u8, 166u8,
						],
					)
				}
				#[doc = " The full account information for a particular account ID."]
				pub fn account(
					&self,
					_0: impl ::core::borrow::Borrow<types::account::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::account::Param0,
					>,
					types::account::Account,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"Account",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							14u8, 233u8, 115u8, 214u8, 0u8, 109u8, 222u8, 121u8, 162u8, 65u8, 60u8,
							175u8, 209u8, 79u8, 222u8, 124u8, 22u8, 235u8, 138u8, 176u8, 133u8,
							124u8, 90u8, 158u8, 85u8, 45u8, 37u8, 174u8, 47u8, 79u8, 47u8, 166u8,
						],
					)
				}
				#[doc = " Total extrinsics count for the current block."]
				pub fn extrinsic_count(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::extrinsic_count::ExtrinsicCount,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"ExtrinsicCount",
						(),
						[
							102u8, 76u8, 236u8, 42u8, 40u8, 231u8, 33u8, 222u8, 123u8, 147u8,
							153u8, 148u8, 234u8, 203u8, 181u8, 119u8, 6u8, 187u8, 177u8, 199u8,
							120u8, 47u8, 137u8, 254u8, 96u8, 100u8, 165u8, 182u8, 249u8, 230u8,
							159u8, 79u8,
						],
					)
				}
				#[doc = " The current weight for the block."]
				pub fn block_weight(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::block_weight::BlockWeight,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"BlockWeight",
						(),
						[
							158u8, 46u8, 228u8, 89u8, 210u8, 214u8, 84u8, 154u8, 50u8, 68u8, 63u8,
							62u8, 43u8, 42u8, 99u8, 27u8, 54u8, 42u8, 146u8, 44u8, 241u8, 216u8,
							229u8, 30u8, 216u8, 255u8, 165u8, 238u8, 181u8, 130u8, 36u8, 102u8,
						],
					)
				}
				#[doc = " Total length (in bytes) for all extrinsics put together, for the current block."]
				pub fn all_extrinsics_len(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::all_extrinsics_len::AllExtrinsicsLen,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"AllExtrinsicsLen",
						(),
						[
							117u8, 86u8, 61u8, 243u8, 41u8, 51u8, 102u8, 214u8, 137u8, 100u8,
							243u8, 185u8, 122u8, 174u8, 187u8, 117u8, 86u8, 189u8, 63u8, 135u8,
							101u8, 218u8, 203u8, 201u8, 237u8, 254u8, 128u8, 183u8, 169u8, 221u8,
							242u8, 65u8,
						],
					)
				}
				#[doc = " Map of block numbers to block hashes."]
				pub fn block_hash_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::block_hash::BlockHash,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"BlockHash",
						(),
						[
							217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
							103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
							164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
							202u8, 118u8,
						],
					)
				}
				#[doc = " Map of block numbers to block hashes."]
				pub fn block_hash(
					&self,
					_0: impl ::core::borrow::Borrow<types::block_hash::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::block_hash::Param0,
					>,
					types::block_hash::BlockHash,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"BlockHash",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
							103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
							164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
							202u8, 118u8,
						],
					)
				}
				#[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
				pub fn extrinsic_data_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::extrinsic_data::ExtrinsicData,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"ExtrinsicData",
						(),
						[
							160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
							220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
							128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
						],
					)
				}
				#[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
				pub fn extrinsic_data(
					&self,
					_0: impl ::core::borrow::Borrow<types::extrinsic_data::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::extrinsic_data::Param0,
					>,
					types::extrinsic_data::ExtrinsicData,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"ExtrinsicData",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
							220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
							128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
						],
					)
				}
				#[doc = " The current block number being processed. Set by `execute_block`."]
				pub fn number(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::number::Number,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"Number",
						(),
						[
							30u8, 194u8, 177u8, 90u8, 194u8, 232u8, 46u8, 180u8, 85u8, 129u8, 14u8,
							9u8, 8u8, 8u8, 23u8, 95u8, 230u8, 5u8, 13u8, 105u8, 125u8, 2u8, 22u8,
							200u8, 78u8, 93u8, 115u8, 28u8, 150u8, 113u8, 48u8, 53u8,
						],
					)
				}
				#[doc = " Hash of the previous block."]
				pub fn parent_hash(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::parent_hash::ParentHash,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"ParentHash",
						(),
						[
							26u8, 130u8, 11u8, 216u8, 155u8, 71u8, 128u8, 170u8, 30u8, 153u8, 21u8,
							192u8, 62u8, 93u8, 137u8, 80u8, 120u8, 81u8, 202u8, 94u8, 248u8, 125u8,
							71u8, 82u8, 141u8, 229u8, 32u8, 56u8, 73u8, 50u8, 101u8, 78u8,
						],
					)
				}
				#[doc = " Digest of the current block, also part of the block header."]
				pub fn digest(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::digest::Digest,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"Digest",
						(),
						[
							61u8, 64u8, 237u8, 91u8, 145u8, 232u8, 17u8, 254u8, 181u8, 16u8, 234u8,
							91u8, 51u8, 140u8, 254u8, 131u8, 98u8, 135u8, 21u8, 37u8, 251u8, 20u8,
							58u8, 92u8, 123u8, 141u8, 14u8, 227u8, 146u8, 46u8, 222u8, 117u8,
						],
					)
				}
				#[doc = " Events deposited for the current block."]
				#[doc = ""]
				#[doc = " NOTE: The item is unbound and should therefore never be read on chain."]
				#[doc = " It could otherwise inflate the PoV size of a block."]
				#[doc = ""]
				#[doc = " Events have a large in-memory size. Box the events to not go out-of-memory"]
				#[doc = " just in case someone still reads them from within the runtime."]
				pub fn events(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::events::Events,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"Events",
						(),
						[
							245u8, 253u8, 88u8, 239u8, 123u8, 215u8, 184u8, 116u8, 234u8, 133u8,
							238u8, 36u8, 207u8, 225u8, 175u8, 228u8, 70u8, 163u8, 154u8, 17u8,
							140u8, 10u8, 124u8, 139u8, 128u8, 252u8, 166u8, 34u8, 159u8, 91u8,
							226u8, 229u8,
						],
					)
				}
				#[doc = " The number of events in the `Events<T>` list."]
				pub fn event_count(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::event_count::EventCount,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"EventCount",
						(),
						[
							175u8, 24u8, 252u8, 184u8, 210u8, 167u8, 146u8, 143u8, 164u8, 80u8,
							151u8, 205u8, 189u8, 189u8, 55u8, 220u8, 47u8, 101u8, 181u8, 33u8,
							254u8, 131u8, 13u8, 143u8, 3u8, 244u8, 245u8, 45u8, 2u8, 210u8, 79u8,
							133u8,
						],
					)
				}
				#[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
				#[doc = " of events in the `<Events<T>>` list."]
				#[doc = ""]
				#[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
				#[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
				#[doc = " in case of changes fetch the list of events of interest."]
				#[doc = ""]
				#[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
				#[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
				#[doc = " no notification will be triggered thus the event might be lost."]
				pub fn event_topics_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::event_topics::EventTopics,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"EventTopics",
						(),
						[
							40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
							133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
							120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
						],
					)
				}
				#[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
				#[doc = " of events in the `<Events<T>>` list."]
				#[doc = ""]
				#[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
				#[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
				#[doc = " in case of changes fetch the list of events of interest."]
				#[doc = ""]
				#[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
				#[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
				#[doc = " no notification will be triggered thus the event might be lost."]
				pub fn event_topics(
					&self,
					_0: impl ::core::borrow::Borrow<types::event_topics::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::event_topics::Param0,
					>,
					types::event_topics::EventTopics,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"EventTopics",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
							133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
							120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
						],
					)
				}
				#[doc = " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
				pub fn last_runtime_upgrade(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::last_runtime_upgrade::LastRuntimeUpgrade,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"LastRuntimeUpgrade",
						(),
						[
							137u8, 29u8, 175u8, 75u8, 197u8, 208u8, 91u8, 207u8, 156u8, 87u8,
							148u8, 68u8, 91u8, 140u8, 22u8, 233u8, 1u8, 229u8, 56u8, 34u8, 40u8,
							194u8, 253u8, 30u8, 163u8, 39u8, 54u8, 209u8, 13u8, 27u8, 139u8, 184u8,
						],
					)
				}
				#[doc = " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
				pub fn upgraded_to_u32_ref_count(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::upgraded_to_u32_ref_count::UpgradedToU32RefCount,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"UpgradedToU32RefCount",
						(),
						[
							229u8, 73u8, 9u8, 132u8, 186u8, 116u8, 151u8, 171u8, 145u8, 29u8, 34u8,
							130u8, 52u8, 146u8, 124u8, 175u8, 79u8, 189u8, 147u8, 230u8, 234u8,
							107u8, 124u8, 31u8, 2u8, 22u8, 86u8, 190u8, 4u8, 147u8, 50u8, 245u8,
						],
					)
				}
				#[doc = " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"]
				#[doc = " (default) if not."]
				pub fn upgraded_to_triple_ref_count(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::upgraded_to_triple_ref_count::UpgradedToTripleRefCount,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"UpgradedToTripleRefCount",
						(),
						[
							97u8, 66u8, 124u8, 243u8, 27u8, 167u8, 147u8, 81u8, 254u8, 201u8,
							101u8, 24u8, 40u8, 231u8, 14u8, 179u8, 154u8, 163u8, 71u8, 81u8, 185u8,
							167u8, 82u8, 254u8, 189u8, 3u8, 101u8, 207u8, 206u8, 194u8, 155u8,
							151u8,
						],
					)
				}
				#[doc = " The execution phase of the block."]
				pub fn execution_phase(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::execution_phase::ExecutionPhase,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"System",
						"ExecutionPhase",
						(),
						[
							191u8, 129u8, 100u8, 134u8, 126u8, 116u8, 154u8, 203u8, 220u8, 200u8,
							0u8, 26u8, 161u8, 250u8, 133u8, 205u8, 146u8, 24u8, 5u8, 156u8, 158u8,
							35u8, 36u8, 253u8, 52u8, 235u8, 86u8, 167u8, 35u8, 100u8, 119u8, 27u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Block & extrinsics weights: base values and limits."]
				pub fn block_weights(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::frame_system::limits::BlockWeights,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"System",
						"BlockWeights",
						[
							176u8, 124u8, 225u8, 136u8, 25u8, 73u8, 247u8, 33u8, 82u8, 206u8, 85u8,
							190u8, 127u8, 102u8, 71u8, 11u8, 185u8, 8u8, 58u8, 0u8, 94u8, 55u8,
							163u8, 177u8, 104u8, 59u8, 60u8, 136u8, 246u8, 116u8, 0u8, 239u8,
						],
					)
				}
				#[doc = " The maximum length of a block (in bytes)."]
				pub fn block_length(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::frame_system::limits::BlockLength,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"System",
						"BlockLength",
						[
							23u8, 242u8, 225u8, 39u8, 225u8, 67u8, 152u8, 41u8, 155u8, 104u8, 68u8,
							229u8, 185u8, 133u8, 10u8, 143u8, 184u8, 152u8, 234u8, 44u8, 140u8,
							96u8, 166u8, 235u8, 162u8, 160u8, 72u8, 7u8, 35u8, 194u8, 3u8, 37u8,
						],
					)
				}
				#[doc = " Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
				pub fn block_hash_count(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"System",
						"BlockHashCount",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The weight of runtime database operations the runtime can invoke."]
				pub fn db_weight(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::sp_weights::RuntimeDbWeight,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"System",
						"DbWeight",
						[
							42u8, 43u8, 178u8, 142u8, 243u8, 203u8, 60u8, 173u8, 118u8, 111u8,
							200u8, 170u8, 102u8, 70u8, 237u8, 187u8, 198u8, 120u8, 153u8, 232u8,
							183u8, 76u8, 74u8, 10u8, 70u8, 243u8, 14u8, 218u8, 213u8, 126u8, 29u8,
							177u8,
						],
					)
				}
				#[doc = " Get the chain's current version."]
				pub fn version(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::sp_version::RuntimeVersion,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"System",
						"Version",
						[
							219u8, 45u8, 162u8, 245u8, 177u8, 246u8, 48u8, 126u8, 191u8, 157u8,
							228u8, 83u8, 111u8, 133u8, 183u8, 13u8, 148u8, 108u8, 92u8, 102u8,
							72u8, 205u8, 74u8, 242u8, 233u8, 79u8, 20u8, 170u8, 72u8, 202u8, 158u8,
							165u8,
						],
					)
				}
				#[doc = " The designated SS58 prefix of this chain."]
				#[doc = ""]
				#[doc = " This replaces the \"ss58Format\" property declared in the chain spec. Reason is"]
				#[doc = " that the runtime should know about the prefix in order to make use of it as"]
				#[doc = " an identifier of the chain."]
				pub fn ss58_prefix(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u16,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"System",
						"SS58Prefix",
						[
							116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
							41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
							90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
						],
					)
				}
			}
		}
	}
	pub mod timestamp {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_timestamp::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the current time."]
				#[doc = ""]
				#[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
				#[doc = "phase, if this call hasn't been invoked by that time."]
				#[doc = ""]
				#[doc = "The timestamp should be greater than the previous one by the amount specified by"]
				#[doc = "`MinimumPeriod`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Inherent`."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
				#[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
				#[doc = "  `on_finalize`)"]
				#[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
				pub struct Set {
					#[codec(compact)]
					pub now: set::Now,
				}
				pub mod set {
					use super::runtime_types;
					pub type Now = ::core::primitive::u64;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Set {
					const PALLET: &'static str = "Timestamp";
					const CALL: &'static str = "set";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Set the current time."]
				#[doc = ""]
				#[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
				#[doc = "phase, if this call hasn't been invoked by that time."]
				#[doc = ""]
				#[doc = "The timestamp should be greater than the previous one by the amount specified by"]
				#[doc = "`MinimumPeriod`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Inherent`."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
				#[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
				#[doc = "  `on_finalize`)"]
				#[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
				pub fn set(
					&self,
					now: types::set::Now,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Set> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Timestamp",
						"set",
						types::Set { now },
						[
							37u8, 95u8, 49u8, 218u8, 24u8, 22u8, 0u8, 95u8, 72u8, 35u8, 155u8,
							199u8, 213u8, 54u8, 207u8, 22u8, 185u8, 193u8, 221u8, 70u8, 18u8,
							200u8, 4u8, 231u8, 195u8, 173u8, 6u8, 122u8, 11u8, 203u8, 231u8, 227u8,
						],
					)
				}
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod now {
					use super::runtime_types;
					pub type Now = ::core::primitive::u64;
				}
				pub mod did_update {
					use super::runtime_types;
					pub type DidUpdate = ::core::primitive::bool;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Current time for the current block."]
				pub fn now(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::now::Now,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Timestamp",
						"Now",
						(),
						[
							44u8, 50u8, 80u8, 30u8, 195u8, 146u8, 123u8, 238u8, 8u8, 163u8, 187u8,
							92u8, 61u8, 39u8, 51u8, 29u8, 173u8, 169u8, 217u8, 158u8, 85u8, 187u8,
							141u8, 26u8, 12u8, 115u8, 51u8, 11u8, 200u8, 244u8, 138u8, 152u8,
						],
					)
				}
				#[doc = " Did the timestamp get updated in this block?"]
				pub fn did_update(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::did_update::DidUpdate,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Timestamp",
						"DidUpdate",
						(),
						[
							229u8, 175u8, 246u8, 102u8, 237u8, 158u8, 212u8, 229u8, 238u8, 214u8,
							205u8, 160u8, 164u8, 252u8, 195u8, 75u8, 139u8, 110u8, 22u8, 34u8,
							248u8, 204u8, 107u8, 46u8, 20u8, 200u8, 238u8, 167u8, 71u8, 41u8,
							214u8, 140u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The minimum period between blocks. Beware that this is different to the *expected*"]
				#[doc = " period that the block production apparatus provides. Your chosen consensus system will"]
				#[doc = " generally work with this to determine a sensible block time. e.g. For Aura, it will be"]
				#[doc = " double this period on default settings."]
				pub fn minimum_period(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u64,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Timestamp",
						"MinimumPeriod",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
			}
		}
	}
	pub mod sudo {
		use super::{root_mod, runtime_types};
		#[doc = "Error for the Sudo pallet"]
		pub type Error = runtime_types::pallet_sudo::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_sudo::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(1)."]
				pub struct Sudo {
					pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<sudo::Call>,
				}
				pub mod sudo {
					use super::runtime_types;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Sudo {
					const PALLET: &'static str = "Sudo";
					const CALL: &'static str = "sudo";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
				#[doc = "This function does not check the weight of the call, and instead allows the"]
				#[doc = "Sudo user to specify the weight of the call."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(1)."]
				pub struct SudoUncheckedWeight {
					pub call:
						::subxt::ext::subxt_core::alloc::boxed::Box<sudo_unchecked_weight::Call>,
					pub weight: sudo_unchecked_weight::Weight,
				}
				pub mod sudo_unchecked_weight {
					use super::runtime_types;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
					pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SudoUncheckedWeight {
					const PALLET: &'static str = "Sudo";
					const CALL: &'static str = "sudo_unchecked_weight";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
				#[doc = "key."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(1)."]
				pub struct SetKey {
					pub new: set_key::New,
				}
				pub mod set_key {
					use super::runtime_types;
					pub type New = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetKey {
					const PALLET: &'static str = "Sudo";
					const CALL: &'static str = "set_key";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
				#[doc = "a given account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(1)."]
				pub struct SudoAs {
					pub who: sudo_as::Who,
					pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<sudo_as::Call>,
				}
				pub mod sudo_as {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SudoAs {
					const PALLET: &'static str = "Sudo";
					const CALL: &'static str = "sudo_as";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(1)."]
				pub fn sudo(
					&self,
					call: types::sudo::Call,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Sudo> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Sudo",
						"sudo",
						types::Sudo {
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
						},
						[
							107u8, 150u8, 219u8, 152u8, 168u8, 227u8, 169u8, 166u8, 137u8, 184u8,
							242u8, 215u8, 70u8, 77u8, 59u8, 231u8, 102u8, 242u8, 51u8, 33u8, 178u8,
							51u8, 110u8, 79u8, 202u8, 54u8, 83u8, 63u8, 177u8, 206u8, 137u8, 253u8,
						],
					)
				}
				#[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
				#[doc = "This function does not check the weight of the call, and instead allows the"]
				#[doc = "Sudo user to specify the weight of the call."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(1)."]
				pub fn sudo_unchecked_weight(
					&self,
					call: types::sudo_unchecked_weight::Call,
					weight: types::sudo_unchecked_weight::Weight,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SudoUncheckedWeight>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Sudo",
						"sudo_unchecked_weight",
						types::SudoUncheckedWeight {
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
							weight,
						},
						[
							30u8, 195u8, 243u8, 152u8, 57u8, 139u8, 232u8, 47u8, 11u8, 241u8, 35u8,
							17u8, 141u8, 217u8, 47u8, 10u8, 73u8, 242u8, 82u8, 75u8, 223u8, 185u8,
							165u8, 19u8, 110u8, 205u8, 39u8, 247u8, 217u8, 204u8, 197u8, 168u8,
						],
					)
				}
				#[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
				#[doc = "key."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(1)."]
				pub fn set_key(
					&self,
					new: types::set_key::New,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetKey> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Sudo",
						"set_key",
						types::SetKey { new },
						[
							247u8, 148u8, 125u8, 134u8, 90u8, 138u8, 216u8, 117u8, 246u8, 75u8,
							85u8, 242u8, 229u8, 203u8, 227u8, 242u8, 166u8, 28u8, 247u8, 215u8,
							35u8, 13u8, 243u8, 13u8, 4u8, 48u8, 175u8, 192u8, 63u8, 142u8, 13u8,
							94u8,
						],
					)
				}
				#[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
				#[doc = "a given account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(1)."]
				pub fn sudo_as(
					&self,
					who: types::sudo_as::Who,
					call: types::sudo_as::Call,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SudoAs> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Sudo",
						"sudo_as",
						types::SudoAs {
							who,
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
						},
						[
							216u8, 186u8, 215u8, 168u8, 51u8, 75u8, 133u8, 1u8, 163u8, 53u8, 20u8,
							184u8, 89u8, 125u8, 52u8, 11u8, 79u8, 250u8, 207u8, 115u8, 129u8, 33u8,
							7u8, 232u8, 24u8, 142u8, 74u8, 164u8, 24u8, 23u8, 135u8, 7u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_sudo::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A sudo just took place. \\[result\\]"]
			pub struct Sudid {
				pub sudo_result: sudid::SudoResult,
			}
			pub mod sudid {
				use super::runtime_types;
				pub type SudoResult =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Sudid {
				const PALLET: &'static str = "Sudo";
				const EVENT: &'static str = "Sudid";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
			pub struct KeyChanged {
				pub old_sudoer: key_changed::OldSudoer,
			}
			pub mod key_changed {
				use super::runtime_types;
				pub type OldSudoer =
					::core::option::Option<::subxt::ext::subxt_core::utils::AccountId32>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for KeyChanged {
				const PALLET: &'static str = "Sudo";
				const EVENT: &'static str = "KeyChanged";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A sudo just took place. \\[result\\]"]
			pub struct SudoAsDone {
				pub sudo_result: sudo_as_done::SudoResult,
			}
			pub mod sudo_as_done {
				use super::runtime_types;
				pub type SudoResult =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for SudoAsDone {
				const PALLET: &'static str = "Sudo";
				const EVENT: &'static str = "SudoAsDone";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod key {
					use super::runtime_types;
					pub type Key = ::subxt::ext::subxt_core::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The `AccountId` of the sudo key."]
				pub fn key(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::key::Key,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Sudo",
						"Key",
						(),
						[
							72u8, 14u8, 225u8, 162u8, 205u8, 247u8, 227u8, 105u8, 116u8, 57u8, 4u8,
							31u8, 84u8, 137u8, 227u8, 228u8, 133u8, 245u8, 206u8, 227u8, 117u8,
							36u8, 252u8, 151u8, 107u8, 15u8, 180u8, 4u8, 4u8, 152u8, 195u8, 144u8,
						],
					)
				}
			}
		}
	}
	pub mod transaction_payment {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_transaction_payment::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
			#[doc = "has been paid by `who`."]
			pub struct TransactionFeePaid {
				pub who: transaction_fee_paid::Who,
				pub actual_fee: transaction_fee_paid::ActualFee,
				pub tip: transaction_fee_paid::Tip,
			}
			pub mod transaction_fee_paid {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type ActualFee = ::core::primitive::u128;
				pub type Tip = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for TransactionFeePaid {
				const PALLET: &'static str = "TransactionPayment";
				const EVENT: &'static str = "TransactionFeePaid";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod next_fee_multiplier {
					use super::runtime_types;
					pub type NextFeeMultiplier =
						runtime_types::sp_arithmetic::fixed_point::FixedU128;
				}
				pub mod storage_version {
					use super::runtime_types;
					pub type StorageVersion = runtime_types::pallet_transaction_payment::Releases;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn next_fee_multiplier(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::next_fee_multiplier::NextFeeMultiplier,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"TransactionPayment",
						"NextFeeMultiplier",
						(),
						[
							247u8, 39u8, 81u8, 170u8, 225u8, 226u8, 82u8, 147u8, 34u8, 113u8,
							147u8, 213u8, 59u8, 80u8, 139u8, 35u8, 36u8, 196u8, 152u8, 19u8, 9u8,
							159u8, 176u8, 79u8, 249u8, 201u8, 170u8, 1u8, 129u8, 79u8, 146u8,
							197u8,
						],
					)
				}
				pub fn storage_version(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::storage_version::StorageVersion,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"TransactionPayment",
						"StorageVersion",
						(),
						[
							105u8, 243u8, 158u8, 241u8, 159u8, 231u8, 253u8, 6u8, 4u8, 32u8, 85u8,
							178u8, 126u8, 31u8, 203u8, 134u8, 154u8, 38u8, 122u8, 155u8, 150u8,
							251u8, 174u8, 15u8, 74u8, 134u8, 216u8, 244u8, 168u8, 175u8, 158u8,
							144u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their"]
				#[doc = " `priority`"]
				#[doc = ""]
				#[doc = " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later"]
				#[doc = " added to a tip component in regular `priority` calculations."]
				#[doc = " It means that a `Normal` transaction can front-run a similarly-sized `Operational`"]
				#[doc = " extrinsic (with no tip), by including a tip value greater than the virtual tip."]
				#[doc = ""]
				#[doc = " ```rust,ignore"]
				#[doc = " // For `Normal`"]
				#[doc = " let priority = priority_calc(tip);"]
				#[doc = ""]
				#[doc = " // For `Operational`"]
				#[doc = " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;"]
				#[doc = " let priority = priority_calc(tip + virtual_tip);"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " Note that since we use `final_fee` the multiplier applies also to the regular `tip`"]
				#[doc = " sent with the transaction. So, not only does the transaction get a priority bump based"]
				#[doc = " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`"]
				#[doc = " transactions."]
				pub fn operational_fee_multiplier(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u8,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"TransactionPayment",
						"OperationalFeeMultiplier",
						[
							141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
							28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
							114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
							165u8,
						],
					)
				}
			}
		}
	}
	pub mod asset_tx_payment {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_asset_tx_payment::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Sets or resets payment asset."]
				#[doc = ""]
				#[doc = "If `asset_id` is `None`, then native asset is used."]
				#[doc = "Else new asset is configured and ED is on hold."]
				pub struct SetPaymentAsset {
					pub payer: set_payment_asset::Payer,
					pub asset_id: set_payment_asset::AssetId,
				}
				pub mod set_payment_asset {
					use super::runtime_types;
					pub type Payer = ::subxt::ext::subxt_core::utils::AccountId32;
					pub type AssetId =
						::core::option::Option<runtime_types::primitives::currency::CurrencyId>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetPaymentAsset {
					const PALLET: &'static str = "AssetTxPayment";
					const CALL: &'static str = "set_payment_asset";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Sets or resets payment asset."]
				#[doc = ""]
				#[doc = "If `asset_id` is `None`, then native asset is used."]
				#[doc = "Else new asset is configured and ED is on hold."]
				pub fn set_payment_asset(
					&self,
					payer: types::set_payment_asset::Payer,
					asset_id: types::set_payment_asset::AssetId,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetPaymentAsset>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"AssetTxPayment",
						"set_payment_asset",
						types::SetPaymentAsset { payer, asset_id },
						[
							95u8, 250u8, 148u8, 0u8, 111u8, 232u8, 249u8, 9u8, 69u8, 59u8, 37u8,
							240u8, 255u8, 61u8, 96u8, 85u8, 23u8, 193u8, 214u8, 2u8, 127u8, 154u8,
							243u8, 104u8, 46u8, 117u8, 36u8, 43u8, 206u8, 147u8, 173u8, 39u8,
						],
					)
				}
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod payment_assets {
					use super::runtime_types;
					pub type PaymentAssets =
						(runtime_types::primitives::currency::CurrencyId, ::core::primitive::u128);
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Stores default payment asset of user with ED locked."]
				pub fn payment_assets_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::payment_assets::PaymentAssets,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetTxPayment",
						"PaymentAssets",
						(),
						[
							58u8, 117u8, 64u8, 244u8, 69u8, 225u8, 149u8, 16u8, 119u8, 125u8,
							229u8, 78u8, 76u8, 185u8, 70u8, 254u8, 111u8, 100u8, 154u8, 184u8,
							248u8, 14u8, 127u8, 233u8, 84u8, 185u8, 194u8, 110u8, 173u8, 241u8,
							125u8, 12u8,
						],
					)
				}
				#[doc = " Stores default payment asset of user with ED locked."]
				pub fn payment_assets(
					&self,
					_0: impl ::core::borrow::Borrow<types::payment_assets::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::payment_assets::Param0,
					>,
					types::payment_assets::PaymentAssets,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetTxPayment",
						"PaymentAssets",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							58u8, 117u8, 64u8, 244u8, 69u8, 225u8, 149u8, 16u8, 119u8, 125u8,
							229u8, 78u8, 76u8, 185u8, 70u8, 254u8, 111u8, 100u8, 154u8, 184u8,
							248u8, 14u8, 127u8, 233u8, 84u8, 185u8, 194u8, 110u8, 173u8, 241u8,
							125u8, 12u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " where to allow configuring default asset per user"]
				pub fn use_user_configuration(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::bool,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"AssetTxPayment",
						"UseUserConfiguration",
						[
							165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
							252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
							100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
						],
					)
				}
			}
		}
	}
	pub mod indices {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_indices::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_indices::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Assign an previously unassigned index."]
				#[doc = ""]
				#[doc = "Payment: `Deposit` is reserved from the sender account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `index`: the index to be claimed. This must not be in use."]
				#[doc = ""]
				#[doc = "Emits `IndexAssigned` if successful."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)`."]
				pub struct Claim {
					pub index: claim::Index,
				}
				pub mod claim {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Claim {
					const PALLET: &'static str = "Indices";
					const CALL: &'static str = "claim";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Assign an index already owned by the sender to another account. The balance reservation"]
				#[doc = "is effectively transferred to the new account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `index`: the index to be re-assigned. This must be owned by the sender."]
				#[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
				#[doc = ""]
				#[doc = "Emits `IndexAssigned` if successful."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)`."]
				pub struct Transfer {
					pub new: transfer::New,
					pub index: transfer::Index,
				}
				pub mod transfer {
					use super::runtime_types;
					pub type New = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Transfer {
					const PALLET: &'static str = "Indices";
					const CALL: &'static str = "transfer";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Free up an index owned by the sender."]
				#[doc = ""]
				#[doc = "Payment: Any previous deposit placed for the index is unreserved in the sender account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must own the index."]
				#[doc = ""]
				#[doc = "- `index`: the index to be freed. This must be owned by the sender."]
				#[doc = ""]
				#[doc = "Emits `IndexFreed` if successful."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)`."]
				pub struct Free {
					pub index: free::Index,
				}
				pub mod free {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Free {
					const PALLET: &'static str = "Indices";
					const CALL: &'static str = "free";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Force an index to an account. This doesn't require a deposit. If the index is already"]
				#[doc = "held, then any deposit is reimbursed to its current owner."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				#[doc = ""]
				#[doc = "- `index`: the index to be (re-)assigned."]
				#[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
				#[doc = "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred."]
				#[doc = ""]
				#[doc = "Emits `IndexAssigned` if successful."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)`."]
				pub struct ForceTransfer {
					pub new: force_transfer::New,
					pub index: force_transfer::Index,
					pub freeze: force_transfer::Freeze,
				}
				pub mod force_transfer {
					use super::runtime_types;
					pub type New = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Index = ::core::primitive::u32;
					pub type Freeze = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceTransfer {
					const PALLET: &'static str = "Indices";
					const CALL: &'static str = "force_transfer";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Freeze an index so it will always point to the sender account. This consumes the"]
				#[doc = "deposit."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the signing account must have a"]
				#[doc = "non-frozen account `index`."]
				#[doc = ""]
				#[doc = "- `index`: the index to be frozen in place."]
				#[doc = ""]
				#[doc = "Emits `IndexFrozen` if successful."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)`."]
				pub struct Freeze {
					pub index: freeze::Index,
				}
				pub mod freeze {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Freeze {
					const PALLET: &'static str = "Indices";
					const CALL: &'static str = "freeze";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Assign an previously unassigned index."]
				#[doc = ""]
				#[doc = "Payment: `Deposit` is reserved from the sender account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `index`: the index to be claimed. This must not be in use."]
				#[doc = ""]
				#[doc = "Emits `IndexAssigned` if successful."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)`."]
				pub fn claim(
					&self,
					index: types::claim::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Claim> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Indices",
						"claim",
						types::Claim { index },
						[
							146u8, 58u8, 246u8, 135u8, 59u8, 90u8, 3u8, 5u8, 140u8, 169u8, 232u8,
							195u8, 11u8, 107u8, 36u8, 141u8, 118u8, 174u8, 160u8, 160u8, 19u8,
							205u8, 177u8, 193u8, 18u8, 102u8, 115u8, 31u8, 72u8, 29u8, 91u8, 235u8,
						],
					)
				}
				#[doc = "Assign an index already owned by the sender to another account. The balance reservation"]
				#[doc = "is effectively transferred to the new account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `index`: the index to be re-assigned. This must be owned by the sender."]
				#[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
				#[doc = ""]
				#[doc = "Emits `IndexAssigned` if successful."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)`."]
				pub fn transfer(
					&self,
					new: types::transfer::New,
					index: types::transfer::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Transfer> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Indices",
						"transfer",
						types::Transfer { new, index },
						[
							253u8, 209u8, 123u8, 236u8, 91u8, 71u8, 183u8, 49u8, 84u8, 13u8, 130u8,
							208u8, 181u8, 218u8, 219u8, 178u8, 71u8, 76u8, 228u8, 249u8, 197u8,
							243u8, 136u8, 122u8, 150u8, 179u8, 249u8, 187u8, 150u8, 158u8, 201u8,
							134u8,
						],
					)
				}
				#[doc = "Free up an index owned by the sender."]
				#[doc = ""]
				#[doc = "Payment: Any previous deposit placed for the index is unreserved in the sender account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must own the index."]
				#[doc = ""]
				#[doc = "- `index`: the index to be freed. This must be owned by the sender."]
				#[doc = ""]
				#[doc = "Emits `IndexFreed` if successful."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)`."]
				pub fn free(
					&self,
					index: types::free::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Free> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Indices",
						"free",
						types::Free { index },
						[
							241u8, 211u8, 234u8, 102u8, 189u8, 22u8, 209u8, 27u8, 8u8, 229u8, 80u8,
							227u8, 138u8, 252u8, 222u8, 111u8, 77u8, 201u8, 235u8, 51u8, 163u8,
							247u8, 13u8, 126u8, 216u8, 136u8, 57u8, 222u8, 56u8, 66u8, 215u8,
							244u8,
						],
					)
				}
				#[doc = "Force an index to an account. This doesn't require a deposit. If the index is already"]
				#[doc = "held, then any deposit is reimbursed to its current owner."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				#[doc = ""]
				#[doc = "- `index`: the index to be (re-)assigned."]
				#[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
				#[doc = "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred."]
				#[doc = ""]
				#[doc = "Emits `IndexAssigned` if successful."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)`."]
				pub fn force_transfer(
					&self,
					new: types::force_transfer::New,
					index: types::force_transfer::Index,
					freeze: types::force_transfer::Freeze,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceTransfer>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Indices",
						"force_transfer",
						types::ForceTransfer { new, index, freeze },
						[
							61u8, 7u8, 111u8, 227u8, 228u8, 62u8, 178u8, 225u8, 195u8, 185u8,
							243u8, 161u8, 156u8, 53u8, 165u8, 178u8, 238u8, 146u8, 66u8, 165u8,
							7u8, 137u8, 36u8, 7u8, 118u8, 84u8, 203u8, 3u8, 143u8, 95u8, 99u8,
							192u8,
						],
					)
				}
				#[doc = "Freeze an index so it will always point to the sender account. This consumes the"]
				#[doc = "deposit."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the signing account must have a"]
				#[doc = "non-frozen account `index`."]
				#[doc = ""]
				#[doc = "- `index`: the index to be frozen in place."]
				#[doc = ""]
				#[doc = "Emits `IndexFrozen` if successful."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)`."]
				pub fn freeze(
					&self,
					index: types::freeze::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Freeze> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Indices",
						"freeze",
						types::Freeze { index },
						[
							238u8, 215u8, 108u8, 156u8, 84u8, 240u8, 130u8, 229u8, 27u8, 132u8,
							93u8, 78u8, 2u8, 251u8, 43u8, 203u8, 2u8, 142u8, 147u8, 48u8, 92u8,
							101u8, 207u8, 24u8, 51u8, 16u8, 36u8, 229u8, 188u8, 129u8, 160u8,
							117u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_indices::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A account index was assigned."]
			pub struct IndexAssigned {
				pub who: index_assigned::Who,
				pub index: index_assigned::Index,
			}
			pub mod index_assigned {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for IndexAssigned {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexAssigned";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A account index has been freed up (unassigned)."]
			pub struct IndexFreed {
				pub index: index_freed::Index,
			}
			pub mod index_freed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for IndexFreed {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexFreed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A account index has been frozen to its current account ID."]
			pub struct IndexFrozen {
				pub index: index_frozen::Index,
				pub who: index_frozen::Who,
			}
			pub mod index_frozen {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for IndexFrozen {
				const PALLET: &'static str = "Indices";
				const EVENT: &'static str = "IndexFrozen";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod accounts {
					use super::runtime_types;
					pub type Accounts = (
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u128,
						::core::primitive::bool,
					);
					pub type Param0 = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The lookup from index to account."]
				pub fn accounts_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::accounts::Accounts,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Indices",
						"Accounts",
						(),
						[
							48u8, 189u8, 43u8, 119u8, 32u8, 168u8, 28u8, 12u8, 245u8, 81u8, 119u8,
							182u8, 23u8, 201u8, 33u8, 147u8, 128u8, 171u8, 155u8, 134u8, 71u8,
							87u8, 100u8, 248u8, 107u8, 129u8, 36u8, 197u8, 220u8, 90u8, 11u8,
							238u8,
						],
					)
				}
				#[doc = " The lookup from index to account."]
				pub fn accounts(
					&self,
					_0: impl ::core::borrow::Borrow<types::accounts::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::accounts::Param0,
					>,
					types::accounts::Accounts,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Indices",
						"Accounts",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							48u8, 189u8, 43u8, 119u8, 32u8, 168u8, 28u8, 12u8, 245u8, 81u8, 119u8,
							182u8, 23u8, 201u8, 33u8, 147u8, 128u8, 171u8, 155u8, 134u8, 71u8,
							87u8, 100u8, 248u8, 107u8, 129u8, 36u8, 197u8, 220u8, 90u8, 11u8,
							238u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The deposit needed for reserving an index."]
				pub fn deposit(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Indices",
						"Deposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod balances {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_balances::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_balances::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer some liquid free balance to another account."]
				#[doc = ""]
				#[doc = "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver."]
				#[doc = "If the sender's account is below the existential deposit as a result"]
				#[doc = "of the transfer, the account will be reaped."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
				pub struct TransferAllowDeath {
					pub dest: transfer_allow_death::Dest,
					#[codec(compact)]
					pub value: transfer_allow_death::Value,
				}
				pub mod transfer_allow_death {
					use super::runtime_types;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Value = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferAllowDeath {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "transfer_allow_death";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the regular balance of a given account; it also takes a reserved balance but this"]
				#[doc = "must be the same as the account's current reserved balance."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call is `root`."]
				#[doc = ""]
				#[doc = "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."]
				pub struct SetBalanceDeprecated {
					pub who: set_balance_deprecated::Who,
					#[codec(compact)]
					pub new_free: set_balance_deprecated::NewFree,
					#[codec(compact)]
					pub old_reserved: set_balance_deprecated::OldReserved,
				}
				pub mod set_balance_deprecated {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type NewFree = ::core::primitive::u128;
					pub type OldReserved = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetBalanceDeprecated {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "set_balance_deprecated";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Exactly as `transfer_allow_death`, except the origin must be root and the source account"]
				#[doc = "may be specified."]
				pub struct ForceTransfer {
					pub source: force_transfer::Source,
					pub dest: force_transfer::Dest,
					#[codec(compact)]
					pub value: force_transfer::Value,
				}
				pub mod force_transfer {
					use super::runtime_types;
					pub type Source = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Value = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceTransfer {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "force_transfer";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not"]
				#[doc = "kill the origin account."]
				#[doc = ""]
				#[doc = "99% of the time you want [`transfer_allow_death`] instead."]
				#[doc = ""]
				#[doc = "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"]
				pub struct TransferKeepAlive {
					pub dest: transfer_keep_alive::Dest,
					#[codec(compact)]
					pub value: transfer_keep_alive::Value,
				}
				pub mod transfer_keep_alive {
					use super::runtime_types;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Value = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferKeepAlive {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "transfer_keep_alive";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer the entire transferable balance from the caller account."]
				#[doc = ""]
				#[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
				#[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
				#[doc = "transferred by this function. To ensure that this function results in a killed account,"]
				#[doc = "you might need to prepare the account by removing any reference counters, storage"]
				#[doc = "deposits, etc..."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be Signed."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
				#[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
				#[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
				#[doc = "  keep the sender account alive (true)."]
				pub struct TransferAll {
					pub dest: transfer_all::Dest,
					pub keep_alive: transfer_all::KeepAlive,
				}
				pub mod transfer_all {
					use super::runtime_types;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type KeepAlive = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferAll {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "transfer_all";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Unreserve some balance from a user by force."]
				#[doc = ""]
				#[doc = "Can only be called by ROOT."]
				pub struct ForceUnreserve {
					pub who: force_unreserve::Who,
					pub amount: force_unreserve::Amount,
				}
				pub mod force_unreserve {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceUnreserve {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "force_unreserve";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Upgrade a specified account."]
				#[doc = ""]
				#[doc = "- `origin`: Must be `Signed`."]
				#[doc = "- `who`: The account to be upgraded."]
				#[doc = ""]
				#[doc = "This will waive the transaction fee if at least all but 10% of the accounts needed to"]
				#[doc = "be upgraded. (We let some not have to be upgraded just in order to allow for the"]
				#[doc = "possibililty of churn)."]
				pub struct UpgradeAccounts {
					pub who: upgrade_accounts::Who,
				}
				pub mod upgrade_accounts {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpgradeAccounts {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "upgrade_accounts";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Alias for `transfer_allow_death`, provided only for name-wise compatibility."]
				#[doc = ""]
				#[doc = "WARNING: DEPRECATED! Will be released in approximately 3 months."]
				pub struct Transfer {
					pub dest: transfer::Dest,
					#[codec(compact)]
					pub value: transfer::Value,
				}
				pub mod transfer {
					use super::runtime_types;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Value = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Transfer {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "transfer";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the regular balance of a given account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call is `root`."]
				pub struct ForceSetBalance {
					pub who: force_set_balance::Who,
					#[codec(compact)]
					pub new_free: force_set_balance::NewFree,
				}
				pub mod force_set_balance {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type NewFree = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceSetBalance {
					const PALLET: &'static str = "Balances";
					const CALL: &'static str = "force_set_balance";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Transfer some liquid free balance to another account."]
				#[doc = ""]
				#[doc = "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver."]
				#[doc = "If the sender's account is below the existential deposit as a result"]
				#[doc = "of the transfer, the account will be reaped."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
				pub fn transfer_allow_death(
					&self,
					dest: types::transfer_allow_death::Dest,
					value: types::transfer_allow_death::Value,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferAllowDeath>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Balances",
						"transfer_allow_death",
						types::TransferAllowDeath { dest, value },
						[
							24u8, 176u8, 111u8, 60u8, 103u8, 161u8, 139u8, 10u8, 197u8, 207u8,
							140u8, 212u8, 166u8, 50u8, 47u8, 150u8, 83u8, 180u8, 86u8, 4u8, 159u8,
							84u8, 195u8, 71u8, 204u8, 109u8, 233u8, 23u8, 10u8, 156u8, 209u8,
							153u8,
						],
					)
				}
				#[doc = "Set the regular balance of a given account; it also takes a reserved balance but this"]
				#[doc = "must be the same as the account's current reserved balance."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call is `root`."]
				#[doc = ""]
				#[doc = "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."]
				pub fn set_balance_deprecated(
					&self,
					who: types::set_balance_deprecated::Who,
					new_free: types::set_balance_deprecated::NewFree,
					old_reserved: types::set_balance_deprecated::OldReserved,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetBalanceDeprecated>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Balances",
						"set_balance_deprecated",
						types::SetBalanceDeprecated { who, new_free, old_reserved },
						[
							37u8, 252u8, 153u8, 117u8, 175u8, 86u8, 206u8, 115u8, 114u8, 75u8,
							226u8, 183u8, 222u8, 208u8, 208u8, 16u8, 90u8, 82u8, 101u8, 241u8,
							82u8, 161u8, 116u8, 175u8, 200u8, 113u8, 154u8, 220u8, 224u8, 245u8,
							112u8, 215u8,
						],
					)
				}
				#[doc = "Exactly as `transfer_allow_death`, except the origin must be root and the source account"]
				#[doc = "may be specified."]
				pub fn force_transfer(
					&self,
					source: types::force_transfer::Source,
					dest: types::force_transfer::Dest,
					value: types::force_transfer::Value,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceTransfer>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Balances",
						"force_transfer",
						types::ForceTransfer { source, dest, value },
						[
							23u8, 7u8, 44u8, 138u8, 180u8, 140u8, 216u8, 52u8, 198u8, 3u8, 225u8,
							116u8, 47u8, 26u8, 61u8, 163u8, 55u8, 64u8, 113u8, 250u8, 192u8, 16u8,
							228u8, 228u8, 85u8, 255u8, 100u8, 128u8, 245u8, 132u8, 84u8, 186u8,
						],
					)
				}
				#[doc = "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not"]
				#[doc = "kill the origin account."]
				#[doc = ""]
				#[doc = "99% of the time you want [`transfer_allow_death`] instead."]
				#[doc = ""]
				#[doc = "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"]
				pub fn transfer_keep_alive(
					&self,
					dest: types::transfer_keep_alive::Dest,
					value: types::transfer_keep_alive::Value,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferKeepAlive>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Balances",
						"transfer_keep_alive",
						types::TransferKeepAlive { dest, value },
						[
							196u8, 51u8, 121u8, 239u8, 68u8, 97u8, 174u8, 26u8, 21u8, 9u8, 111u8,
							224u8, 189u8, 35u8, 106u8, 30u8, 83u8, 184u8, 234u8, 174u8, 27u8,
							197u8, 40u8, 126u8, 197u8, 92u8, 201u8, 253u8, 144u8, 175u8, 8u8,
							215u8,
						],
					)
				}
				#[doc = "Transfer the entire transferable balance from the caller account."]
				#[doc = ""]
				#[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
				#[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
				#[doc = "transferred by this function. To ensure that this function results in a killed account,"]
				#[doc = "you might need to prepare the account by removing any reference counters, storage"]
				#[doc = "deposits, etc..."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be Signed."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
				#[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
				#[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
				#[doc = "  keep the sender account alive (true)."]
				pub fn transfer_all(
					&self,
					dest: types::transfer_all::Dest,
					keep_alive: types::transfer_all::KeepAlive,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferAll> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Balances",
						"transfer_all",
						types::TransferAll { dest, keep_alive },
						[
							13u8, 46u8, 127u8, 231u8, 179u8, 61u8, 45u8, 188u8, 195u8, 251u8,
							146u8, 25u8, 138u8, 19u8, 52u8, 112u8, 148u8, 241u8, 134u8, 145u8,
							97u8, 9u8, 199u8, 172u8, 229u8, 239u8, 67u8, 185u8, 128u8, 36u8, 134u8,
							122u8,
						],
					)
				}
				#[doc = "Unreserve some balance from a user by force."]
				#[doc = ""]
				#[doc = "Can only be called by ROOT."]
				pub fn force_unreserve(
					&self,
					who: types::force_unreserve::Who,
					amount: types::force_unreserve::Amount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceUnreserve>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Balances",
						"force_unreserve",
						types::ForceUnreserve { who, amount },
						[
							176u8, 105u8, 20u8, 111u8, 49u8, 253u8, 22u8, 225u8, 0u8, 81u8, 221u8,
							39u8, 62u8, 22u8, 95u8, 12u8, 21u8, 251u8, 179u8, 31u8, 104u8, 23u8,
							34u8, 216u8, 119u8, 205u8, 133u8, 196u8, 182u8, 113u8, 36u8, 93u8,
						],
					)
				}
				#[doc = "Upgrade a specified account."]
				#[doc = ""]
				#[doc = "- `origin`: Must be `Signed`."]
				#[doc = "- `who`: The account to be upgraded."]
				#[doc = ""]
				#[doc = "This will waive the transaction fee if at least all but 10% of the accounts needed to"]
				#[doc = "be upgraded. (We let some not have to be upgraded just in order to allow for the"]
				#[doc = "possibililty of churn)."]
				pub fn upgrade_accounts(
					&self,
					who: types::upgrade_accounts::Who,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpgradeAccounts>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Balances",
						"upgrade_accounts",
						types::UpgradeAccounts { who },
						[
							66u8, 200u8, 179u8, 104u8, 65u8, 2u8, 101u8, 56u8, 130u8, 161u8, 224u8,
							233u8, 255u8, 124u8, 70u8, 122u8, 8u8, 49u8, 103u8, 178u8, 68u8, 47u8,
							214u8, 166u8, 217u8, 116u8, 178u8, 50u8, 212u8, 164u8, 98u8, 226u8,
						],
					)
				}
				#[doc = "Alias for `transfer_allow_death`, provided only for name-wise compatibility."]
				#[doc = ""]
				#[doc = "WARNING: DEPRECATED! Will be released in approximately 3 months."]
				pub fn transfer(
					&self,
					dest: types::transfer::Dest,
					value: types::transfer::Value,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Transfer> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Balances",
						"transfer",
						types::Transfer { dest, value },
						[
							228u8, 253u8, 44u8, 208u8, 33u8, 44u8, 33u8, 42u8, 114u8, 57u8, 107u8,
							6u8, 127u8, 116u8, 15u8, 205u8, 122u8, 172u8, 64u8, 108u8, 169u8,
							241u8, 190u8, 221u8, 248u8, 171u8, 236u8, 129u8, 120u8, 147u8, 49u8,
							95u8,
						],
					)
				}
				#[doc = "Set the regular balance of a given account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call is `root`."]
				pub fn force_set_balance(
					&self,
					who: types::force_set_balance::Who,
					new_free: types::force_set_balance::NewFree,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceSetBalance>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Balances",
						"force_set_balance",
						types::ForceSetBalance { who, new_free },
						[
							101u8, 181u8, 86u8, 32u8, 61u8, 75u8, 34u8, 164u8, 142u8, 250u8, 7u8,
							218u8, 125u8, 57u8, 98u8, 222u8, 147u8, 26u8, 115u8, 185u8, 190u8,
							172u8, 12u8, 212u8, 132u8, 80u8, 253u8, 69u8, 26u8, 116u8, 197u8,
							203u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_balances::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An account was created with some free balance."]
			pub struct Endowed {
				pub account: endowed::Account,
				pub free_balance: endowed::FreeBalance,
			}
			pub mod endowed {
				use super::runtime_types;
				pub type Account = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type FreeBalance = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Endowed {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Endowed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
			#[doc = "resulting in an outright loss."]
			pub struct DustLost {
				pub account: dust_lost::Account,
				pub amount: dust_lost::Amount,
			}
			pub mod dust_lost {
				use super::runtime_types;
				pub type Account = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for DustLost {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "DustLost";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Transfer succeeded."]
			pub struct Transfer {
				pub from: transfer::From,
				pub to: transfer::To,
				pub amount: transfer::Amount,
			}
			pub mod transfer {
				use super::runtime_types;
				pub type From = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type To = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Transfer {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Transfer";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A balance was set by root."]
			pub struct BalanceSet {
				pub who: balance_set::Who,
				pub free: balance_set::Free,
			}
			pub mod balance_set {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Free = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for BalanceSet {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "BalanceSet";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was reserved (moved from free to reserved)."]
			pub struct Reserved {
				pub who: reserved::Who,
				pub amount: reserved::Amount,
			}
			pub mod reserved {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Reserved {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Reserved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was unreserved (moved from reserved to free)."]
			pub struct Unreserved {
				pub who: unreserved::Who,
				pub amount: unreserved::Amount,
			}
			pub mod unreserved {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Unreserved {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Unreserved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was moved from the reserve of the first account to the second account."]
			#[doc = "Final argument indicates the destination balance type."]
			pub struct ReserveRepatriated {
				pub from: reserve_repatriated::From,
				pub to: reserve_repatriated::To,
				pub amount: reserve_repatriated::Amount,
				pub destination_status: reserve_repatriated::DestinationStatus,
			}
			pub mod reserve_repatriated {
				use super::runtime_types;
				pub type From = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type To = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
				pub type DestinationStatus =
					runtime_types::frame_support::traits::tokens::misc::BalanceStatus;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ReserveRepatriated {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "ReserveRepatriated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some amount was deposited (e.g. for transaction fees)."]
			pub struct Deposit {
				pub who: deposit::Who,
				pub amount: deposit::Amount,
			}
			pub mod deposit {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Deposit {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Deposit";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
			pub struct Withdraw {
				pub who: withdraw::Who,
				pub amount: withdraw::Amount,
			}
			pub mod withdraw {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Withdraw {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Withdraw";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
			pub struct Slashed {
				pub who: slashed::Who,
				pub amount: slashed::Amount,
			}
			pub mod slashed {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Slashed {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Slashed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some amount was minted into an account."]
			pub struct Minted {
				pub who: minted::Who,
				pub amount: minted::Amount,
			}
			pub mod minted {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Minted {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Minted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some amount was burned from an account."]
			pub struct Burned {
				pub who: burned::Who,
				pub amount: burned::Amount,
			}
			pub mod burned {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Burned {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Burned";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some amount was suspended from an account (it can be restored later)."]
			pub struct Suspended {
				pub who: suspended::Who,
				pub amount: suspended::Amount,
			}
			pub mod suspended {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Suspended {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Suspended";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some amount was restored into an account."]
			pub struct Restored {
				pub who: restored::Who,
				pub amount: restored::Amount,
			}
			pub mod restored {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Restored {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Restored";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An account was upgraded."]
			pub struct Upgraded {
				pub who: upgraded::Who,
			}
			pub mod upgraded {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Upgraded {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Upgraded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Total issuance was increased by `amount`, creating a credit to be balanced."]
			pub struct Issued {
				pub amount: issued::Amount,
			}
			pub mod issued {
				use super::runtime_types;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Issued {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Issued";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Total issuance was decreased by `amount`, creating a debt to be balanced."]
			pub struct Rescinded {
				pub amount: rescinded::Amount,
			}
			pub mod rescinded {
				use super::runtime_types;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Rescinded {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Rescinded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was locked."]
			pub struct Locked {
				pub who: locked::Who,
				pub amount: locked::Amount,
			}
			pub mod locked {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Locked {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Locked";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was unlocked."]
			pub struct Unlocked {
				pub who: unlocked::Who,
				pub amount: unlocked::Amount,
			}
			pub mod unlocked {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Unlocked {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Unlocked";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was frozen."]
			pub struct Frozen {
				pub who: frozen::Who,
				pub amount: frozen::Amount,
			}
			pub mod frozen {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Frozen {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Frozen";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was thawed."]
			pub struct Thawed {
				pub who: thawed::Who,
				pub amount: thawed::Amount,
			}
			pub mod thawed {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Thawed {
				const PALLET: &'static str = "Balances";
				const EVENT: &'static str = "Thawed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod total_issuance {
					use super::runtime_types;
					pub type TotalIssuance = ::core::primitive::u128;
				}
				pub mod inactive_issuance {
					use super::runtime_types;
					pub type InactiveIssuance = ::core::primitive::u128;
				}
				pub mod account {
					use super::runtime_types;
					pub type Account =
						runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod locks {
					use super::runtime_types;
					pub type Locks =
						runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
							runtime_types::pallet_balances::types::BalanceLock<
								::core::primitive::u128,
							>,
						>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod reserves {
					use super::runtime_types;
					pub type Reserves = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_balances::types::ReserveData<
							[::core::primitive::u8; 8usize],
							::core::primitive::u128,
						>,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod holds {
					use super::runtime_types;
					pub type Holds = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_balances::types::IdAmount<
							(),
							::core::primitive::u128,
						>,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod freezes {
					use super::runtime_types;
					pub type Freezes = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_balances::types::IdAmount<
							[::core::primitive::u8; 8usize],
							::core::primitive::u128,
						>,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The total units issued in the system."]
				pub fn total_issuance(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::total_issuance::TotalIssuance,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Balances",
						"TotalIssuance",
						(),
						[
							116u8, 70u8, 119u8, 194u8, 69u8, 37u8, 116u8, 206u8, 171u8, 70u8,
							171u8, 210u8, 226u8, 111u8, 184u8, 204u8, 206u8, 11u8, 68u8, 72u8,
							255u8, 19u8, 194u8, 11u8, 27u8, 194u8, 81u8, 204u8, 59u8, 224u8, 202u8,
							185u8,
						],
					)
				}
				#[doc = " The total units of outstanding deactivated balance in the system."]
				pub fn inactive_issuance(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::inactive_issuance::InactiveIssuance,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Balances",
						"InactiveIssuance",
						(),
						[
							212u8, 185u8, 19u8, 50u8, 250u8, 72u8, 173u8, 50u8, 4u8, 104u8, 161u8,
							249u8, 77u8, 247u8, 204u8, 248u8, 11u8, 18u8, 57u8, 4u8, 82u8, 110u8,
							30u8, 216u8, 16u8, 37u8, 87u8, 67u8, 189u8, 235u8, 214u8, 155u8,
						],
					)
				}
				#[doc = " The Balances pallet example of storing the balance of an account."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " You can also store the balance of an account in the `System` pallet."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "   type AccountStore = System"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
				#[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
				#[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
				#[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
				pub fn account_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::account::Account,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Balances",
						"Account",
						(),
						[
							213u8, 38u8, 200u8, 69u8, 218u8, 0u8, 112u8, 181u8, 160u8, 23u8, 96u8,
							90u8, 3u8, 88u8, 126u8, 22u8, 103u8, 74u8, 64u8, 69u8, 29u8, 247u8,
							18u8, 17u8, 234u8, 143u8, 189u8, 22u8, 247u8, 194u8, 154u8, 249u8,
						],
					)
				}
				#[doc = " The Balances pallet example of storing the balance of an account."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " You can also store the balance of an account in the `System` pallet."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "   type AccountStore = System"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
				#[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
				#[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
				#[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
				pub fn account(
					&self,
					_0: impl ::core::borrow::Borrow<types::account::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::account::Param0,
					>,
					types::account::Account,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Balances",
						"Account",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							213u8, 38u8, 200u8, 69u8, 218u8, 0u8, 112u8, 181u8, 160u8, 23u8, 96u8,
							90u8, 3u8, 88u8, 126u8, 22u8, 103u8, 74u8, 64u8, 69u8, 29u8, 247u8,
							18u8, 17u8, 234u8, 143u8, 189u8, 22u8, 247u8, 194u8, 154u8, 249u8,
						],
					)
				}
				#[doc = " Any liquidity locks on some account balances."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::locks::Locks,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Balances",
						"Locks",
						(),
						[
							10u8, 223u8, 55u8, 0u8, 249u8, 69u8, 168u8, 41u8, 75u8, 35u8, 120u8,
							167u8, 18u8, 132u8, 9u8, 20u8, 91u8, 51u8, 27u8, 69u8, 136u8, 187u8,
							13u8, 220u8, 163u8, 122u8, 26u8, 141u8, 174u8, 249u8, 85u8, 37u8,
						],
					)
				}
				#[doc = " Any liquidity locks on some account balances."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks(
					&self,
					_0: impl ::core::borrow::Borrow<types::locks::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::locks::Param0,
					>,
					types::locks::Locks,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Balances",
						"Locks",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							10u8, 223u8, 55u8, 0u8, 249u8, 69u8, 168u8, 41u8, 75u8, 35u8, 120u8,
							167u8, 18u8, 132u8, 9u8, 20u8, 91u8, 51u8, 27u8, 69u8, 136u8, 187u8,
							13u8, 220u8, 163u8, 122u8, 26u8, 141u8, 174u8, 249u8, 85u8, 37u8,
						],
					)
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::reserves::Reserves,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Balances",
						"Reserves",
						(),
						[
							112u8, 10u8, 241u8, 77u8, 64u8, 187u8, 106u8, 159u8, 13u8, 153u8,
							140u8, 178u8, 182u8, 50u8, 1u8, 55u8, 149u8, 92u8, 196u8, 229u8, 170u8,
							106u8, 193u8, 88u8, 255u8, 244u8, 2u8, 193u8, 62u8, 235u8, 204u8, 91u8,
						],
					)
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves(
					&self,
					_0: impl ::core::borrow::Borrow<types::reserves::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::reserves::Param0,
					>,
					types::reserves::Reserves,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Balances",
						"Reserves",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							112u8, 10u8, 241u8, 77u8, 64u8, 187u8, 106u8, 159u8, 13u8, 153u8,
							140u8, 178u8, 182u8, 50u8, 1u8, 55u8, 149u8, 92u8, 196u8, 229u8, 170u8,
							106u8, 193u8, 88u8, 255u8, 244u8, 2u8, 193u8, 62u8, 235u8, 204u8, 91u8,
						],
					)
				}
				#[doc = " Holds on account balances."]
				pub fn holds_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::holds::Holds,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Balances",
						"Holds",
						(),
						[
							53u8, 126u8, 215u8, 237u8, 42u8, 223u8, 188u8, 150u8, 230u8, 107u8,
							95u8, 24u8, 26u8, 235u8, 158u8, 149u8, 193u8, 191u8, 10u8, 194u8,
							231u8, 59u8, 35u8, 167u8, 186u8, 89u8, 43u8, 126u8, 215u8, 117u8, 1u8,
							202u8,
						],
					)
				}
				#[doc = " Holds on account balances."]
				pub fn holds(
					&self,
					_0: impl ::core::borrow::Borrow<types::holds::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::holds::Param0,
					>,
					types::holds::Holds,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Balances",
						"Holds",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							53u8, 126u8, 215u8, 237u8, 42u8, 223u8, 188u8, 150u8, 230u8, 107u8,
							95u8, 24u8, 26u8, 235u8, 158u8, 149u8, 193u8, 191u8, 10u8, 194u8,
							231u8, 59u8, 35u8, 167u8, 186u8, 89u8, 43u8, 126u8, 215u8, 117u8, 1u8,
							202u8,
						],
					)
				}
				#[doc = " Freeze locks on account balances."]
				pub fn freezes_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::freezes::Freezes,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Balances",
						"Freezes",
						(),
						[
							248u8, 43u8, 66u8, 34u8, 209u8, 33u8, 179u8, 61u8, 54u8, 4u8, 118u8,
							114u8, 107u8, 178u8, 16u8, 130u8, 172u8, 144u8, 106u8, 151u8, 233u8,
							14u8, 157u8, 210u8, 94u8, 67u8, 252u8, 189u8, 216u8, 66u8, 170u8,
							119u8,
						],
					)
				}
				#[doc = " Freeze locks on account balances."]
				pub fn freezes(
					&self,
					_0: impl ::core::borrow::Borrow<types::freezes::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::freezes::Param0,
					>,
					types::freezes::Freezes,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Balances",
						"Freezes",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							248u8, 43u8, 66u8, 34u8, 209u8, 33u8, 179u8, 61u8, 54u8, 4u8, 118u8,
							114u8, 107u8, 178u8, 16u8, 130u8, 172u8, 144u8, 106u8, 151u8, 233u8,
							14u8, 157u8, 210u8, 94u8, 67u8, 252u8, 189u8, 216u8, 66u8, 170u8,
							119u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!"]
				#[doc = ""]
				#[doc = " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for"]
				#[doc = " this pallet. However, you do so at your own risk: this will open up a major DoS vector."]
				#[doc = " In case you have multiple sources of provider references, you may also get unexpected"]
				#[doc = " behaviour if you set this to zero."]
				#[doc = ""]
				#[doc = " Bottom line: Do yourself a favour and make it at least one!"]
				pub fn existential_deposit(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Balances",
						"ExistentialDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum number of locks that should exist on an account."]
				#[doc = " Not strictly enforced, but used for weight estimation."]
				pub fn max_locks(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Balances",
						"MaxLocks",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of named reserves that can exist on an account."]
				pub fn max_reserves(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Balances",
						"MaxReserves",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of holds that can exist on an account at any time."]
				pub fn max_holds(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Balances",
						"MaxHolds",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of individual freeze locks that can exist on an account at any time."]
				pub fn max_freezes(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Balances",
						"MaxFreezes",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod multisig {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_multisig::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_multisig::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
				#[doc = "multi-signature, but do not participate in the approval process."]
				#[doc = "- `call`: The call to be executed."]
				#[doc = ""]
				#[doc = "Result is equivalent to the dispatched result."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
				pub struct AsMultiThreshold1 {
					pub other_signatories: as_multi_threshold1::OtherSignatories,
					pub call:
						::subxt::ext::subxt_core::alloc::boxed::Box<as_multi_threshold1::Call>,
				}
				pub mod as_multi_threshold1 {
					use super::runtime_types;
					pub type OtherSignatories = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AsMultiThreshold1 {
					const PALLET: &'static str = "Multisig";
					const CALL: &'static str = "as_multi_threshold_1";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
				#[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
				#[doc = ""]
				#[doc = "If there are enough, then dispatch the call."]
				#[doc = ""]
				#[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
				#[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
				#[doc = "is cancelled."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
				#[doc = "dispatch. May not be empty."]
				#[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
				#[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
				#[doc = "transaction index) of the first approval transaction."]
				#[doc = "- `call`: The call to be executed."]
				#[doc = ""]
				#[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
				#[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
				#[doc = ""]
				#[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
				#[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
				#[doc = "may be found in the deposited `MultisigExecuted` event."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(S + Z + Call)`."]
				#[doc = "- Up to one balance-reserve or unreserve operation."]
				#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
				#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
				#[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
				#[doc = "- One encode & hash, both of complexity `O(S)`."]
				#[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
				#[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
				#[doc = "- One event."]
				#[doc = "- The weight of the `call`."]
				#[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
				#[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
				pub struct AsMulti {
					pub threshold: as_multi::Threshold,
					pub other_signatories: as_multi::OtherSignatories,
					pub maybe_timepoint: as_multi::MaybeTimepoint,
					pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<as_multi::Call>,
					pub max_weight: as_multi::MaxWeight,
				}
				pub mod as_multi {
					use super::runtime_types;
					pub type Threshold = ::core::primitive::u16;
					pub type OtherSignatories = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
					pub type MaybeTimepoint = ::core::option::Option<
						runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
					>;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
					pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AsMulti {
					const PALLET: &'static str = "Multisig";
					const CALL: &'static str = "as_multi";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
				#[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
				#[doc = ""]
				#[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
				#[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
				#[doc = "is cancelled."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
				#[doc = "dispatch. May not be empty."]
				#[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
				#[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
				#[doc = "transaction index) of the first approval transaction."]
				#[doc = "- `call_hash`: The hash of the call to be executed."]
				#[doc = ""]
				#[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(S)`."]
				#[doc = "- Up to one balance-reserve or unreserve operation."]
				#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
				#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
				#[doc = "- One encode & hash, both of complexity `O(S)`."]
				#[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
				#[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
				#[doc = "- One event."]
				#[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
				#[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
				pub struct ApproveAsMulti {
					pub threshold: approve_as_multi::Threshold,
					pub other_signatories: approve_as_multi::OtherSignatories,
					pub maybe_timepoint: approve_as_multi::MaybeTimepoint,
					pub call_hash: approve_as_multi::CallHash,
					pub max_weight: approve_as_multi::MaxWeight,
				}
				pub mod approve_as_multi {
					use super::runtime_types;
					pub type Threshold = ::core::primitive::u16;
					pub type OtherSignatories = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
					pub type MaybeTimepoint = ::core::option::Option<
						runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
					>;
					pub type CallHash = [::core::primitive::u8; 32usize];
					pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ApproveAsMulti {
					const PALLET: &'static str = "Multisig";
					const CALL: &'static str = "approve_as_multi";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
				#[doc = "for this operation will be unreserved on success."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
				#[doc = "dispatch. May not be empty."]
				#[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
				#[doc = "transaction for this dispatch."]
				#[doc = "- `call_hash`: The hash of the call to be executed."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(S)`."]
				#[doc = "- Up to one balance-reserve or unreserve operation."]
				#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
				#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
				#[doc = "- One encode & hash, both of complexity `O(S)`."]
				#[doc = "- One event."]
				#[doc = "- I/O: 1 read `O(S)`, one remove."]
				#[doc = "- Storage: removes one item."]
				pub struct CancelAsMulti {
					pub threshold: cancel_as_multi::Threshold,
					pub other_signatories: cancel_as_multi::OtherSignatories,
					pub timepoint: cancel_as_multi::Timepoint,
					pub call_hash: cancel_as_multi::CallHash,
				}
				pub mod cancel_as_multi {
					use super::runtime_types;
					pub type Threshold = ::core::primitive::u16;
					pub type OtherSignatories = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
					pub type Timepoint =
						runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
					pub type CallHash = [::core::primitive::u8; 32usize];
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelAsMulti {
					const PALLET: &'static str = "Multisig";
					const CALL: &'static str = "cancel_as_multi";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
				#[doc = "multi-signature, but do not participate in the approval process."]
				#[doc = "- `call`: The call to be executed."]
				#[doc = ""]
				#[doc = "Result is equivalent to the dispatched result."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
				pub fn as_multi_threshold_1(
					&self,
					other_signatories: types::as_multi_threshold1::OtherSignatories,
					call: types::as_multi_threshold1::Call,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AsMultiThreshold1>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Multisig",
						"as_multi_threshold_1",
						types::AsMultiThreshold1 {
							other_signatories,
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
						},
						[
							242u8, 49u8, 137u8, 236u8, 12u8, 181u8, 37u8, 178u8, 191u8, 244u8,
							97u8, 247u8, 226u8, 208u8, 112u8, 64u8, 212u8, 112u8, 210u8, 175u8,
							29u8, 63u8, 202u8, 65u8, 238u8, 145u8, 224u8, 159u8, 227u8, 129u8,
							42u8, 214u8,
						],
					)
				}
				#[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
				#[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
				#[doc = ""]
				#[doc = "If there are enough, then dispatch the call."]
				#[doc = ""]
				#[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
				#[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
				#[doc = "is cancelled."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
				#[doc = "dispatch. May not be empty."]
				#[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
				#[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
				#[doc = "transaction index) of the first approval transaction."]
				#[doc = "- `call`: The call to be executed."]
				#[doc = ""]
				#[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
				#[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
				#[doc = ""]
				#[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
				#[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
				#[doc = "may be found in the deposited `MultisigExecuted` event."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(S + Z + Call)`."]
				#[doc = "- Up to one balance-reserve or unreserve operation."]
				#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
				#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
				#[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
				#[doc = "- One encode & hash, both of complexity `O(S)`."]
				#[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
				#[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
				#[doc = "- One event."]
				#[doc = "- The weight of the `call`."]
				#[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
				#[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
				pub fn as_multi(
					&self,
					threshold: types::as_multi::Threshold,
					other_signatories: types::as_multi::OtherSignatories,
					maybe_timepoint: types::as_multi::MaybeTimepoint,
					call: types::as_multi::Call,
					max_weight: types::as_multi::MaxWeight,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AsMulti> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Multisig",
						"as_multi",
						types::AsMulti {
							threshold,
							other_signatories,
							maybe_timepoint,
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
							max_weight,
						},
						[
							137u8, 98u8, 47u8, 200u8, 84u8, 123u8, 102u8, 143u8, 154u8, 254u8,
							222u8, 149u8, 58u8, 133u8, 117u8, 10u8, 212u8, 55u8, 21u8, 74u8, 81u8,
							144u8, 17u8, 244u8, 81u8, 143u8, 238u8, 5u8, 40u8, 72u8, 29u8, 115u8,
						],
					)
				}
				#[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
				#[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
				#[doc = ""]
				#[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
				#[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
				#[doc = "is cancelled."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
				#[doc = "dispatch. May not be empty."]
				#[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
				#[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
				#[doc = "transaction index) of the first approval transaction."]
				#[doc = "- `call_hash`: The hash of the call to be executed."]
				#[doc = ""]
				#[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(S)`."]
				#[doc = "- Up to one balance-reserve or unreserve operation."]
				#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
				#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
				#[doc = "- One encode & hash, both of complexity `O(S)`."]
				#[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
				#[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
				#[doc = "- One event."]
				#[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
				#[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
				pub fn approve_as_multi(
					&self,
					threshold: types::approve_as_multi::Threshold,
					other_signatories: types::approve_as_multi::OtherSignatories,
					maybe_timepoint: types::approve_as_multi::MaybeTimepoint,
					call_hash: types::approve_as_multi::CallHash,
					max_weight: types::approve_as_multi::MaxWeight,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ApproveAsMulti>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Multisig",
						"approve_as_multi",
						types::ApproveAsMulti {
							threshold,
							other_signatories,
							maybe_timepoint,
							call_hash,
							max_weight,
						},
						[
							248u8, 46u8, 131u8, 35u8, 204u8, 12u8, 218u8, 150u8, 88u8, 131u8, 89u8,
							13u8, 95u8, 122u8, 87u8, 107u8, 136u8, 154u8, 92u8, 199u8, 108u8, 92u8,
							207u8, 171u8, 113u8, 8u8, 47u8, 248u8, 65u8, 26u8, 203u8, 135u8,
						],
					)
				}
				#[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
				#[doc = "for this operation will be unreserved on success."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
				#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
				#[doc = "dispatch. May not be empty."]
				#[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
				#[doc = "transaction for this dispatch."]
				#[doc = "- `call_hash`: The hash of the call to be executed."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(S)`."]
				#[doc = "- Up to one balance-reserve or unreserve operation."]
				#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
				#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
				#[doc = "- One encode & hash, both of complexity `O(S)`."]
				#[doc = "- One event."]
				#[doc = "- I/O: 1 read `O(S)`, one remove."]
				#[doc = "- Storage: removes one item."]
				pub fn cancel_as_multi(
					&self,
					threshold: types::cancel_as_multi::Threshold,
					other_signatories: types::cancel_as_multi::OtherSignatories,
					timepoint: types::cancel_as_multi::Timepoint,
					call_hash: types::cancel_as_multi::CallHash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelAsMulti>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Multisig",
						"cancel_as_multi",
						types::CancelAsMulti { threshold, other_signatories, timepoint, call_hash },
						[
							212u8, 179u8, 123u8, 40u8, 209u8, 228u8, 181u8, 0u8, 109u8, 28u8, 27u8,
							48u8, 15u8, 47u8, 203u8, 54u8, 106u8, 114u8, 28u8, 118u8, 101u8, 201u8,
							95u8, 187u8, 46u8, 182u8, 4u8, 30u8, 227u8, 105u8, 14u8, 81u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_multisig::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A new multisig operation has begun."]
			pub struct NewMultisig {
				pub approving: new_multisig::Approving,
				pub multisig: new_multisig::Multisig,
				pub call_hash: new_multisig::CallHash,
			}
			pub mod new_multisig {
				use super::runtime_types;
				pub type Approving = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Multisig = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type CallHash = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NewMultisig {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "NewMultisig";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A multisig operation has been approved by someone."]
			pub struct MultisigApproval {
				pub approving: multisig_approval::Approving,
				pub timepoint: multisig_approval::Timepoint,
				pub multisig: multisig_approval::Multisig,
				pub call_hash: multisig_approval::CallHash,
			}
			pub mod multisig_approval {
				use super::runtime_types;
				pub type Approving = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Timepoint =
					runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
				pub type Multisig = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type CallHash = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for MultisigApproval {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigApproval";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A multisig operation has been executed."]
			pub struct MultisigExecuted {
				pub approving: multisig_executed::Approving,
				pub timepoint: multisig_executed::Timepoint,
				pub multisig: multisig_executed::Multisig,
				pub call_hash: multisig_executed::CallHash,
				pub result: multisig_executed::Result,
			}
			pub mod multisig_executed {
				use super::runtime_types;
				pub type Approving = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Timepoint =
					runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
				pub type Multisig = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type CallHash = [::core::primitive::u8; 32usize];
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for MultisigExecuted {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigExecuted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A multisig operation has been cancelled."]
			pub struct MultisigCancelled {
				pub cancelling: multisig_cancelled::Cancelling,
				pub timepoint: multisig_cancelled::Timepoint,
				pub multisig: multisig_cancelled::Multisig,
				pub call_hash: multisig_cancelled::CallHash,
			}
			pub mod multisig_cancelled {
				use super::runtime_types;
				pub type Cancelling = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Timepoint =
					runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
				pub type Multisig = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type CallHash = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for MultisigCancelled {
				const PALLET: &'static str = "Multisig";
				const EVENT: &'static str = "MultisigCancelled";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod multisigs {
					use super::runtime_types;
					pub type Multisigs = runtime_types::pallet_multisig::Multisig<
						::core::primitive::u32,
						::core::primitive::u128,
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
					pub type Param1 = [::core::primitive::u8; 32usize];
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The set of open multisig operations."]
				pub fn multisigs_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::multisigs::Multisigs,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Multisig",
						"Multisigs",
						(),
						[
							154u8, 109u8, 45u8, 18u8, 155u8, 151u8, 81u8, 28u8, 86u8, 127u8, 189u8,
							151u8, 49u8, 61u8, 12u8, 149u8, 84u8, 61u8, 110u8, 197u8, 200u8, 140u8,
							37u8, 100u8, 14u8, 162u8, 158u8, 161u8, 48u8, 117u8, 102u8, 61u8,
						],
					)
				}
				#[doc = " The set of open multisig operations."]
				pub fn multisigs_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::multisigs::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::multisigs::Param0,
					>,
					types::multisigs::Multisigs,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Multisig",
						"Multisigs",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							154u8, 109u8, 45u8, 18u8, 155u8, 151u8, 81u8, 28u8, 86u8, 127u8, 189u8,
							151u8, 49u8, 61u8, 12u8, 149u8, 84u8, 61u8, 110u8, 197u8, 200u8, 140u8,
							37u8, 100u8, 14u8, 162u8, 158u8, 161u8, 48u8, 117u8, 102u8, 61u8,
						],
					)
				}
				#[doc = " The set of open multisig operations."]
				pub fn multisigs(
					&self,
					_0: impl ::core::borrow::Borrow<types::multisigs::Param0>,
					_1: impl ::core::borrow::Borrow<types::multisigs::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::multisigs::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::multisigs::Param1,
						>,
					),
					types::multisigs::Multisigs,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Multisig",
						"Multisigs",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							154u8, 109u8, 45u8, 18u8, 155u8, 151u8, 81u8, 28u8, 86u8, 127u8, 189u8,
							151u8, 49u8, 61u8, 12u8, 149u8, 84u8, 61u8, 110u8, 197u8, 200u8, 140u8,
							37u8, 100u8, 14u8, 162u8, 158u8, 161u8, 48u8, 117u8, 102u8, 61u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The base amount of currency needed to reserve for creating a multisig execution or to"]
				#[doc = " store a dispatch call for later."]
				#[doc = ""]
				#[doc = " This is held for an additional storage item whose value size is"]
				#[doc = " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"]
				#[doc = " `32 + sizeof(AccountId)` bytes."]
				pub fn deposit_base(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Multisig",
						"DepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount of currency needed per unit threshold when creating a multisig execution."]
				#[doc = ""]
				#[doc = " This is held for adding 32 bytes more into a pre-existing storage value."]
				pub fn deposit_factor(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Multisig",
						"DepositFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum amount of signatories allowed in the multisig."]
				pub fn max_signatories(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Multisig",
						"MaxSignatories",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod parachain_system {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::cumulus_pallet_parachain_system::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::cumulus_pallet_parachain_system::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the current validation data."]
				#[doc = ""]
				#[doc = "This should be invoked exactly once per block. It will panic at the finalization"]
				#[doc = "phase if the call was not invoked."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Inherent`"]
				#[doc = ""]
				#[doc = "As a side effect, this function upgrades the current validation function"]
				#[doc = "if the appropriate time has come."]
				pub struct SetValidationData {
					pub data: set_validation_data::Data,
				}
				pub mod set_validation_data {
					use super::runtime_types;
					pub type Data =
						runtime_types::cumulus_primitives_parachain_inherent::ParachainInherentData;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetValidationData {
					const PALLET: &'static str = "ParachainSystem";
					const CALL: &'static str = "set_validation_data";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct SudoSendUpwardMessage {
					pub message: sudo_send_upward_message::Message,
				}
				pub mod sudo_send_upward_message {
					use super::runtime_types;
					pub type Message =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SudoSendUpwardMessage {
					const PALLET: &'static str = "ParachainSystem";
					const CALL: &'static str = "sudo_send_upward_message";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
				#[doc = "later."]
				#[doc = ""]
				#[doc = "The `check_version` parameter sets a boolean flag for whether or not the runtime's spec"]
				#[doc = "version and name should be verified on upgrade. Since the authorization only has a hash,"]
				#[doc = "it cannot actually perform the verification."]
				#[doc = ""]
				#[doc = "This call requires Root origin."]
				pub struct AuthorizeUpgrade {
					pub code_hash: authorize_upgrade::CodeHash,
					pub check_version: authorize_upgrade::CheckVersion,
				}
				pub mod authorize_upgrade {
					use super::runtime_types;
					pub type CodeHash = ::subxt::ext::subxt_core::utils::H256;
					pub type CheckVersion = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AuthorizeUpgrade {
					const PALLET: &'static str = "ParachainSystem";
					const CALL: &'static str = "authorize_upgrade";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized."]
				#[doc = ""]
				#[doc = "If the authorization required a version check, this call will ensure the spec name"]
				#[doc = "remains unchanged and that the spec version has increased."]
				#[doc = ""]
				#[doc = "Note that this function will not apply the new `code`, but only attempt to schedule the"]
				#[doc = "upgrade with the Relay Chain."]
				#[doc = ""]
				#[doc = "All origins are allowed."]
				pub struct EnactAuthorizedUpgrade {
					pub code: enact_authorized_upgrade::Code,
				}
				pub mod enact_authorized_upgrade {
					use super::runtime_types;
					pub type Code =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for EnactAuthorizedUpgrade {
					const PALLET: &'static str = "ParachainSystem";
					const CALL: &'static str = "enact_authorized_upgrade";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Set the current validation data."]
				#[doc = ""]
				#[doc = "This should be invoked exactly once per block. It will panic at the finalization"]
				#[doc = "phase if the call was not invoked."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Inherent`"]
				#[doc = ""]
				#[doc = "As a side effect, this function upgrades the current validation function"]
				#[doc = "if the appropriate time has come."]
				pub fn set_validation_data(
					&self,
					data: types::set_validation_data::Data,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetValidationData>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ParachainSystem",
						"set_validation_data",
						types::SetValidationData { data },
						[
							167u8, 126u8, 75u8, 137u8, 220u8, 60u8, 106u8, 214u8, 92u8, 170u8,
							136u8, 176u8, 98u8, 0u8, 234u8, 217u8, 146u8, 113u8, 149u8, 88u8,
							114u8, 141u8, 228u8, 105u8, 136u8, 71u8, 233u8, 18u8, 70u8, 36u8, 24u8,
							249u8,
						],
					)
				}
				pub fn sudo_send_upward_message(
					&self,
					message: types::sudo_send_upward_message::Message,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::SudoSendUpwardMessage,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ParachainSystem",
						"sudo_send_upward_message",
						types::SudoSendUpwardMessage { message },
						[
							1u8, 231u8, 11u8, 78u8, 127u8, 117u8, 248u8, 67u8, 230u8, 199u8, 126u8,
							47u8, 20u8, 62u8, 252u8, 138u8, 199u8, 48u8, 41u8, 21u8, 28u8, 157u8,
							218u8, 143u8, 4u8, 253u8, 62u8, 192u8, 94u8, 252u8, 92u8, 180u8,
						],
					)
				}
				#[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
				#[doc = "later."]
				#[doc = ""]
				#[doc = "The `check_version` parameter sets a boolean flag for whether or not the runtime's spec"]
				#[doc = "version and name should be verified on upgrade. Since the authorization only has a hash,"]
				#[doc = "it cannot actually perform the verification."]
				#[doc = ""]
				#[doc = "This call requires Root origin."]
				pub fn authorize_upgrade(
					&self,
					code_hash: types::authorize_upgrade::CodeHash,
					check_version: types::authorize_upgrade::CheckVersion,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AuthorizeUpgrade>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ParachainSystem",
						"authorize_upgrade",
						types::AuthorizeUpgrade { code_hash, check_version },
						[
							213u8, 114u8, 107u8, 169u8, 223u8, 147u8, 205u8, 204u8, 3u8, 81u8,
							228u8, 0u8, 82u8, 57u8, 43u8, 95u8, 12u8, 59u8, 241u8, 176u8, 143u8,
							131u8, 253u8, 166u8, 98u8, 187u8, 94u8, 235u8, 177u8, 110u8, 162u8,
							218u8,
						],
					)
				}
				#[doc = "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized."]
				#[doc = ""]
				#[doc = "If the authorization required a version check, this call will ensure the spec name"]
				#[doc = "remains unchanged and that the spec version has increased."]
				#[doc = ""]
				#[doc = "Note that this function will not apply the new `code`, but only attempt to schedule the"]
				#[doc = "upgrade with the Relay Chain."]
				#[doc = ""]
				#[doc = "All origins are allowed."]
				pub fn enact_authorized_upgrade(
					&self,
					code: types::enact_authorized_upgrade::Code,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::EnactAuthorizedUpgrade,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ParachainSystem",
						"enact_authorized_upgrade",
						types::EnactAuthorizedUpgrade { code },
						[
							232u8, 135u8, 114u8, 87u8, 196u8, 146u8, 244u8, 19u8, 106u8, 73u8,
							88u8, 193u8, 48u8, 14u8, 72u8, 133u8, 247u8, 147u8, 50u8, 95u8, 252u8,
							213u8, 192u8, 47u8, 244u8, 102u8, 195u8, 120u8, 179u8, 87u8, 94u8, 8u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::cumulus_pallet_parachain_system::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The validation function has been scheduled to apply."]
			pub struct ValidationFunctionStored;
			impl ::subxt::ext::subxt_core::events::StaticEvent for ValidationFunctionStored {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "ValidationFunctionStored";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The validation function was applied as of the contained relay chain block number."]
			pub struct ValidationFunctionApplied {
				pub relay_chain_block_num: validation_function_applied::RelayChainBlockNum,
			}
			pub mod validation_function_applied {
				use super::runtime_types;
				pub type RelayChainBlockNum = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ValidationFunctionApplied {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "ValidationFunctionApplied";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The relay-chain aborted the upgrade process."]
			pub struct ValidationFunctionDiscarded;
			impl ::subxt::ext::subxt_core::events::StaticEvent for ValidationFunctionDiscarded {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "ValidationFunctionDiscarded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An upgrade has been authorized."]
			pub struct UpgradeAuthorized {
				pub code_hash: upgrade_authorized::CodeHash,
			}
			pub mod upgrade_authorized {
				use super::runtime_types;
				pub type CodeHash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for UpgradeAuthorized {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "UpgradeAuthorized";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some downward messages have been received and will be processed."]
			pub struct DownwardMessagesReceived {
				pub count: downward_messages_received::Count,
			}
			pub mod downward_messages_received {
				use super::runtime_types;
				pub type Count = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for DownwardMessagesReceived {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "DownwardMessagesReceived";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Downward messages were processed using the given weight."]
			pub struct DownwardMessagesProcessed {
				pub weight_used: downward_messages_processed::WeightUsed,
				pub dmq_head: downward_messages_processed::DmqHead,
			}
			pub mod downward_messages_processed {
				use super::runtime_types;
				pub type WeightUsed = runtime_types::sp_weights::weight_v2::Weight;
				pub type DmqHead = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for DownwardMessagesProcessed {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "DownwardMessagesProcessed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An upward message was sent to the relay chain."]
			pub struct UpwardMessageSent {
				pub message_hash: upward_message_sent::MessageHash,
			}
			pub mod upward_message_sent {
				use super::runtime_types;
				pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for UpwardMessageSent {
				const PALLET: &'static str = "ParachainSystem";
				const EVENT: &'static str = "UpwardMessageSent";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod pending_validation_code {
					use super::runtime_types;
					pub type PendingValidationCode =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				}
				pub mod new_validation_code {
					use super::runtime_types;
					pub type NewValidationCode =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				}
				pub mod validation_data {
					use super::runtime_types;
					pub type ValidationData =
						runtime_types::polkadot_primitives::v4::PersistedValidationData<
							::subxt::ext::subxt_core::utils::H256,
							::core::primitive::u32,
						>;
				}
				pub mod did_set_validation_code {
					use super::runtime_types;
					pub type DidSetValidationCode = ::core::primitive::bool;
				}
				pub mod last_relay_chain_block_number {
					use super::runtime_types;
					pub type LastRelayChainBlockNumber = ::core::primitive::u32;
				}
				pub mod upgrade_restriction_signal {
					use super::runtime_types;
					pub type UpgradeRestrictionSignal = ::core::option::Option<
						runtime_types::polkadot_primitives::v4::UpgradeRestriction,
					>;
				}
				pub mod relay_state_proof {
					use super::runtime_types;
					pub type RelayStateProof = runtime_types::sp_trie::storage_proof::StorageProof;
				}
				pub mod relevant_messaging_state {
					use super::runtime_types;
					pub type RelevantMessagingState = runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: MessagingStateSnapshot ;
				}
				pub mod host_configuration {
					use super::runtime_types;
					pub type HostConfiguration =
						runtime_types::polkadot_primitives::v4::AbridgedHostConfiguration;
				}
				pub mod last_dmq_mqc_head {
					use super::runtime_types;
					pub type LastDmqMqcHead =
						runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain;
				}
				pub mod last_hrmp_mqc_heads {
					use super::runtime_types;
					pub type LastHrmpMqcHeads = ::subxt::ext::subxt_core::utils::KeyedVec<
						runtime_types::polkadot_parachain::primitives::Id,
						runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain,
					>;
				}
				pub mod processed_downward_messages {
					use super::runtime_types;
					pub type ProcessedDownwardMessages = ::core::primitive::u32;
				}
				pub mod hrmp_watermark {
					use super::runtime_types;
					pub type HrmpWatermark = ::core::primitive::u32;
				}
				pub mod hrmp_outbound_messages {
					use super::runtime_types;
					pub type HrmpOutboundMessages = ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
							runtime_types::polkadot_parachain::primitives::Id,
						>,
					>;
				}
				pub mod upward_messages {
					use super::runtime_types;
					pub type UpwardMessages = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					>;
				}
				pub mod pending_upward_messages {
					use super::runtime_types;
					pub type PendingUpwardMessages = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					>;
				}
				pub mod announced_hrmp_messages_per_candidate {
					use super::runtime_types;
					pub type AnnouncedHrmpMessagesPerCandidate = ::core::primitive::u32;
				}
				pub mod reserved_xcmp_weight_override {
					use super::runtime_types;
					pub type ReservedXcmpWeightOverride =
						runtime_types::sp_weights::weight_v2::Weight;
				}
				pub mod reserved_dmp_weight_override {
					use super::runtime_types;
					pub type ReservedDmpWeightOverride =
						runtime_types::sp_weights::weight_v2::Weight;
				}
				pub mod authorized_upgrade {
					use super::runtime_types;
					pub type AuthorizedUpgrade =
						runtime_types::cumulus_pallet_parachain_system::CodeUpgradeAuthorization;
				}
				pub mod custom_validation_head_data {
					use super::runtime_types;
					pub type CustomValidationHeadData =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " In case of a scheduled upgrade, this storage field contains the validation code to be applied."]
				#[doc = ""]
				#[doc = " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]"]
				#[doc = " which will result the next block process with the new validation code. This concludes the upgrade process."]
				#[doc = ""]
				#[doc = " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"]
				pub fn pending_validation_code(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::pending_validation_code::PendingValidationCode,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"PendingValidationCode",
						(),
						[
							78u8, 159u8, 219u8, 211u8, 177u8, 80u8, 102u8, 93u8, 83u8, 146u8, 90u8,
							233u8, 232u8, 11u8, 104u8, 172u8, 93u8, 68u8, 44u8, 228u8, 99u8, 197u8,
							254u8, 28u8, 181u8, 215u8, 247u8, 238u8, 49u8, 49u8, 195u8, 249u8,
						],
					)
				}
				#[doc = " Validation code that is set by the parachain and is to be communicated to collator and"]
				#[doc = " consequently the relay-chain."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block if no other pallet already set"]
				#[doc = " the value."]
				pub fn new_validation_code(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::new_validation_code::NewValidationCode,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"NewValidationCode",
						(),
						[
							185u8, 123u8, 152u8, 122u8, 230u8, 136u8, 79u8, 73u8, 206u8, 19u8,
							59u8, 57u8, 75u8, 250u8, 83u8, 185u8, 29u8, 76u8, 89u8, 137u8, 77u8,
							163u8, 25u8, 125u8, 182u8, 67u8, 2u8, 180u8, 48u8, 237u8, 49u8, 171u8,
						],
					)
				}
				#[doc = " The [`PersistedValidationData`] set for this block."]
				#[doc = " This value is expected to be set only once per block and it's never stored"]
				#[doc = " in the trie."]
				pub fn validation_data(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::validation_data::ValidationData,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"ValidationData",
						(),
						[
							193u8, 240u8, 25u8, 56u8, 103u8, 173u8, 56u8, 56u8, 229u8, 243u8, 91u8,
							25u8, 249u8, 95u8, 122u8, 93u8, 37u8, 181u8, 54u8, 244u8, 217u8, 200u8,
							62u8, 136u8, 80u8, 148u8, 16u8, 177u8, 124u8, 211u8, 95u8, 24u8,
						],
					)
				}
				#[doc = " Were the validation data set to notify the relay chain?"]
				pub fn did_set_validation_code(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::did_set_validation_code::DidSetValidationCode,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"DidSetValidationCode",
						(),
						[
							233u8, 228u8, 48u8, 111u8, 200u8, 35u8, 30u8, 139u8, 251u8, 77u8,
							196u8, 252u8, 35u8, 222u8, 129u8, 235u8, 7u8, 19u8, 156u8, 82u8, 126u8,
							173u8, 29u8, 62u8, 20u8, 67u8, 166u8, 116u8, 108u8, 182u8, 57u8, 246u8,
						],
					)
				}
				#[doc = " The relay chain block number associated with the last parachain block."]
				pub fn last_relay_chain_block_number(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::last_relay_chain_block_number::LastRelayChainBlockNumber,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"LastRelayChainBlockNumber",
						(),
						[
							17u8, 65u8, 131u8, 169u8, 195u8, 243u8, 195u8, 93u8, 220u8, 174u8,
							75u8, 216u8, 214u8, 227u8, 96u8, 40u8, 8u8, 153u8, 116u8, 160u8, 79u8,
							255u8, 35u8, 232u8, 242u8, 42u8, 100u8, 150u8, 208u8, 210u8, 142u8,
							186u8,
						],
					)
				}
				#[doc = " An option which indicates if the relay-chain restricts signalling a validation code upgrade."]
				#[doc = " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced"]
				#[doc = " candidate will be invalid."]
				#[doc = ""]
				#[doc = " This storage item is a mirror of the corresponding value for the current parachain from the"]
				#[doc = " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is"]
				#[doc = " set after the inherent."]
				pub fn upgrade_restriction_signal(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::upgrade_restriction_signal::UpgradeRestrictionSignal,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"UpgradeRestrictionSignal",
						(),
						[
							235u8, 240u8, 37u8, 44u8, 181u8, 52u8, 7u8, 216u8, 20u8, 139u8, 69u8,
							124u8, 21u8, 173u8, 237u8, 64u8, 105u8, 88u8, 49u8, 69u8, 123u8, 55u8,
							181u8, 167u8, 112u8, 183u8, 190u8, 231u8, 231u8, 127u8, 77u8, 148u8,
						],
					)
				}
				#[doc = " The state proof for the last relay parent block."]
				#[doc = ""]
				#[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
				#[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
				#[doc = ""]
				#[doc = " This data is also absent from the genesis."]
				pub fn relay_state_proof(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::relay_state_proof::RelayStateProof,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"RelayStateProof",
						(),
						[
							46u8, 115u8, 163u8, 190u8, 246u8, 47u8, 200u8, 159u8, 206u8, 204u8,
							94u8, 250u8, 127u8, 112u8, 109u8, 111u8, 210u8, 195u8, 244u8, 41u8,
							36u8, 187u8, 71u8, 150u8, 149u8, 253u8, 143u8, 33u8, 83u8, 189u8,
							182u8, 238u8,
						],
					)
				}
				#[doc = " The snapshot of some state related to messaging relevant to the current parachain as per"]
				#[doc = " the relay parent."]
				#[doc = ""]
				#[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
				#[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
				#[doc = ""]
				#[doc = " This data is also absent from the genesis."]
				pub fn relevant_messaging_state(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::relevant_messaging_state::RelevantMessagingState,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"RelevantMessagingState",
						(),
						[
							122u8, 98u8, 235u8, 251u8, 121u8, 64u8, 21u8, 37u8, 101u8, 8u8, 217u8,
							99u8, 53u8, 5u8, 101u8, 48u8, 248u8, 181u8, 61u8, 235u8, 119u8, 203u8,
							252u8, 210u8, 183u8, 171u8, 146u8, 31u8, 22u8, 211u8, 88u8, 96u8,
						],
					)
				}
				#[doc = " The parachain host configuration that was obtained from the relay parent."]
				#[doc = ""]
				#[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
				#[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
				#[doc = ""]
				#[doc = " This data is also absent from the genesis."]
				pub fn host_configuration(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::host_configuration::HostConfiguration,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"HostConfiguration",
						(),
						[
							224u8, 81u8, 104u8, 216u8, 84u8, 180u8, 220u8, 34u8, 251u8, 192u8,
							110u8, 151u8, 172u8, 254u8, 133u8, 68u8, 16u8, 230u8, 99u8, 164u8,
							162u8, 159u8, 189u8, 125u8, 249u8, 187u8, 148u8, 253u8, 71u8, 64u8,
							89u8, 88u8,
						],
					)
				}
				#[doc = " The last downward message queue chain head we have observed."]
				#[doc = ""]
				#[doc = " This value is loaded before and saved after processing inbound downward messages carried"]
				#[doc = " by the system inherent."]
				pub fn last_dmq_mqc_head(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::last_dmq_mqc_head::LastDmqMqcHead,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"LastDmqMqcHead",
						(),
						[
							1u8, 70u8, 140u8, 40u8, 51u8, 127u8, 75u8, 80u8, 5u8, 49u8, 196u8,
							31u8, 30u8, 61u8, 54u8, 252u8, 0u8, 0u8, 100u8, 115u8, 177u8, 250u8,
							138u8, 48u8, 107u8, 41u8, 93u8, 87u8, 195u8, 107u8, 206u8, 227u8,
						],
					)
				}
				#[doc = " The message queue chain heads we have observed per each channel incoming channel."]
				#[doc = ""]
				#[doc = " This value is loaded before and saved after processing inbound downward messages carried"]
				#[doc = " by the system inherent."]
				pub fn last_hrmp_mqc_heads(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::last_hrmp_mqc_heads::LastHrmpMqcHeads,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"LastHrmpMqcHeads",
						(),
						[
							131u8, 170u8, 142u8, 30u8, 101u8, 113u8, 131u8, 81u8, 38u8, 168u8,
							98u8, 3u8, 9u8, 109u8, 96u8, 179u8, 115u8, 177u8, 128u8, 11u8, 238u8,
							54u8, 81u8, 60u8, 97u8, 112u8, 224u8, 175u8, 86u8, 133u8, 182u8, 76u8,
						],
					)
				}
				#[doc = " Number of downward messages processed in a block."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block."]
				pub fn processed_downward_messages(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::processed_downward_messages::ProcessedDownwardMessages,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"ProcessedDownwardMessages",
						(),
						[
							151u8, 234u8, 196u8, 87u8, 130u8, 79u8, 4u8, 102u8, 47u8, 10u8, 33u8,
							132u8, 149u8, 118u8, 61u8, 141u8, 5u8, 1u8, 30u8, 120u8, 220u8, 156u8,
							16u8, 11u8, 14u8, 52u8, 126u8, 151u8, 244u8, 149u8, 197u8, 51u8,
						],
					)
				}
				#[doc = " HRMP watermark that was set in a block."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block."]
				pub fn hrmp_watermark(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::hrmp_watermark::HrmpWatermark,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"HrmpWatermark",
						(),
						[
							77u8, 62u8, 59u8, 220u8, 7u8, 125u8, 98u8, 249u8, 108u8, 212u8, 223u8,
							99u8, 152u8, 13u8, 29u8, 80u8, 166u8, 65u8, 232u8, 113u8, 145u8, 128u8,
							123u8, 35u8, 238u8, 31u8, 113u8, 156u8, 220u8, 104u8, 217u8, 165u8,
						],
					)
				}
				#[doc = " HRMP messages that were sent in a block."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block."]
				pub fn hrmp_outbound_messages(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::hrmp_outbound_messages::HrmpOutboundMessages,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"HrmpOutboundMessages",
						(),
						[
							42u8, 9u8, 96u8, 217u8, 25u8, 101u8, 129u8, 147u8, 150u8, 20u8, 164u8,
							186u8, 217u8, 178u8, 15u8, 201u8, 233u8, 104u8, 92u8, 120u8, 29u8,
							245u8, 196u8, 13u8, 141u8, 210u8, 102u8, 62u8, 216u8, 80u8, 246u8,
							145u8,
						],
					)
				}
				#[doc = " Upward messages that were sent in a block."]
				#[doc = ""]
				#[doc = " This will be cleared in `on_initialize` of each new block."]
				pub fn upward_messages(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::upward_messages::UpwardMessages,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"UpwardMessages",
						(),
						[
							179u8, 127u8, 8u8, 94u8, 194u8, 246u8, 53u8, 79u8, 80u8, 22u8, 18u8,
							75u8, 116u8, 163u8, 90u8, 161u8, 30u8, 140u8, 57u8, 126u8, 60u8, 91u8,
							23u8, 30u8, 120u8, 245u8, 125u8, 96u8, 152u8, 25u8, 248u8, 85u8,
						],
					)
				}
				#[doc = " Upward messages that are still pending and not yet send to the relay chain."]
				pub fn pending_upward_messages(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::pending_upward_messages::PendingUpwardMessages,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"PendingUpwardMessages",
						(),
						[
							239u8, 45u8, 18u8, 173u8, 148u8, 150u8, 55u8, 176u8, 173u8, 156u8,
							246u8, 226u8, 198u8, 214u8, 104u8, 187u8, 186u8, 13u8, 83u8, 194u8,
							153u8, 29u8, 228u8, 109u8, 26u8, 18u8, 212u8, 151u8, 246u8, 24u8,
							133u8, 216u8,
						],
					)
				}
				#[doc = " The number of HRMP messages we observed in `on_initialize` and thus used that number for"]
				#[doc = " announcing the weight of `on_initialize` and `on_finalize`."]
				pub fn announced_hrmp_messages_per_candidate(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::announced_hrmp_messages_per_candidate::AnnouncedHrmpMessagesPerCandidate,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"AnnouncedHrmpMessagesPerCandidate",
						(),
						[
							93u8, 11u8, 229u8, 172u8, 73u8, 87u8, 13u8, 149u8, 15u8, 94u8, 163u8,
							107u8, 156u8, 22u8, 131u8, 177u8, 96u8, 247u8, 213u8, 224u8, 41u8,
							126u8, 157u8, 33u8, 154u8, 194u8, 95u8, 234u8, 65u8, 19u8, 58u8, 161u8,
						],
					)
				}
				#[doc = " The weight we reserve at the beginning of the block for processing XCMP messages. This"]
				#[doc = " overrides the amount set in the Config trait."]
				pub fn reserved_xcmp_weight_override(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::reserved_xcmp_weight_override::ReservedXcmpWeightOverride,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"ReservedXcmpWeightOverride",
						(),
						[
							176u8, 93u8, 203u8, 74u8, 18u8, 170u8, 246u8, 203u8, 109u8, 89u8, 86u8,
							77u8, 96u8, 66u8, 189u8, 79u8, 184u8, 253u8, 11u8, 230u8, 87u8, 120u8,
							1u8, 254u8, 215u8, 41u8, 210u8, 86u8, 239u8, 206u8, 60u8, 2u8,
						],
					)
				}
				#[doc = " The weight we reserve at the beginning of the block for processing DMP messages. This"]
				#[doc = " overrides the amount set in the Config trait."]
				pub fn reserved_dmp_weight_override(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::reserved_dmp_weight_override::ReservedDmpWeightOverride,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"ReservedDmpWeightOverride",
						(),
						[
							205u8, 124u8, 9u8, 156u8, 255u8, 207u8, 208u8, 23u8, 179u8, 132u8,
							254u8, 157u8, 237u8, 240u8, 167u8, 203u8, 253u8, 111u8, 136u8, 32u8,
							100u8, 152u8, 16u8, 19u8, 175u8, 14u8, 108u8, 61u8, 59u8, 231u8, 70u8,
							112u8,
						],
					)
				}
				#[doc = " The next authorized upgrade, if there is one."]
				pub fn authorized_upgrade(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::authorized_upgrade::AuthorizedUpgrade,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"AuthorizedUpgrade",
						(),
						[
							165u8, 97u8, 27u8, 138u8, 2u8, 28u8, 55u8, 92u8, 96u8, 96u8, 168u8,
							169u8, 55u8, 178u8, 44u8, 127u8, 58u8, 140u8, 206u8, 178u8, 1u8, 37u8,
							214u8, 213u8, 251u8, 123u8, 5u8, 111u8, 90u8, 148u8, 217u8, 135u8,
						],
					)
				}
				#[doc = " A custom head data that should be returned as result of `validate_block`."]
				#[doc = ""]
				#[doc = " See [`Pallet::set_custom_validation_head_data`] for more information."]
				pub fn custom_validation_head_data(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::custom_validation_head_data::CustomValidationHeadData,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainSystem",
						"CustomValidationHeadData",
						(),
						[
							52u8, 186u8, 187u8, 57u8, 245u8, 171u8, 202u8, 23u8, 92u8, 80u8, 118u8,
							66u8, 251u8, 156u8, 175u8, 254u8, 141u8, 185u8, 115u8, 209u8, 170u8,
							165u8, 1u8, 242u8, 120u8, 234u8, 162u8, 24u8, 135u8, 105u8, 8u8, 177u8,
						],
					)
				}
			}
		}
	}
	pub mod parachain_info {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::parachain_info::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
			}
			pub struct TransactionApi;
			impl TransactionApi {}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod parachain_id {
					use super::runtime_types;
					pub type ParachainId = runtime_types::polkadot_parachain::primitives::Id;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn parachain_id(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::parachain_id::ParachainId,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ParachainInfo",
						"ParachainId",
						(),
						[
							160u8, 130u8, 74u8, 181u8, 231u8, 180u8, 246u8, 152u8, 204u8, 44u8,
							245u8, 91u8, 113u8, 246u8, 218u8, 50u8, 254u8, 248u8, 35u8, 219u8,
							83u8, 144u8, 228u8, 245u8, 122u8, 53u8, 194u8, 172u8, 222u8, 118u8,
							202u8, 91u8,
						],
					)
				}
			}
		}
	}
	pub mod authorship {
		use super::{root_mod, runtime_types};
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod author {
					use super::runtime_types;
					pub type Author = ::subxt::ext::subxt_core::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Author of current block."]
				pub fn author(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::author::Author,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Authorship",
						"Author",
						(),
						[
							247u8, 192u8, 118u8, 227u8, 47u8, 20u8, 203u8, 199u8, 216u8, 87u8,
							220u8, 50u8, 166u8, 61u8, 168u8, 213u8, 253u8, 62u8, 202u8, 199u8,
							61u8, 192u8, 237u8, 53u8, 22u8, 148u8, 164u8, 245u8, 99u8, 24u8, 146u8,
							18u8,
						],
					)
				}
			}
		}
	}
	pub mod collator_selection {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_collator_selection::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_collator_selection::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the list of invulnerable (fixed) collators."]
				pub struct SetInvulnerables {
					pub new: set_invulnerables::New,
				}
				pub mod set_invulnerables {
					use super::runtime_types;
					pub type New = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetInvulnerables {
					const PALLET: &'static str = "CollatorSelection";
					const CALL: &'static str = "set_invulnerables";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the ideal number of collators (not including the invulnerables)."]
				#[doc = "If lowering this number, then the number of running collators could be higher than this figure."]
				#[doc = "Aside from that edge case, there should be no other way to have more collators than the desired number."]
				pub struct SetDesiredCandidates {
					pub max: set_desired_candidates::Max,
				}
				pub mod set_desired_candidates {
					use super::runtime_types;
					pub type Max = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetDesiredCandidates {
					const PALLET: &'static str = "CollatorSelection";
					const CALL: &'static str = "set_desired_candidates";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the candidacy bond amount."]
				pub struct SetCandidacyBond {
					pub bond: set_candidacy_bond::Bond,
				}
				pub mod set_candidacy_bond {
					use super::runtime_types;
					pub type Bond = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetCandidacyBond {
					const PALLET: &'static str = "CollatorSelection";
					const CALL: &'static str = "set_candidacy_bond";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Register this account as a collator candidate. The account must (a) already have"]
				#[doc = "registered session keys and (b) be able to reserve the `CandidacyBond`."]
				#[doc = ""]
				#[doc = "This call is not available to `Invulnerable` collators."]
				pub struct RegisterAsCandidate;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RegisterAsCandidate {
					const PALLET: &'static str = "CollatorSelection";
					const CALL: &'static str = "register_as_candidate";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Deregister `origin` as a collator candidate. Note that the collator can only leave on"]
				#[doc = "session change. The `CandidacyBond` will be unreserved immediately."]
				#[doc = ""]
				#[doc = "This call will fail if the total number of candidates would drop below `MinCandidates`."]
				#[doc = ""]
				#[doc = "This call is not available to `Invulnerable` collators."]
				pub struct LeaveIntent;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for LeaveIntent {
					const PALLET: &'static str = "CollatorSelection";
					const CALL: &'static str = "leave_intent";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Set the list of invulnerable (fixed) collators."]
				pub fn set_invulnerables(
					&self,
					new: types::set_invulnerables::New,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetInvulnerables>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CollatorSelection",
						"set_invulnerables",
						types::SetInvulnerables { new },
						[
							113u8, 217u8, 14u8, 48u8, 6u8, 198u8, 8u8, 170u8, 8u8, 237u8, 230u8,
							184u8, 17u8, 181u8, 15u8, 126u8, 117u8, 3u8, 208u8, 215u8, 40u8, 16u8,
							150u8, 162u8, 37u8, 196u8, 235u8, 36u8, 247u8, 24u8, 187u8, 17u8,
						],
					)
				}
				#[doc = "Set the ideal number of collators (not including the invulnerables)."]
				#[doc = "If lowering this number, then the number of running collators could be higher than this figure."]
				#[doc = "Aside from that edge case, there should be no other way to have more collators than the desired number."]
				pub fn set_desired_candidates(
					&self,
					max: types::set_desired_candidates::Max,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetDesiredCandidates>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CollatorSelection",
						"set_desired_candidates",
						types::SetDesiredCandidates { max },
						[
							174u8, 44u8, 232u8, 155u8, 228u8, 219u8, 239u8, 75u8, 86u8, 150u8,
							135u8, 214u8, 58u8, 9u8, 25u8, 133u8, 245u8, 101u8, 85u8, 246u8, 15u8,
							248u8, 165u8, 87u8, 88u8, 28u8, 10u8, 196u8, 86u8, 89u8, 28u8, 165u8,
						],
					)
				}
				#[doc = "Set the candidacy bond amount."]
				pub fn set_candidacy_bond(
					&self,
					bond: types::set_candidacy_bond::Bond,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetCandidacyBond>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CollatorSelection",
						"set_candidacy_bond",
						types::SetCandidacyBond { bond },
						[
							250u8, 4u8, 185u8, 228u8, 101u8, 223u8, 49u8, 44u8, 172u8, 148u8,
							216u8, 242u8, 192u8, 88u8, 228u8, 59u8, 225u8, 222u8, 171u8, 40u8,
							23u8, 1u8, 46u8, 183u8, 189u8, 191u8, 156u8, 12u8, 218u8, 116u8, 76u8,
							59u8,
						],
					)
				}
				#[doc = "Register this account as a collator candidate. The account must (a) already have"]
				#[doc = "registered session keys and (b) be able to reserve the `CandidacyBond`."]
				#[doc = ""]
				#[doc = "This call is not available to `Invulnerable` collators."]
				pub fn register_as_candidate(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RegisterAsCandidate>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CollatorSelection",
						"register_as_candidate",
						types::RegisterAsCandidate {},
						[
							69u8, 222u8, 214u8, 106u8, 105u8, 168u8, 82u8, 239u8, 158u8, 117u8,
							224u8, 89u8, 228u8, 51u8, 221u8, 244u8, 88u8, 63u8, 72u8, 119u8, 224u8,
							111u8, 93u8, 39u8, 18u8, 66u8, 72u8, 105u8, 70u8, 66u8, 178u8, 173u8,
						],
					)
				}
				#[doc = "Deregister `origin` as a collator candidate. Note that the collator can only leave on"]
				#[doc = "session change. The `CandidacyBond` will be unreserved immediately."]
				#[doc = ""]
				#[doc = "This call will fail if the total number of candidates would drop below `MinCandidates`."]
				#[doc = ""]
				#[doc = "This call is not available to `Invulnerable` collators."]
				pub fn leave_intent(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::LeaveIntent> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CollatorSelection",
						"leave_intent",
						types::LeaveIntent {},
						[
							126u8, 57u8, 10u8, 67u8, 120u8, 229u8, 70u8, 23u8, 154u8, 215u8, 226u8,
							178u8, 203u8, 152u8, 195u8, 177u8, 157u8, 158u8, 40u8, 17u8, 93u8,
							225u8, 253u8, 217u8, 48u8, 165u8, 55u8, 79u8, 43u8, 123u8, 193u8,
							147u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_collator_selection::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct NewInvulnerables {
				pub invulnerables: new_invulnerables::Invulnerables,
			}
			pub mod new_invulnerables {
				use super::runtime_types;
				pub type Invulnerables = ::subxt::ext::subxt_core::alloc::vec::Vec<
					::subxt::ext::subxt_core::utils::AccountId32,
				>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NewInvulnerables {
				const PALLET: &'static str = "CollatorSelection";
				const EVENT: &'static str = "NewInvulnerables";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct NewDesiredCandidates {
				pub desired_candidates: new_desired_candidates::DesiredCandidates,
			}
			pub mod new_desired_candidates {
				use super::runtime_types;
				pub type DesiredCandidates = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NewDesiredCandidates {
				const PALLET: &'static str = "CollatorSelection";
				const EVENT: &'static str = "NewDesiredCandidates";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct NewCandidacyBond {
				pub bond_amount: new_candidacy_bond::BondAmount,
			}
			pub mod new_candidacy_bond {
				use super::runtime_types;
				pub type BondAmount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NewCandidacyBond {
				const PALLET: &'static str = "CollatorSelection";
				const EVENT: &'static str = "NewCandidacyBond";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct CandidateAdded {
				pub account_id: candidate_added::AccountId,
				pub deposit: candidate_added::Deposit,
			}
			pub mod candidate_added {
				use super::runtime_types;
				pub type AccountId = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Deposit = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for CandidateAdded {
				const PALLET: &'static str = "CollatorSelection";
				const EVENT: &'static str = "CandidateAdded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct CandidateRemoved {
				pub account_id: candidate_removed::AccountId,
			}
			pub mod candidate_removed {
				use super::runtime_types;
				pub type AccountId = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for CandidateRemoved {
				const PALLET: &'static str = "CollatorSelection";
				const EVENT: &'static str = "CandidateRemoved";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod invulnerables {
					use super::runtime_types;
					pub type Invulnerables =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>;
				}
				pub mod candidates {
					use super::runtime_types;
					pub type Candidates =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::pallet_collator_selection::pallet::CandidateInfo<
								::subxt::ext::subxt_core::utils::AccountId32,
								::core::primitive::u128,
							>,
						>;
				}
				pub mod last_authored_block {
					use super::runtime_types;
					pub type LastAuthoredBlock = ::core::primitive::u32;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod desired_candidates {
					use super::runtime_types;
					pub type DesiredCandidates = ::core::primitive::u32;
				}
				pub mod candidacy_bond {
					use super::runtime_types;
					pub type CandidacyBond = ::core::primitive::u128;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The invulnerable, fixed collators."]
				pub fn invulnerables(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::invulnerables::Invulnerables,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CollatorSelection",
						"Invulnerables",
						(),
						[
							109u8, 180u8, 25u8, 41u8, 152u8, 158u8, 186u8, 214u8, 89u8, 222u8,
							103u8, 14u8, 91u8, 3u8, 65u8, 6u8, 255u8, 62u8, 47u8, 255u8, 132u8,
							164u8, 217u8, 200u8, 130u8, 29u8, 168u8, 23u8, 81u8, 217u8, 35u8,
							123u8,
						],
					)
				}
				#[doc = " The (community, limited) collation candidates."]
				pub fn candidates(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::candidates::Candidates,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CollatorSelection",
						"Candidates",
						(),
						[
							95u8, 142u8, 119u8, 195u8, 123u8, 1u8, 212u8, 104u8, 23u8, 112u8,
							215u8, 11u8, 254u8, 30u8, 40u8, 19u8, 86u8, 187u8, 3u8, 179u8, 34u8,
							255u8, 215u8, 181u8, 162u8, 57u8, 23u8, 220u8, 223u8, 55u8, 180u8,
							88u8,
						],
					)
				}
				#[doc = " Last block authored by collator."]
				pub fn last_authored_block_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::last_authored_block::LastAuthoredBlock,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CollatorSelection",
						"LastAuthoredBlock",
						(),
						[
							176u8, 170u8, 165u8, 244u8, 101u8, 126u8, 24u8, 132u8, 228u8, 138u8,
							72u8, 241u8, 144u8, 100u8, 79u8, 112u8, 9u8, 46u8, 210u8, 80u8, 12u8,
							126u8, 32u8, 214u8, 26u8, 171u8, 155u8, 3u8, 233u8, 22u8, 164u8, 25u8,
						],
					)
				}
				#[doc = " Last block authored by collator."]
				pub fn last_authored_block(
					&self,
					_0: impl ::core::borrow::Borrow<types::last_authored_block::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::last_authored_block::Param0,
					>,
					types::last_authored_block::LastAuthoredBlock,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CollatorSelection",
						"LastAuthoredBlock",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							176u8, 170u8, 165u8, 244u8, 101u8, 126u8, 24u8, 132u8, 228u8, 138u8,
							72u8, 241u8, 144u8, 100u8, 79u8, 112u8, 9u8, 46u8, 210u8, 80u8, 12u8,
							126u8, 32u8, 214u8, 26u8, 171u8, 155u8, 3u8, 233u8, 22u8, 164u8, 25u8,
						],
					)
				}
				#[doc = " Desired number of candidates."]
				#[doc = ""]
				#[doc = " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."]
				pub fn desired_candidates(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::desired_candidates::DesiredCandidates,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CollatorSelection",
						"DesiredCandidates",
						(),
						[
							69u8, 199u8, 130u8, 132u8, 10u8, 127u8, 204u8, 220u8, 59u8, 107u8,
							96u8, 180u8, 42u8, 235u8, 14u8, 126u8, 231u8, 242u8, 162u8, 126u8,
							63u8, 223u8, 15u8, 250u8, 22u8, 210u8, 54u8, 34u8, 235u8, 191u8, 250u8,
							21u8,
						],
					)
				}
				#[doc = " Fixed amount to deposit to become a collator."]
				#[doc = ""]
				#[doc = " When a collator calls `leave_intent` they immediately receive the deposit back."]
				pub fn candidacy_bond(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::candidacy_bond::CandidacyBond,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CollatorSelection",
						"CandidacyBond",
						(),
						[
							71u8, 134u8, 156u8, 102u8, 201u8, 83u8, 240u8, 251u8, 189u8, 213u8,
							211u8, 182u8, 126u8, 122u8, 41u8, 174u8, 105u8, 29u8, 216u8, 23u8,
							255u8, 55u8, 245u8, 187u8, 234u8, 234u8, 178u8, 155u8, 145u8, 49u8,
							196u8, 214u8,
						],
					)
				}
			}
		}
	}
	pub mod session {
		use super::{root_mod, runtime_types};
		#[doc = "Error for the session pallet."]
		pub type Error = runtime_types::pallet_session::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_session::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Sets the session key(s) of the function caller to `keys`."]
				#[doc = "Allows an account to set its session key prior to becoming a validator."]
				#[doc = "This doesn't take effect until the next session."]
				#[doc = ""]
				#[doc = "The dispatch origin of this function must be signed."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is"]
				#[doc = "  fixed."]
				pub struct SetKeys {
					pub keys: set_keys::Keys,
					pub proof: set_keys::Proof,
				}
				pub mod set_keys {
					use super::runtime_types;
					pub type Keys = runtime_types::composable_runtime::opaque::SessionKeys;
					pub type Proof =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetKeys {
					const PALLET: &'static str = "Session";
					const CALL: &'static str = "set_keys";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Removes any session key(s) of the function caller."]
				#[doc = ""]
				#[doc = "This doesn't take effect until the next session."]
				#[doc = ""]
				#[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
				#[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
				#[doc = "means being a controller account) or directly convertible into a validator ID (which"]
				#[doc = "usually means being a stash account)."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)` in number of key types. Actual cost depends on the number of length of"]
				#[doc = "  `T::Keys::key_ids()` which is fixed."]
				pub struct PurgeKeys;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for PurgeKeys {
					const PALLET: &'static str = "Session";
					const CALL: &'static str = "purge_keys";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Sets the session key(s) of the function caller to `keys`."]
				#[doc = "Allows an account to set its session key prior to becoming a validator."]
				#[doc = "This doesn't take effect until the next session."]
				#[doc = ""]
				#[doc = "The dispatch origin of this function must be signed."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is"]
				#[doc = "  fixed."]
				pub fn set_keys(
					&self,
					keys: types::set_keys::Keys,
					proof: types::set_keys::Proof,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetKeys> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Session",
						"set_keys",
						types::SetKeys { keys, proof },
						[
							10u8, 183u8, 202u8, 82u8, 236u8, 202u8, 212u8, 220u8, 51u8, 217u8,
							229u8, 169u8, 238u8, 141u8, 129u8, 231u8, 203u8, 176u8, 97u8, 148u8,
							240u8, 87u8, 177u8, 245u8, 33u8, 109u8, 243u8, 52u8, 46u8, 118u8,
							164u8, 35u8,
						],
					)
				}
				#[doc = "Removes any session key(s) of the function caller."]
				#[doc = ""]
				#[doc = "This doesn't take effect until the next session."]
				#[doc = ""]
				#[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
				#[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
				#[doc = "means being a controller account) or directly convertible into a validator ID (which"]
				#[doc = "usually means being a stash account)."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(1)` in number of key types. Actual cost depends on the number of length of"]
				#[doc = "  `T::Keys::key_ids()` which is fixed."]
				pub fn purge_keys(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::PurgeKeys> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Session",
						"purge_keys",
						types::PurgeKeys {},
						[
							215u8, 204u8, 146u8, 236u8, 32u8, 78u8, 198u8, 79u8, 85u8, 214u8, 15u8,
							151u8, 158u8, 31u8, 146u8, 119u8, 119u8, 204u8, 151u8, 169u8, 226u8,
							67u8, 217u8, 39u8, 241u8, 245u8, 203u8, 240u8, 203u8, 172u8, 16u8,
							209u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_session::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "New session has happened. Note that the argument is the session index, not the"]
			#[doc = "block number as the type might suggest."]
			pub struct NewSession {
				pub session_index: new_session::SessionIndex,
			}
			pub mod new_session {
				use super::runtime_types;
				pub type SessionIndex = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NewSession {
				const PALLET: &'static str = "Session";
				const EVENT: &'static str = "NewSession";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod validators {
					use super::runtime_types;
					pub type Validators = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				pub mod current_index {
					use super::runtime_types;
					pub type CurrentIndex = ::core::primitive::u32;
				}
				pub mod queued_changed {
					use super::runtime_types;
					pub type QueuedChanged = ::core::primitive::bool;
				}
				pub mod queued_keys {
					use super::runtime_types;
					pub type QueuedKeys = ::subxt::ext::subxt_core::alloc::vec::Vec<(
						::subxt::ext::subxt_core::utils::AccountId32,
						runtime_types::composable_runtime::opaque::SessionKeys,
					)>;
				}
				pub mod disabled_validators {
					use super::runtime_types;
					pub type DisabledValidators =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>;
				}
				pub mod next_keys {
					use super::runtime_types;
					pub type NextKeys = runtime_types::composable_runtime::opaque::SessionKeys;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod key_owner {
					use super::runtime_types;
					pub type KeyOwner = ::subxt::ext::subxt_core::utils::AccountId32;
					pub type Param0 = runtime_types::sp_core::crypto::KeyTypeId;
					pub type Param1 = [::core::primitive::u8];
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current set of validators."]
				pub fn validators(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::validators::Validators,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Session",
						"Validators",
						(),
						[
							50u8, 86u8, 154u8, 222u8, 249u8, 209u8, 156u8, 22u8, 155u8, 25u8,
							133u8, 194u8, 210u8, 50u8, 38u8, 28u8, 139u8, 201u8, 90u8, 139u8,
							115u8, 12u8, 12u8, 141u8, 4u8, 178u8, 201u8, 241u8, 223u8, 234u8, 6u8,
							86u8,
						],
					)
				}
				#[doc = " Current index of the session."]
				pub fn current_index(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::current_index::CurrentIndex,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Session",
						"CurrentIndex",
						(),
						[
							167u8, 151u8, 125u8, 150u8, 159u8, 21u8, 78u8, 217u8, 237u8, 183u8,
							135u8, 65u8, 187u8, 114u8, 188u8, 206u8, 16u8, 32u8, 69u8, 208u8,
							134u8, 159u8, 232u8, 224u8, 243u8, 27u8, 31u8, 166u8, 145u8, 44u8,
							221u8, 230u8,
						],
					)
				}
				#[doc = " True if the underlying economic identities or weighting behind the validators"]
				#[doc = " has changed in the queued validator set."]
				pub fn queued_changed(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::queued_changed::QueuedChanged,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Session",
						"QueuedChanged",
						(),
						[
							184u8, 137u8, 224u8, 137u8, 31u8, 236u8, 95u8, 164u8, 102u8, 225u8,
							198u8, 227u8, 140u8, 37u8, 113u8, 57u8, 59u8, 4u8, 202u8, 102u8, 117u8,
							36u8, 226u8, 64u8, 113u8, 141u8, 199u8, 111u8, 99u8, 144u8, 198u8,
							153u8,
						],
					)
				}
				#[doc = " The queued keys for the next session. When the next session begins, these keys"]
				#[doc = " will be used to determine the validator's session keys."]
				pub fn queued_keys(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::queued_keys::QueuedKeys,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Session",
						"QueuedKeys",
						(),
						[
							3u8, 214u8, 191u8, 168u8, 90u8, 94u8, 107u8, 111u8, 170u8, 31u8, 78u8,
							61u8, 240u8, 184u8, 170u8, 104u8, 178u8, 229u8, 159u8, 89u8, 207u8,
							37u8, 49u8, 209u8, 131u8, 165u8, 14u8, 169u8, 13u8, 68u8, 151u8, 144u8,
						],
					)
				}
				#[doc = " Indices of disabled validators."]
				#[doc = ""]
				#[doc = " The vec is always kept sorted so that we can find whether a given validator is"]
				#[doc = " disabled using binary search. It gets cleared when `on_session_ending` returns"]
				#[doc = " a new set of identities."]
				pub fn disabled_validators(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::disabled_validators::DisabledValidators,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Session",
						"DisabledValidators",
						(),
						[
							213u8, 19u8, 168u8, 234u8, 187u8, 200u8, 180u8, 97u8, 234u8, 189u8,
							36u8, 233u8, 158u8, 184u8, 45u8, 35u8, 129u8, 213u8, 133u8, 8u8, 104u8,
							183u8, 46u8, 68u8, 154u8, 240u8, 132u8, 22u8, 247u8, 11u8, 54u8, 221u8,
						],
					)
				}
				#[doc = " The next session keys for a validator."]
				pub fn next_keys_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::next_keys::NextKeys,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Session",
						"NextKeys",
						(),
						[
							193u8, 216u8, 53u8, 103u8, 143u8, 241u8, 201u8, 54u8, 108u8, 149u8,
							241u8, 42u8, 3u8, 151u8, 223u8, 246u8, 30u8, 6u8, 239u8, 206u8, 27u8,
							172u8, 43u8, 226u8, 177u8, 111u8, 203u8, 78u8, 49u8, 34u8, 200u8, 6u8,
						],
					)
				}
				#[doc = " The next session keys for a validator."]
				pub fn next_keys(
					&self,
					_0: impl ::core::borrow::Borrow<types::next_keys::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::next_keys::Param0,
					>,
					types::next_keys::NextKeys,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Session",
						"NextKeys",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							193u8, 216u8, 53u8, 103u8, 143u8, 241u8, 201u8, 54u8, 108u8, 149u8,
							241u8, 42u8, 3u8, 151u8, 223u8, 246u8, 30u8, 6u8, 239u8, 206u8, 27u8,
							172u8, 43u8, 226u8, 177u8, 111u8, 203u8, 78u8, 49u8, 34u8, 200u8, 6u8,
						],
					)
				}
				#[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
				pub fn key_owner_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::key_owner::KeyOwner,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Session",
						"KeyOwner",
						(),
						[
							217u8, 204u8, 21u8, 114u8, 247u8, 129u8, 32u8, 242u8, 93u8, 91u8,
							253u8, 253u8, 248u8, 90u8, 12u8, 202u8, 195u8, 25u8, 18u8, 100u8,
							253u8, 109u8, 88u8, 77u8, 217u8, 140u8, 51u8, 40u8, 118u8, 35u8, 107u8,
							206u8,
						],
					)
				}
				#[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
				pub fn key_owner_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::key_owner::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::key_owner::Param0,
					>,
					types::key_owner::KeyOwner,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Session",
						"KeyOwner",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							217u8, 204u8, 21u8, 114u8, 247u8, 129u8, 32u8, 242u8, 93u8, 91u8,
							253u8, 253u8, 248u8, 90u8, 12u8, 202u8, 195u8, 25u8, 18u8, 100u8,
							253u8, 109u8, 88u8, 77u8, 217u8, 140u8, 51u8, 40u8, 118u8, 35u8, 107u8,
							206u8,
						],
					)
				}
				#[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
				pub fn key_owner(
					&self,
					_0: impl ::core::borrow::Borrow<types::key_owner::Param0>,
					_1: impl ::core::borrow::Borrow<types::key_owner::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::key_owner::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::key_owner::Param1,
						>,
					),
					types::key_owner::KeyOwner,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Session",
						"KeyOwner",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							217u8, 204u8, 21u8, 114u8, 247u8, 129u8, 32u8, 242u8, 93u8, 91u8,
							253u8, 253u8, 248u8, 90u8, 12u8, 202u8, 195u8, 25u8, 18u8, 100u8,
							253u8, 109u8, 88u8, 77u8, 217u8, 140u8, 51u8, 40u8, 118u8, 35u8, 107u8,
							206u8,
						],
					)
				}
			}
		}
	}
	pub mod aura {
		use super::{root_mod, runtime_types};
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod authorities {
					use super::runtime_types;
					pub type Authorities =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
						>;
				}
				pub mod current_slot {
					use super::runtime_types;
					pub type CurrentSlot = runtime_types::sp_consensus_slots::Slot;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current authority set."]
				pub fn authorities(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::authorities::Authorities,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Aura",
						"Authorities",
						(),
						[
							232u8, 129u8, 167u8, 104u8, 47u8, 188u8, 238u8, 164u8, 6u8, 29u8,
							129u8, 45u8, 64u8, 182u8, 194u8, 47u8, 0u8, 73u8, 63u8, 102u8, 204u8,
							94u8, 111u8, 96u8, 137u8, 7u8, 141u8, 110u8, 180u8, 80u8, 228u8, 16u8,
						],
					)
				}
				#[doc = " The current slot of this block."]
				#[doc = ""]
				#[doc = " This will be set in `on_initialize`."]
				pub fn current_slot(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::current_slot::CurrentSlot,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Aura",
						"CurrentSlot",
						(),
						[
							112u8, 199u8, 115u8, 248u8, 217u8, 242u8, 45u8, 231u8, 178u8, 53u8,
							236u8, 167u8, 219u8, 238u8, 81u8, 243u8, 39u8, 140u8, 68u8, 19u8,
							201u8, 169u8, 211u8, 133u8, 135u8, 213u8, 150u8, 105u8, 60u8, 252u8,
							43u8, 57u8,
						],
					)
				}
			}
		}
	}
	pub mod aura_ext {
		use super::{root_mod, runtime_types};
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod authorities {
					use super::runtime_types;
					pub type Authorities =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
						>;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Serves as cache for the authorities."]
				#[doc = ""]
				#[doc = " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,"]
				#[doc = " but we require the old authorities to verify the seal when validating a PoV. This will always"]
				#[doc = " be updated to the latest AuRa authorities in `on_finalize`."]
				pub fn authorities(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::authorities::Authorities,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AuraExt",
						"Authorities",
						(),
						[
							232u8, 129u8, 167u8, 104u8, 47u8, 188u8, 238u8, 164u8, 6u8, 29u8,
							129u8, 45u8, 64u8, 182u8, 194u8, 47u8, 0u8, 73u8, 63u8, 102u8, 204u8,
							94u8, 111u8, 96u8, 137u8, 7u8, 141u8, 110u8, 180u8, 80u8, 228u8, 16u8,
						],
					)
				}
			}
		}
	}
	pub mod council {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_collective::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_collective::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the collective's membership."]
				#[doc = ""]
				#[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
				#[doc = "- `prime`: The prime member whose vote sets the default."]
				#[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
				#[doc = "  weight estimation."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `SetMembersOrigin`."]
				#[doc = ""]
				#[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
				#[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
				#[doc = ""]
				#[doc = "# WARNING:"]
				#[doc = ""]
				#[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
				#[doc = "implementation of the trait [`ChangeMembers`]."]
				#[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
				#[doc = "with other logic managing the member set."]
				#[doc = ""]
				#[doc = "## Complexity:"]
				#[doc = "- `O(MP + N)` where:"]
				#[doc = "  - `M` old-members-count (code- and governance-bounded)"]
				#[doc = "  - `N` new-members-count (code- and governance-bounded)"]
				#[doc = "  - `P` proposals-count (code-bounded)"]
				pub struct SetMembers {
					pub new_members: set_members::NewMembers,
					pub prime: set_members::Prime,
					pub old_count: set_members::OldCount,
				}
				pub mod set_members {
					use super::runtime_types;
					pub type NewMembers = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
					pub type Prime =
						::core::option::Option<::subxt::ext::subxt_core::utils::AccountId32>;
					pub type OldCount = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetMembers {
					const PALLET: &'static str = "Council";
					const CALL: &'static str = "set_members";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Dispatch a proposal from a member using the `Member` origin."]
				#[doc = ""]
				#[doc = "Origin must be a member of the collective."]
				#[doc = ""]
				#[doc = "## Complexity:"]
				#[doc = "- `O(B + M + P)` where:"]
				#[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "- `M` members-count (code-bounded)"]
				#[doc = "- `P` complexity of dispatching `proposal`"]
				pub struct Execute {
					pub proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<execute::Proposal>,
					#[codec(compact)]
					pub length_bound: execute::LengthBound,
				}
				pub mod execute {
					use super::runtime_types;
					pub type Proposal = runtime_types::composable_runtime::RuntimeCall;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Execute {
					const PALLET: &'static str = "Council";
					const CALL: &'static str = "execute";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Add a new proposal to either be voted on or executed directly."]
				#[doc = ""]
				#[doc = "Requires the sender to be member."]
				#[doc = ""]
				#[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
				#[doc = "or put up for voting."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - branching is influenced by `threshold` where:"]
				#[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
				#[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
				pub struct Propose {
					#[codec(compact)]
					pub threshold: propose::Threshold,
					pub proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<propose::Proposal>,
					#[codec(compact)]
					pub length_bound: propose::LengthBound,
				}
				pub mod propose {
					use super::runtime_types;
					pub type Threshold = ::core::primitive::u32;
					pub type Proposal = runtime_types::composable_runtime::RuntimeCall;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Propose {
					const PALLET: &'static str = "Council";
					const CALL: &'static str = "propose";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Add an aye or nay vote for the sender to the given proposal."]
				#[doc = ""]
				#[doc = "Requires the sender to be a member."]
				#[doc = ""]
				#[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
				#[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
				#[doc = "fee."]
				#[doc = "## Complexity"]
				#[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
				pub struct Vote {
					pub proposal: vote::Proposal,
					#[codec(compact)]
					pub index: vote::Index,
					pub approve: vote::Approve,
				}
				pub mod vote {
					use super::runtime_types;
					pub type Proposal = ::subxt::ext::subxt_core::utils::H256;
					pub type Index = ::core::primitive::u32;
					pub type Approve = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Vote {
					const PALLET: &'static str = "Council";
					const CALL: &'static str = "vote";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
				#[doc = "state."]
				#[doc = ""]
				#[doc = "Must be called by the Root origin."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "O(P) where P is the number of max proposals"]
				pub struct DisapproveProposal {
					pub proposal_hash: disapprove_proposal::ProposalHash,
				}
				pub mod disapprove_proposal {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for DisapproveProposal {
					const PALLET: &'static str = "Council";
					const CALL: &'static str = "disapprove_proposal";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
				#[doc = ""]
				#[doc = "May be called by any signed account in order to finish voting and close the proposal."]
				#[doc = ""]
				#[doc = "If called before the end of the voting period it will only close the vote if it is"]
				#[doc = "has enough votes to be approved or disapproved."]
				#[doc = ""]
				#[doc = "If called after the end of the voting period abstentions are counted as rejections"]
				#[doc = "unless there is a prime member set and the prime member cast an approval."]
				#[doc = ""]
				#[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
				#[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
				#[doc = ""]
				#[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
				#[doc = "proposal."]
				#[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
				#[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(B + M + P1 + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - `P1` is the complexity of `proposal` preimage."]
				#[doc = "  - `P2` is proposal-count (code-bounded)"]
				pub struct Close {
					pub proposal_hash: close::ProposalHash,
					#[codec(compact)]
					pub index: close::Index,
					pub proposal_weight_bound: close::ProposalWeightBound,
					#[codec(compact)]
					pub length_bound: close::LengthBound,
				}
				pub mod close {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
					pub type Index = ::core::primitive::u32;
					pub type ProposalWeightBound = runtime_types::sp_weights::weight_v2::Weight;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Close {
					const PALLET: &'static str = "Council";
					const CALL: &'static str = "close";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Set the collective's membership."]
				#[doc = ""]
				#[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
				#[doc = "- `prime`: The prime member whose vote sets the default."]
				#[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
				#[doc = "  weight estimation."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `SetMembersOrigin`."]
				#[doc = ""]
				#[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
				#[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
				#[doc = ""]
				#[doc = "# WARNING:"]
				#[doc = ""]
				#[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
				#[doc = "implementation of the trait [`ChangeMembers`]."]
				#[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
				#[doc = "with other logic managing the member set."]
				#[doc = ""]
				#[doc = "## Complexity:"]
				#[doc = "- `O(MP + N)` where:"]
				#[doc = "  - `M` old-members-count (code- and governance-bounded)"]
				#[doc = "  - `N` new-members-count (code- and governance-bounded)"]
				#[doc = "  - `P` proposals-count (code-bounded)"]
				pub fn set_members(
					&self,
					new_members: types::set_members::NewMembers,
					prime: types::set_members::Prime,
					old_count: types::set_members::OldCount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetMembers> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Council",
						"set_members",
						types::SetMembers { new_members, prime, old_count },
						[
							66u8, 224u8, 186u8, 178u8, 41u8, 208u8, 67u8, 192u8, 57u8, 242u8,
							141u8, 31u8, 216u8, 118u8, 192u8, 43u8, 125u8, 213u8, 226u8, 85u8,
							142u8, 225u8, 131u8, 45u8, 172u8, 142u8, 12u8, 9u8, 73u8, 7u8, 218u8,
							61u8,
						],
					)
				}
				#[doc = "Dispatch a proposal from a member using the `Member` origin."]
				#[doc = ""]
				#[doc = "Origin must be a member of the collective."]
				#[doc = ""]
				#[doc = "## Complexity:"]
				#[doc = "- `O(B + M + P)` where:"]
				#[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "- `M` members-count (code-bounded)"]
				#[doc = "- `P` complexity of dispatching `proposal`"]
				pub fn execute(
					&self,
					proposal: types::execute::Proposal,
					length_bound: types::execute::LengthBound,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Execute> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Council",
						"execute",
						types::Execute {
							proposal: ::subxt::ext::subxt_core::alloc::boxed::Box::new(proposal),
							length_bound,
						},
						[
							234u8, 0u8, 95u8, 166u8, 244u8, 72u8, 155u8, 235u8, 221u8, 34u8, 177u8,
							53u8, 157u8, 42u8, 238u8, 197u8, 28u8, 26u8, 45u8, 63u8, 142u8, 247u8,
							47u8, 254u8, 24u8, 16u8, 8u8, 108u8, 33u8, 161u8, 88u8, 37u8,
						],
					)
				}
				#[doc = "Add a new proposal to either be voted on or executed directly."]
				#[doc = ""]
				#[doc = "Requires the sender to be member."]
				#[doc = ""]
				#[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
				#[doc = "or put up for voting."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - branching is influenced by `threshold` where:"]
				#[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
				#[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
				pub fn propose(
					&self,
					threshold: types::propose::Threshold,
					proposal: types::propose::Proposal,
					length_bound: types::propose::LengthBound,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Propose> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Council",
						"propose",
						types::Propose {
							threshold,
							proposal: ::subxt::ext::subxt_core::alloc::boxed::Box::new(proposal),
							length_bound,
						},
						[
							201u8, 68u8, 226u8, 239u8, 107u8, 242u8, 87u8, 249u8, 164u8, 79u8,
							192u8, 229u8, 7u8, 188u8, 244u8, 62u8, 48u8, 116u8, 174u8, 255u8,
							181u8, 33u8, 102u8, 235u8, 11u8, 219u8, 183u8, 87u8, 21u8, 1u8, 49u8,
							176u8,
						],
					)
				}
				#[doc = "Add an aye or nay vote for the sender to the given proposal."]
				#[doc = ""]
				#[doc = "Requires the sender to be a member."]
				#[doc = ""]
				#[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
				#[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
				#[doc = "fee."]
				#[doc = "## Complexity"]
				#[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
				pub fn vote(
					&self,
					proposal: types::vote::Proposal,
					index: types::vote::Index,
					approve: types::vote::Approve,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Vote> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Council",
						"vote",
						types::Vote { proposal, index, approve },
						[
							110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
							129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
							176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
							120u8,
						],
					)
				}
				#[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
				#[doc = "state."]
				#[doc = ""]
				#[doc = "Must be called by the Root origin."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "O(P) where P is the number of max proposals"]
				pub fn disapprove_proposal(
					&self,
					proposal_hash: types::disapprove_proposal::ProposalHash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::DisapproveProposal>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Council",
						"disapprove_proposal",
						types::DisapproveProposal { proposal_hash },
						[
							26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
							155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
							156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
						],
					)
				}
				#[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
				#[doc = ""]
				#[doc = "May be called by any signed account in order to finish voting and close the proposal."]
				#[doc = ""]
				#[doc = "If called before the end of the voting period it will only close the vote if it is"]
				#[doc = "has enough votes to be approved or disapproved."]
				#[doc = ""]
				#[doc = "If called after the end of the voting period abstentions are counted as rejections"]
				#[doc = "unless there is a prime member set and the prime member cast an approval."]
				#[doc = ""]
				#[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
				#[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
				#[doc = ""]
				#[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
				#[doc = "proposal."]
				#[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
				#[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(B + M + P1 + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - `P1` is the complexity of `proposal` preimage."]
				#[doc = "  - `P2` is proposal-count (code-bounded)"]
				pub fn close(
					&self,
					proposal_hash: types::close::ProposalHash,
					index: types::close::Index,
					proposal_weight_bound: types::close::ProposalWeightBound,
					length_bound: types::close::LengthBound,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Close> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Council",
						"close",
						types::Close { proposal_hash, index, proposal_weight_bound, length_bound },
						[
							136u8, 48u8, 243u8, 34u8, 60u8, 109u8, 186u8, 158u8, 72u8, 48u8, 62u8,
							34u8, 167u8, 46u8, 33u8, 142u8, 239u8, 43u8, 238u8, 125u8, 94u8, 80u8,
							157u8, 245u8, 220u8, 126u8, 58u8, 244u8, 186u8, 195u8, 30u8, 127u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_collective::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
			#[doc = "`MemberCount`)."]
			pub struct Proposed {
				pub account: proposed::Account,
				pub proposal_index: proposed::ProposalIndex,
				pub proposal_hash: proposed::ProposalHash,
				pub threshold: proposed::Threshold,
			}
			pub mod proposed {
				use super::runtime_types;
				pub type Account = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Threshold = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Proposed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion (given hash) has been voted on by given account, leaving"]
			#[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
			pub struct Voted {
				pub account: voted::Account,
				pub proposal_hash: voted::ProposalHash,
				pub voted: voted::Voted,
				pub yes: voted::Yes,
				pub no: voted::No,
			}
			pub mod voted {
				use super::runtime_types;
				pub type Account = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Voted = ::core::primitive::bool;
				pub type Yes = ::core::primitive::u32;
				pub type No = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Voted {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion was approved by the required threshold."]
			pub struct Approved {
				pub proposal_hash: approved::ProposalHash,
			}
			pub mod approved {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Approved {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion was not approved by the required threshold."]
			pub struct Disapproved {
				pub proposal_hash: disapproved::ProposalHash,
			}
			pub mod disapproved {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Disapproved {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Disapproved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion was executed; result will be `Ok` if it returned without error."]
			pub struct Executed {
				pub proposal_hash: executed::ProposalHash,
				pub result: executed::Result,
			}
			pub mod executed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Executed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Executed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A single member did some action; result will be `Ok` if it returned without error."]
			pub struct MemberExecuted {
				pub proposal_hash: member_executed::ProposalHash,
				pub result: member_executed::Result,
			}
			pub mod member_executed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for MemberExecuted {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "MemberExecuted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
			pub struct Closed {
				pub proposal_hash: closed::ProposalHash,
				pub yes: closed::Yes,
				pub no: closed::No,
			}
			pub mod closed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Yes = ::core::primitive::u32;
				pub type No = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Closed {
				const PALLET: &'static str = "Council";
				const EVENT: &'static str = "Closed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod proposals {
					use super::runtime_types;
					pub type Proposals =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::ext::subxt_core::utils::H256,
						>;
				}
				pub mod proposal_of {
					use super::runtime_types;
					pub type ProposalOf = runtime_types::composable_runtime::RuntimeCall;
					pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
				}
				pub mod voting {
					use super::runtime_types;
					pub type Voting = runtime_types::pallet_collective::Votes<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
				}
				pub mod proposal_count {
					use super::runtime_types;
					pub type ProposalCount = ::core::primitive::u32;
				}
				pub mod members {
					use super::runtime_types;
					pub type Members = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				pub mod prime {
					use super::runtime_types;
					pub type Prime = ::subxt::ext::subxt_core::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The hashes of the active proposals."]
				pub fn proposals(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::proposals::Proposals,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Council",
						"Proposals",
						(),
						[
							210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
							147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
							198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
						],
					)
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::proposal_of::ProposalOf,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Council",
						"ProposalOf",
						(),
						[
							75u8, 197u8, 147u8, 38u8, 71u8, 208u8, 129u8, 6u8, 105u8, 179u8, 0u8,
							117u8, 80u8, 243u8, 83u8, 143u8, 117u8, 46u8, 84u8, 251u8, 232u8, 36u8,
							205u8, 227u8, 85u8, 33u8, 159u8, 122u8, 229u8, 78u8, 230u8, 231u8,
						],
					)
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of(
					&self,
					_0: impl ::core::borrow::Borrow<types::proposal_of::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::proposal_of::Param0,
					>,
					types::proposal_of::ProposalOf,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Council",
						"ProposalOf",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							75u8, 197u8, 147u8, 38u8, 71u8, 208u8, 129u8, 6u8, 105u8, 179u8, 0u8,
							117u8, 80u8, 243u8, 83u8, 143u8, 117u8, 46u8, 84u8, 251u8, 232u8, 36u8,
							205u8, 227u8, 85u8, 33u8, 159u8, 122u8, 229u8, 78u8, 230u8, 231u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::voting::Voting,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Council",
						"Voting",
						(),
						[
							109u8, 198u8, 2u8, 13u8, 29u8, 14u8, 241u8, 217u8, 55u8, 147u8, 147u8,
							4u8, 176u8, 69u8, 132u8, 228u8, 158u8, 203u8, 110u8, 239u8, 158u8,
							137u8, 97u8, 46u8, 228u8, 118u8, 251u8, 201u8, 88u8, 208u8, 94u8,
							132u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting(
					&self,
					_0: impl ::core::borrow::Borrow<types::voting::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::voting::Param0,
					>,
					types::voting::Voting,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Council",
						"Voting",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							109u8, 198u8, 2u8, 13u8, 29u8, 14u8, 241u8, 217u8, 55u8, 147u8, 147u8,
							4u8, 176u8, 69u8, 132u8, 228u8, 158u8, 203u8, 110u8, 239u8, 158u8,
							137u8, 97u8, 46u8, 228u8, 118u8, 251u8, 201u8, 88u8, 208u8, 94u8,
							132u8,
						],
					)
				}
				#[doc = " Proposals so far."]
				pub fn proposal_count(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::proposal_count::ProposalCount,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Council",
						"ProposalCount",
						(),
						[
							91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
							216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
							29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
						],
					)
				}
				#[doc = " The current members of the collective. This is stored sorted (just by value)."]
				pub fn members(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::members::Members,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Council",
						"Members",
						(),
						[
							16u8, 29u8, 32u8, 222u8, 175u8, 136u8, 111u8, 101u8, 43u8, 74u8, 209u8,
							81u8, 47u8, 97u8, 129u8, 39u8, 225u8, 243u8, 110u8, 229u8, 237u8, 21u8,
							90u8, 127u8, 80u8, 239u8, 156u8, 32u8, 90u8, 109u8, 179u8, 0u8,
						],
					)
				}
				#[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
				pub fn prime(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::prime::Prime,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Council",
						"Prime",
						(),
						[
							72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
							3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
							77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The maximum weight of a dispatch call that can be proposed and executed."]
				pub fn max_proposal_weight(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::sp_weights::weight_v2::Weight,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Council",
						"MaxProposalWeight",
						[
							149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
							56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
							128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
							112u8,
						],
					)
				}
			}
		}
	}
	pub mod council_membership {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_membership::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_membership::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Add a member `who` to the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::AddOrigin`."]
				pub struct AddMember {
					pub who: add_member::Who,
				}
				pub mod add_member {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddMember {
					const PALLET: &'static str = "CouncilMembership";
					const CALL: &'static str = "add_member";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove a member `who` from the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::RemoveOrigin`."]
				pub struct RemoveMember {
					pub who: remove_member::Who,
				}
				pub mod remove_member {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveMember {
					const PALLET: &'static str = "CouncilMembership";
					const CALL: &'static str = "remove_member";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Swap out one member `remove` for another `add`."]
				#[doc = ""]
				#[doc = "May only be called from `T::SwapOrigin`."]
				#[doc = ""]
				#[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
				pub struct SwapMember {
					pub remove: swap_member::Remove,
					pub add: swap_member::Add,
				}
				pub mod swap_member {
					use super::runtime_types;
					pub type Remove = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Add = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SwapMember {
					const PALLET: &'static str = "CouncilMembership";
					const CALL: &'static str = "swap_member";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
				#[doc = "pass `members` pre-sorted."]
				#[doc = ""]
				#[doc = "May only be called from `T::ResetOrigin`."]
				pub struct ResetMembers {
					pub members: reset_members::Members,
				}
				pub mod reset_members {
					use super::runtime_types;
					pub type Members = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ResetMembers {
					const PALLET: &'static str = "CouncilMembership";
					const CALL: &'static str = "reset_members";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Swap out the sending member for some other key `new`."]
				#[doc = ""]
				#[doc = "May only be called from `Signed` origin of a current member."]
				#[doc = ""]
				#[doc = "Prime membership is passed from the origin account to `new`, if extant."]
				pub struct ChangeKey {
					pub new: change_key::New,
				}
				pub mod change_key {
					use super::runtime_types;
					pub type New = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ChangeKey {
					const PALLET: &'static str = "CouncilMembership";
					const CALL: &'static str = "change_key";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the prime member. Must be a current member."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub struct SetPrime {
					pub who: set_prime::Who,
				}
				pub mod set_prime {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetPrime {
					const PALLET: &'static str = "CouncilMembership";
					const CALL: &'static str = "set_prime";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove the prime member if it exists."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub struct ClearPrime;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClearPrime {
					const PALLET: &'static str = "CouncilMembership";
					const CALL: &'static str = "clear_prime";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Add a member `who` to the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::AddOrigin`."]
				pub fn add_member(
					&self,
					who: types::add_member::Who,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AddMember> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CouncilMembership",
						"add_member",
						types::AddMember { who },
						[
							237u8, 212u8, 114u8, 106u8, 42u8, 1u8, 28u8, 244u8, 161u8, 140u8, 80u8,
							251u8, 217u8, 116u8, 9u8, 155u8, 234u8, 94u8, 3u8, 156u8, 5u8, 68u8,
							197u8, 90u8, 47u8, 223u8, 235u8, 200u8, 194u8, 195u8, 90u8, 70u8,
						],
					)
				}
				#[doc = "Remove a member `who` from the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::RemoveOrigin`."]
				pub fn remove_member(
					&self,
					who: types::remove_member::Who,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveMember> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CouncilMembership",
						"remove_member",
						types::RemoveMember { who },
						[
							182u8, 80u8, 149u8, 27u8, 252u8, 160u8, 231u8, 23u8, 208u8, 93u8,
							116u8, 252u8, 5u8, 28u8, 162u8, 221u8, 14u8, 150u8, 62u8, 65u8, 169u8,
							164u8, 226u8, 53u8, 152u8, 237u8, 37u8, 171u8, 209u8, 52u8, 235u8,
							11u8,
						],
					)
				}
				#[doc = "Swap out one member `remove` for another `add`."]
				#[doc = ""]
				#[doc = "May only be called from `T::SwapOrigin`."]
				#[doc = ""]
				#[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
				pub fn swap_member(
					&self,
					remove: types::swap_member::Remove,
					add: types::swap_member::Add,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SwapMember> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CouncilMembership",
						"swap_member",
						types::SwapMember { remove, add },
						[
							11u8, 68u8, 57u8, 232u8, 242u8, 45u8, 34u8, 178u8, 250u8, 195u8, 254u8,
							22u8, 13u8, 164u8, 86u8, 193u8, 47u8, 198u8, 164u8, 143u8, 66u8, 245u8,
							222u8, 24u8, 240u8, 97u8, 241u8, 166u8, 198u8, 236u8, 148u8, 195u8,
						],
					)
				}
				#[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
				#[doc = "pass `members` pre-sorted."]
				#[doc = ""]
				#[doc = "May only be called from `T::ResetOrigin`."]
				pub fn reset_members(
					&self,
					members: types::reset_members::Members,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ResetMembers> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CouncilMembership",
						"reset_members",
						types::ResetMembers { members },
						[
							212u8, 144u8, 99u8, 156u8, 70u8, 4u8, 219u8, 227u8, 150u8, 25u8, 86u8,
							8u8, 215u8, 128u8, 193u8, 206u8, 33u8, 193u8, 71u8, 15u8, 20u8, 92u8,
							99u8, 89u8, 174u8, 236u8, 102u8, 82u8, 164u8, 234u8, 12u8, 45u8,
						],
					)
				}
				#[doc = "Swap out the sending member for some other key `new`."]
				#[doc = ""]
				#[doc = "May only be called from `Signed` origin of a current member."]
				#[doc = ""]
				#[doc = "Prime membership is passed from the origin account to `new`, if extant."]
				pub fn change_key(
					&self,
					new: types::change_key::New,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ChangeKey> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CouncilMembership",
						"change_key",
						types::ChangeKey { new },
						[
							189u8, 13u8, 214u8, 17u8, 2u8, 171u8, 123u8, 104u8, 227u8, 136u8,
							198u8, 88u8, 216u8, 105u8, 246u8, 70u8, 25u8, 19u8, 244u8, 19u8, 112u8,
							105u8, 14u8, 16u8, 75u8, 183u8, 85u8, 183u8, 131u8, 186u8, 129u8,
							231u8,
						],
					)
				}
				#[doc = "Set the prime member. Must be a current member."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub fn set_prime(
					&self,
					who: types::set_prime::Who,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetPrime> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CouncilMembership",
						"set_prime",
						types::SetPrime { who },
						[
							76u8, 172u8, 20u8, 105u8, 143u8, 253u8, 234u8, 255u8, 138u8, 98u8,
							81u8, 183u8, 147u8, 232u8, 49u8, 234u8, 17u8, 129u8, 20u8, 119u8,
							116u8, 214u8, 131u8, 112u8, 38u8, 21u8, 93u8, 139u8, 161u8, 242u8,
							88u8, 152u8,
						],
					)
				}
				#[doc = "Remove the prime member if it exists."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub fn clear_prime(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClearPrime> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CouncilMembership",
						"clear_prime",
						types::ClearPrime {},
						[
							71u8, 213u8, 34u8, 23u8, 186u8, 63u8, 240u8, 216u8, 190u8, 251u8, 84u8,
							109u8, 140u8, 137u8, 210u8, 211u8, 242u8, 231u8, 212u8, 133u8, 151u8,
							125u8, 25u8, 46u8, 210u8, 53u8, 133u8, 222u8, 21u8, 107u8, 120u8, 52u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_membership::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The given member was added; see the transaction for who."]
			pub struct MemberAdded;
			impl ::subxt::ext::subxt_core::events::StaticEvent for MemberAdded {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "MemberAdded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The given member was removed; see the transaction for who."]
			pub struct MemberRemoved;
			impl ::subxt::ext::subxt_core::events::StaticEvent for MemberRemoved {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "MemberRemoved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Two members were swapped; see the transaction for who."]
			pub struct MembersSwapped;
			impl ::subxt::ext::subxt_core::events::StaticEvent for MembersSwapped {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "MembersSwapped";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The membership was reset; see the transaction for who the new set is."]
			pub struct MembersReset;
			impl ::subxt::ext::subxt_core::events::StaticEvent for MembersReset {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "MembersReset";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "One of the members' keys changed."]
			pub struct KeyChanged;
			impl ::subxt::ext::subxt_core::events::StaticEvent for KeyChanged {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "KeyChanged";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Phantom member, never used."]
			pub struct Dummy;
			impl ::subxt::ext::subxt_core::events::StaticEvent for Dummy {
				const PALLET: &'static str = "CouncilMembership";
				const EVENT: &'static str = "Dummy";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod members {
					use super::runtime_types;
					pub type Members = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				pub mod prime {
					use super::runtime_types;
					pub type Prime = ::subxt::ext::subxt_core::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current membership, stored as an ordered Vec."]
				pub fn members(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::members::Members,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CouncilMembership",
						"Members",
						(),
						[
							109u8, 100u8, 14u8, 195u8, 213u8, 67u8, 44u8, 218u8, 84u8, 254u8, 76u8,
							80u8, 210u8, 155u8, 155u8, 30u8, 18u8, 169u8, 195u8, 92u8, 208u8,
							223u8, 242u8, 97u8, 147u8, 20u8, 168u8, 145u8, 254u8, 115u8, 225u8,
							193u8,
						],
					)
				}
				#[doc = " The current prime member, if one exists."]
				pub fn prime(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::prime::Prime,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CouncilMembership",
						"Prime",
						(),
						[
							72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
							3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
							77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
						],
					)
				}
			}
		}
	}
	pub mod treasury {
		use super::{root_mod, runtime_types};
		#[doc = "Error for the treasury pallet."]
		pub type Error = runtime_types::pallet_treasury::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_treasury::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
				#[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
				#[doc = "proposal is awarded."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(1)"]
				pub struct ProposeSpend {
					#[codec(compact)]
					pub value: propose_spend::Value,
					pub beneficiary: propose_spend::Beneficiary,
				}
				pub mod propose_spend {
					use super::runtime_types;
					pub type Value = ::core::primitive::u128;
					pub type Beneficiary = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ProposeSpend {
					const PALLET: &'static str = "Treasury";
					const CALL: &'static str = "propose_spend";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Reject a proposed spend. The original deposit will be slashed."]
				#[doc = ""]
				#[doc = "May only be called from `T::RejectOrigin`."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(1)"]
				pub struct RejectProposal {
					#[codec(compact)]
					pub proposal_id: reject_proposal::ProposalId,
				}
				pub mod reject_proposal {
					use super::runtime_types;
					pub type ProposalId = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RejectProposal {
					const PALLET: &'static str = "Treasury";
					const CALL: &'static str = "reject_proposal";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
				#[doc = "and the original deposit will be returned."]
				#[doc = ""]
				#[doc = "May only be called from `T::ApproveOrigin`."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = " - O(1)."]
				pub struct ApproveProposal {
					#[codec(compact)]
					pub proposal_id: approve_proposal::ProposalId,
				}
				pub mod approve_proposal {
					use super::runtime_types;
					pub type ProposalId = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ApproveProposal {
					const PALLET: &'static str = "Treasury";
					const CALL: &'static str = "approve_proposal";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Propose and approve a spend of treasury funds."]
				#[doc = ""]
				#[doc = "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`."]
				#[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
				#[doc = "- `beneficiary`: The destination account for the transfer."]
				#[doc = ""]
				#[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
				#[doc = "beneficiary."]
				pub struct Spend {
					#[codec(compact)]
					pub amount: spend::Amount,
					pub beneficiary: spend::Beneficiary,
				}
				pub mod spend {
					use super::runtime_types;
					pub type Amount = ::core::primitive::u128;
					pub type Beneficiary = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Spend {
					const PALLET: &'static str = "Treasury";
					const CALL: &'static str = "spend";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Force a previously approved proposal to be removed from the approval queue."]
				#[doc = "The original deposit will no longer be returned."]
				#[doc = ""]
				#[doc = "May only be called from `T::RejectOrigin`."]
				#[doc = "- `proposal_id`: The index of a proposal"]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(A) where `A` is the number of approvals"]
				#[doc = ""]
				#[doc = "Errors:"]
				#[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
				#[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
				#[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
				pub struct RemoveApproval {
					#[codec(compact)]
					pub proposal_id: remove_approval::ProposalId,
				}
				pub mod remove_approval {
					use super::runtime_types;
					pub type ProposalId = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveApproval {
					const PALLET: &'static str = "Treasury";
					const CALL: &'static str = "remove_approval";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
				#[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
				#[doc = "proposal is awarded."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(1)"]
				pub fn propose_spend(
					&self,
					value: types::propose_spend::Value,
					beneficiary: types::propose_spend::Beneficiary,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ProposeSpend> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Treasury",
						"propose_spend",
						types::ProposeSpend { value, beneficiary },
						[
							82u8, 0u8, 77u8, 68u8, 172u8, 126u8, 179u8, 217u8, 173u8, 214u8, 69u8,
							227u8, 243u8, 252u8, 100u8, 30u8, 205u8, 80u8, 99u8, 57u8, 63u8, 59u8,
							142u8, 81u8, 38u8, 22u8, 243u8, 165u8, 131u8, 193u8, 135u8, 171u8,
						],
					)
				}
				#[doc = "Reject a proposed spend. The original deposit will be slashed."]
				#[doc = ""]
				#[doc = "May only be called from `T::RejectOrigin`."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(1)"]
				pub fn reject_proposal(
					&self,
					proposal_id: types::reject_proposal::ProposalId,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RejectProposal>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Treasury",
						"reject_proposal",
						types::RejectProposal { proposal_id },
						[
							18u8, 166u8, 80u8, 141u8, 222u8, 230u8, 4u8, 36u8, 7u8, 76u8, 12u8,
							40u8, 145u8, 114u8, 12u8, 43u8, 223u8, 78u8, 189u8, 222u8, 120u8, 80u8,
							225u8, 215u8, 119u8, 68u8, 200u8, 15u8, 25u8, 172u8, 192u8, 173u8,
						],
					)
				}
				#[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
				#[doc = "and the original deposit will be returned."]
				#[doc = ""]
				#[doc = "May only be called from `T::ApproveOrigin`."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = " - O(1)."]
				pub fn approve_proposal(
					&self,
					proposal_id: types::approve_proposal::ProposalId,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ApproveProposal>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Treasury",
						"approve_proposal",
						types::ApproveProposal { proposal_id },
						[
							154u8, 176u8, 152u8, 97u8, 167u8, 177u8, 78u8, 9u8, 235u8, 229u8,
							199u8, 193u8, 214u8, 3u8, 16u8, 30u8, 4u8, 104u8, 27u8, 184u8, 100u8,
							65u8, 179u8, 13u8, 91u8, 62u8, 115u8, 5u8, 219u8, 211u8, 251u8, 153u8,
						],
					)
				}
				#[doc = "Propose and approve a spend of treasury funds."]
				#[doc = ""]
				#[doc = "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`."]
				#[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
				#[doc = "- `beneficiary`: The destination account for the transfer."]
				#[doc = ""]
				#[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
				#[doc = "beneficiary."]
				pub fn spend(
					&self,
					amount: types::spend::Amount,
					beneficiary: types::spend::Beneficiary,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Spend> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Treasury",
						"spend",
						types::Spend { amount, beneficiary },
						[
							127u8, 149u8, 250u8, 91u8, 236u8, 214u8, 148u8, 99u8, 110u8, 217u8,
							128u8, 254u8, 102u8, 8u8, 203u8, 245u8, 101u8, 171u8, 176u8, 191u8,
							167u8, 223u8, 97u8, 235u8, 86u8, 18u8, 40u8, 41u8, 19u8, 116u8, 1u8,
							13u8,
						],
					)
				}
				#[doc = "Force a previously approved proposal to be removed from the approval queue."]
				#[doc = "The original deposit will no longer be returned."]
				#[doc = ""]
				#[doc = "May only be called from `T::RejectOrigin`."]
				#[doc = "- `proposal_id`: The index of a proposal"]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(A) where `A` is the number of approvals"]
				#[doc = ""]
				#[doc = "Errors:"]
				#[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
				#[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
				#[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
				pub fn remove_approval(
					&self,
					proposal_id: types::remove_approval::ProposalId,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveApproval>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Treasury",
						"remove_approval",
						types::RemoveApproval { proposal_id },
						[
							180u8, 20u8, 39u8, 227u8, 29u8, 228u8, 234u8, 36u8, 155u8, 114u8,
							197u8, 135u8, 185u8, 31u8, 56u8, 247u8, 224u8, 168u8, 254u8, 233u8,
							250u8, 134u8, 186u8, 155u8, 108u8, 84u8, 94u8, 226u8, 207u8, 130u8,
							196u8, 100u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_treasury::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "New proposal."]
			pub struct Proposed {
				pub proposal_index: proposed::ProposalIndex,
			}
			pub mod proposed {
				use super::runtime_types;
				pub type ProposalIndex = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Proposed {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "We have ended a spend period and will now allocate funds."]
			pub struct Spending {
				pub budget_remaining: spending::BudgetRemaining,
			}
			pub mod spending {
				use super::runtime_types;
				pub type BudgetRemaining = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Spending {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Spending";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some funds have been allocated."]
			pub struct Awarded {
				pub proposal_index: awarded::ProposalIndex,
				pub award: awarded::Award,
				pub account: awarded::Account,
			}
			pub mod awarded {
				use super::runtime_types;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type Award = ::core::primitive::u128;
				pub type Account = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Awarded {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Awarded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A proposal was rejected; funds were slashed."]
			pub struct Rejected {
				pub proposal_index: rejected::ProposalIndex,
				pub slashed: rejected::Slashed,
			}
			pub mod rejected {
				use super::runtime_types;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type Slashed = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Rejected {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Rejected";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some of our funds have been burnt."]
			pub struct Burnt {
				pub burnt_funds: burnt::BurntFunds,
			}
			pub mod burnt {
				use super::runtime_types;
				pub type BurntFunds = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Burnt {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Burnt";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Spending has finished; this is the amount that rolls over until next spend."]
			pub struct Rollover {
				pub rollover_balance: rollover::RolloverBalance,
			}
			pub mod rollover {
				use super::runtime_types;
				pub type RolloverBalance = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Rollover {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Rollover";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some funds have been deposited."]
			pub struct Deposit {
				pub value: deposit::Value,
			}
			pub mod deposit {
				use super::runtime_types;
				pub type Value = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Deposit {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "Deposit";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A new spend proposal has been approved."]
			pub struct SpendApproved {
				pub proposal_index: spend_approved::ProposalIndex,
				pub amount: spend_approved::Amount,
				pub beneficiary: spend_approved::Beneficiary,
			}
			pub mod spend_approved {
				use super::runtime_types;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type Amount = ::core::primitive::u128;
				pub type Beneficiary = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for SpendApproved {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "SpendApproved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The inactive funds of the pallet have been updated."]
			pub struct UpdatedInactive {
				pub reactivated: updated_inactive::Reactivated,
				pub deactivated: updated_inactive::Deactivated,
			}
			pub mod updated_inactive {
				use super::runtime_types;
				pub type Reactivated = ::core::primitive::u128;
				pub type Deactivated = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for UpdatedInactive {
				const PALLET: &'static str = "Treasury";
				const EVENT: &'static str = "UpdatedInactive";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod proposal_count {
					use super::runtime_types;
					pub type ProposalCount = ::core::primitive::u32;
				}
				pub mod proposals {
					use super::runtime_types;
					pub type Proposals = runtime_types::pallet_treasury::Proposal<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u128,
					>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod deactivated {
					use super::runtime_types;
					pub type Deactivated = ::core::primitive::u128;
				}
				pub mod approvals {
					use super::runtime_types;
					pub type Approvals =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u32,
						>;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Number of proposals that have been made."]
				pub fn proposal_count(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::proposal_count::ProposalCount,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Treasury",
						"ProposalCount",
						(),
						[
							91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
							216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
							29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
						],
					)
				}
				#[doc = " Proposals that have been made."]
				pub fn proposals_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::proposals::Proposals,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Treasury",
						"Proposals",
						(),
						[
							207u8, 135u8, 145u8, 146u8, 48u8, 10u8, 252u8, 40u8, 20u8, 115u8,
							205u8, 41u8, 173u8, 83u8, 115u8, 46u8, 106u8, 40u8, 130u8, 157u8,
							213u8, 87u8, 45u8, 23u8, 14u8, 167u8, 99u8, 208u8, 153u8, 163u8, 141u8,
							55u8,
						],
					)
				}
				#[doc = " Proposals that have been made."]
				pub fn proposals(
					&self,
					_0: impl ::core::borrow::Borrow<types::proposals::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::proposals::Param0,
					>,
					types::proposals::Proposals,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Treasury",
						"Proposals",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							207u8, 135u8, 145u8, 146u8, 48u8, 10u8, 252u8, 40u8, 20u8, 115u8,
							205u8, 41u8, 173u8, 83u8, 115u8, 46u8, 106u8, 40u8, 130u8, 157u8,
							213u8, 87u8, 45u8, 23u8, 14u8, 167u8, 99u8, 208u8, 153u8, 163u8, 141u8,
							55u8,
						],
					)
				}
				#[doc = " The amount which has been reported as inactive to Currency."]
				pub fn deactivated(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::deactivated::Deactivated,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Treasury",
						"Deactivated",
						(),
						[
							120u8, 221u8, 159u8, 56u8, 161u8, 44u8, 54u8, 233u8, 47u8, 114u8,
							170u8, 150u8, 52u8, 24u8, 137u8, 212u8, 122u8, 247u8, 40u8, 17u8,
							208u8, 130u8, 42u8, 154u8, 33u8, 222u8, 59u8, 116u8, 0u8, 15u8, 79u8,
							123u8,
						],
					)
				}
				#[doc = " Proposal indices that have been approved but not yet awarded."]
				pub fn approvals(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::approvals::Approvals,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Treasury",
						"Approvals",
						(),
						[
							78u8, 147u8, 186u8, 235u8, 17u8, 40u8, 247u8, 235u8, 67u8, 222u8, 3u8,
							14u8, 248u8, 17u8, 67u8, 180u8, 93u8, 161u8, 64u8, 35u8, 119u8, 194u8,
							187u8, 226u8, 135u8, 162u8, 147u8, 174u8, 139u8, 72u8, 99u8, 212u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Fraction of a proposal's value that should be bonded in order to place the proposal."]
				#[doc = " An accepted proposal gets these back. A rejected proposal does not."]
				pub fn proposal_bond(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::sp_arithmetic::per_things::Permill,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Treasury",
						"ProposalBond",
						[
							65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
							114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
							200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
						],
					)
				}
				#[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
				pub fn proposal_bond_minimum(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Treasury",
						"ProposalBondMinimum",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
				pub fn proposal_bond_maximum(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::option::Option<::core::primitive::u128>,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Treasury",
						"ProposalBondMaximum",
						[
							198u8, 51u8, 89u8, 159u8, 124u8, 251u8, 51u8, 80u8, 167u8, 193u8, 44u8,
							199u8, 80u8, 36u8, 41u8, 130u8, 137u8, 229u8, 178u8, 208u8, 37u8,
							215u8, 169u8, 183u8, 180u8, 191u8, 140u8, 240u8, 250u8, 61u8, 42u8,
							147u8,
						],
					)
				}
				#[doc = " Period between successive spends."]
				pub fn spend_period(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Treasury",
						"SpendPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Percentage of spare funds (if any) that are burnt per spend period."]
				pub fn burn(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::sp_arithmetic::per_things::Permill,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Treasury",
						"Burn",
						[
							65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
							114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
							200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
						],
					)
				}
				#[doc = " The treasury's pallet id, used for deriving its sovereign account ID."]
				pub fn pallet_id(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::frame_support::PalletId,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Treasury",
						"PalletId",
						[
							56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
							161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
							129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
						],
					)
				}
				#[doc = " The maximum number of approvals that can wait in the spending queue."]
				#[doc = ""]
				#[doc = " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."]
				pub fn max_approvals(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Treasury",
						"MaxApprovals",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod democracy {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_democracy::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_democracy::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Propose a sensitive action to be taken."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
				#[doc = "have funds to cover the deposit."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The hash of the proposal preimage."]
				#[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
				#[doc = ""]
				#[doc = "Emits `Proposed`."]
				pub struct Propose {
					pub proposal: propose::Proposal,
					#[codec(compact)]
					pub value: propose::Value,
				}
				pub mod propose {
					use super::runtime_types;
					pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::composable_runtime::RuntimeCall,
					>;
					pub type Value = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Propose {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "propose";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Signals agreement with a particular proposal."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
				#[doc = "must have funds to cover the deposit, equal to the original deposit."]
				#[doc = ""]
				#[doc = "- `proposal`: The index of the proposal to second."]
				pub struct Second {
					#[codec(compact)]
					pub proposal: second::Proposal,
				}
				pub mod second {
					use super::runtime_types;
					pub type Proposal = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Second {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "second";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
				#[doc = "otherwise it is a vote to keep the status quo."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `ref_index`: The index of the referendum to vote for."]
				#[doc = "- `vote`: The vote configuration."]
				pub struct Vote {
					#[codec(compact)]
					pub ref_index: vote::RefIndex,
					pub vote: vote::Vote,
				}
				pub mod vote {
					use super::runtime_types;
					pub type RefIndex = ::core::primitive::u32;
					pub type Vote =
						runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Vote {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "vote";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
				#[doc = "referendum."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
				#[doc = ""]
				#[doc = "-`ref_index`: The index of the referendum to cancel."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`."]
				pub struct EmergencyCancel {
					pub ref_index: emergency_cancel::RefIndex,
				}
				pub mod emergency_cancel {
					use super::runtime_types;
					pub type RefIndex = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for EmergencyCancel {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "emergency_cancel";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
				#[doc = "referendum."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
				pub struct ExternalPropose {
					pub proposal: external_propose::Proposal,
				}
				pub mod external_propose {
					use super::runtime_types;
					pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::composable_runtime::RuntimeCall,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ExternalPropose {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "external_propose";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
				#[doc = "an external referendum."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
				#[doc = ""]
				#[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
				#[doc = "pre-scheduled `external_propose` call."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`"]
				pub struct ExternalProposeMajority {
					pub proposal: external_propose_majority::Proposal,
				}
				pub mod external_propose_majority {
					use super::runtime_types;
					pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::composable_runtime::RuntimeCall,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ExternalProposeMajority {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "external_propose_majority";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
				#[doc = "schedule an external referendum."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
				#[doc = ""]
				#[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
				#[doc = "pre-scheduled `external_propose` call."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`"]
				pub struct ExternalProposeDefault {
					pub proposal: external_propose_default::Proposal,
				}
				pub mod external_propose_default {
					use super::runtime_types;
					pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::composable_runtime::RuntimeCall,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ExternalProposeDefault {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "external_propose_default";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
				#[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
				#[doc = "but it is not a majority-carries referendum then it fails."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `FastTrackOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The hash of the current external proposal."]
				#[doc = "- `voting_period`: The period that is allowed for voting on this proposal. Increased to"]
				#[doc = "\tMust be always greater than zero."]
				#[doc = "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`."]
				#[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
				#[doc = "  enacted. This doesn't have a minimum amount."]
				#[doc = ""]
				#[doc = "Emits `Started`."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`"]
				pub struct FastTrack {
					pub proposal_hash: fast_track::ProposalHash,
					pub voting_period: fast_track::VotingPeriod,
					pub delay: fast_track::Delay,
				}
				pub mod fast_track {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
					pub type VotingPeriod = ::core::primitive::u32;
					pub type Delay = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for FastTrack {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "fast_track";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Veto and blacklist the external proposal hash."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `VetoOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
				#[doc = ""]
				#[doc = "Emits `Vetoed`."]
				#[doc = ""]
				#[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
				pub struct VetoExternal {
					pub proposal_hash: veto_external::ProposalHash,
				}
				pub mod veto_external {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for VetoExternal {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "veto_external";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove a referendum."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Root_."]
				#[doc = ""]
				#[doc = "- `ref_index`: The index of the referendum to cancel."]
				#[doc = ""]
				#[doc = "# Weight: `O(1)`."]
				pub struct CancelReferendum {
					#[codec(compact)]
					pub ref_index: cancel_referendum::RefIndex,
				}
				pub mod cancel_referendum {
					use super::runtime_types;
					pub type RefIndex = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelReferendum {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "cancel_referendum";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Delegate the voting power (with some given conviction) of the sending account."]
				#[doc = ""]
				#[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
				#[doc = "time appropriate for the conviction's lock period."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
				#[doc = "  - be delegating already; or"]
				#[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
				#[doc = "    through `reap_vote` or `unvote`)."]
				#[doc = ""]
				#[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
				#[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
				#[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
				#[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
				#[doc = "  be more than the account's current balance."]
				#[doc = ""]
				#[doc = "Emits `Delegated`."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
				#[doc = "  voted on. Weight is charged as if maximum votes."]
				pub struct Delegate {
					pub to: delegate::To,
					pub conviction: delegate::Conviction,
					pub balance: delegate::Balance,
				}
				pub mod delegate {
					use super::runtime_types;
					pub type To = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Conviction = runtime_types::pallet_democracy::conviction::Conviction;
					pub type Balance = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Delegate {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "delegate";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Undelegate the voting power of the sending account."]
				#[doc = ""]
				#[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
				#[doc = "of the conviction with which the delegation was issued."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
				#[doc = "currently delegating."]
				#[doc = ""]
				#[doc = "Emits `Undelegated`."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
				#[doc = "  voted on. Weight is charged as if maximum votes."]
				pub struct Undelegate;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Undelegate {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "undelegate";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Clears all public proposals."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Root_."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`."]
				pub struct ClearPublicProposals;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClearPublicProposals {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "clear_public_proposals";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Unlock tokens that have an expired lock."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `target`: The account to remove the lock on."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` with R number of vote of target."]
				pub struct Unlock {
					pub target: unlock::Target,
				}
				pub mod unlock {
					use super::runtime_types;
					pub type Target = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Unlock {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "unlock";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove a vote for a referendum."]
				#[doc = ""]
				#[doc = "If:"]
				#[doc = "- the referendum was cancelled, or"]
				#[doc = "- the referendum is ongoing, or"]
				#[doc = "- the referendum has ended such that"]
				#[doc = "  - the vote of the account was in opposition to the result; or"]
				#[doc = "  - there was no conviction to the account's vote; or"]
				#[doc = "  - the account made a split vote"]
				#[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
				#[doc = "funds being available."]
				#[doc = ""]
				#[doc = "If, however, the referendum has ended and:"]
				#[doc = "- it finished corresponding to the vote of the account, and"]
				#[doc = "- the account made a standard vote with conviction, and"]
				#[doc = "- the lock period of the conviction is not over"]
				#[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
				#[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
				#[doc = "of both the amount locked and the time is it locked for)."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
				#[doc = "registered for referendum `index`."]
				#[doc = ""]
				#[doc = "- `index`: The index of referendum of the vote to be removed."]
				#[doc = ""]
				#[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
				#[doc = "  Weight is calculated for the maximum number of vote."]
				pub struct RemoveVote {
					pub index: remove_vote::Index,
				}
				pub mod remove_vote {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveVote {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "remove_vote";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove a vote for a referendum."]
				#[doc = ""]
				#[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
				#[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
				#[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
				#[doc = "because the conviction period is over."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
				#[doc = "  referendum `index`."]
				#[doc = "- `index`: The index of referendum of the vote to be removed."]
				#[doc = ""]
				#[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
				#[doc = "  Weight is calculated for the maximum number of vote."]
				pub struct RemoveOtherVote {
					pub target: remove_other_vote::Target,
					pub index: remove_other_vote::Index,
				}
				pub mod remove_other_vote {
					use super::runtime_types;
					pub type Target = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveOtherVote {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "remove_other_vote";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
				#[doc = "proposed again."]
				#[doc = ""]
				#[doc = "If called on a queued public or external proposal, then this will result in it being"]
				#[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
				#[doc = "then it will be cancelled."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
				#[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
				#[doc = "cancelled."]
				#[doc = ""]
				#[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
				#[doc = "  reasonable value)."]
				pub struct Blacklist {
					pub proposal_hash: blacklist::ProposalHash,
					pub maybe_ref_index: blacklist::MaybeRefIndex,
				}
				pub mod blacklist {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
					pub type MaybeRefIndex = ::core::option::Option<::core::primitive::u32>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Blacklist {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "blacklist";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove a proposal."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
				#[doc = ""]
				#[doc = "- `prop_index`: The index of the proposal to cancel."]
				#[doc = ""]
				#[doc = "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"]
				pub struct CancelProposal {
					#[codec(compact)]
					pub prop_index: cancel_proposal::PropIndex,
				}
				pub mod cancel_proposal {
					use super::runtime_types;
					pub type PropIndex = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelProposal {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "cancel_proposal";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set or clear a metadata of a proposal or a referendum."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `origin`: Must correspond to the `MetadataOwner`."]
				#[doc = "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`"]
				#[doc = "      threshold."]
				#[doc = "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`"]
				#[doc = "      threshold."]
				#[doc = "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`"]
				#[doc = "      threshold."]
				#[doc = "    - `Signed` by a creator for a public proposal."]
				#[doc = "    - `Signed` to clear a metadata for a finished referendum."]
				#[doc = "    - `Root` to set a metadata for an ongoing referendum."]
				#[doc = "- `owner`: an identifier of a metadata owner."]
				#[doc = "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."]
				pub struct SetMetadata {
					pub owner: set_metadata::Owner,
					pub maybe_hash: set_metadata::MaybeHash,
				}
				pub mod set_metadata {
					use super::runtime_types;
					pub type Owner = runtime_types::pallet_democracy::types::MetadataOwner;
					pub type MaybeHash =
						::core::option::Option<::subxt::ext::subxt_core::utils::H256>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetMetadata {
					const PALLET: &'static str = "Democracy";
					const CALL: &'static str = "set_metadata";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Propose a sensitive action to be taken."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
				#[doc = "have funds to cover the deposit."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The hash of the proposal preimage."]
				#[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
				#[doc = ""]
				#[doc = "Emits `Proposed`."]
				pub fn propose(
					&self,
					proposal: types::propose::Proposal,
					value: types::propose::Value,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Propose> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"propose",
						types::Propose { proposal, value },
						[
							164u8, 45u8, 183u8, 137u8, 222u8, 27u8, 138u8, 45u8, 20u8, 18u8, 234u8,
							211u8, 52u8, 184u8, 234u8, 222u8, 193u8, 9u8, 160u8, 58u8, 198u8,
							106u8, 236u8, 210u8, 172u8, 34u8, 194u8, 107u8, 135u8, 83u8, 22u8,
							238u8,
						],
					)
				}
				#[doc = "Signals agreement with a particular proposal."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
				#[doc = "must have funds to cover the deposit, equal to the original deposit."]
				#[doc = ""]
				#[doc = "- `proposal`: The index of the proposal to second."]
				pub fn second(
					&self,
					proposal: types::second::Proposal,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Second> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"second",
						types::Second { proposal },
						[
							195u8, 55u8, 178u8, 55u8, 129u8, 64u8, 10u8, 131u8, 217u8, 79u8, 1u8,
							187u8, 73u8, 126u8, 191u8, 221u8, 110u8, 10u8, 13u8, 65u8, 190u8,
							107u8, 21u8, 236u8, 175u8, 130u8, 227u8, 179u8, 173u8, 39u8, 32u8,
							147u8,
						],
					)
				}
				#[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
				#[doc = "otherwise it is a vote to keep the status quo."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `ref_index`: The index of the referendum to vote for."]
				#[doc = "- `vote`: The vote configuration."]
				pub fn vote(
					&self,
					ref_index: types::vote::RefIndex,
					vote: types::vote::Vote,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Vote> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"vote",
						types::Vote { ref_index, vote },
						[
							106u8, 195u8, 229u8, 44u8, 217u8, 214u8, 8u8, 234u8, 175u8, 62u8, 97u8,
							83u8, 193u8, 180u8, 103u8, 26u8, 174u8, 8u8, 2u8, 158u8, 25u8, 122u8,
							203u8, 122u8, 32u8, 14u8, 107u8, 169u8, 43u8, 240u8, 143u8, 103u8,
						],
					)
				}
				#[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
				#[doc = "referendum."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
				#[doc = ""]
				#[doc = "-`ref_index`: The index of the referendum to cancel."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`."]
				pub fn emergency_cancel(
					&self,
					ref_index: types::emergency_cancel::RefIndex,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::EmergencyCancel>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"emergency_cancel",
						types::EmergencyCancel { ref_index },
						[
							82u8, 232u8, 19u8, 158u8, 88u8, 69u8, 96u8, 225u8, 106u8, 253u8, 6u8,
							136u8, 87u8, 0u8, 68u8, 128u8, 122u8, 16u8, 107u8, 76u8, 209u8, 14u8,
							230u8, 49u8, 228u8, 100u8, 187u8, 10u8, 76u8, 71u8, 197u8, 72u8,
						],
					)
				}
				#[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
				#[doc = "referendum."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
				pub fn external_propose(
					&self,
					proposal: types::external_propose::Proposal,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ExternalPropose>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"external_propose",
						types::ExternalPropose { proposal },
						[
							99u8, 120u8, 61u8, 124u8, 244u8, 68u8, 12u8, 240u8, 11u8, 168u8, 4u8,
							50u8, 19u8, 152u8, 255u8, 97u8, 20u8, 195u8, 141u8, 199u8, 31u8, 250u8,
							222u8, 136u8, 47u8, 162u8, 0u8, 32u8, 215u8, 110u8, 94u8, 109u8,
						],
					)
				}
				#[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
				#[doc = "an external referendum."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
				#[doc = ""]
				#[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
				#[doc = "pre-scheduled `external_propose` call."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`"]
				pub fn external_propose_majority(
					&self,
					proposal: types::external_propose_majority::Proposal,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::ExternalProposeMajority,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"external_propose_majority",
						types::ExternalProposeMajority { proposal },
						[
							35u8, 61u8, 130u8, 81u8, 81u8, 180u8, 127u8, 202u8, 67u8, 84u8, 105u8,
							113u8, 112u8, 210u8, 1u8, 191u8, 10u8, 39u8, 157u8, 164u8, 9u8, 231u8,
							75u8, 25u8, 17u8, 175u8, 128u8, 180u8, 238u8, 58u8, 236u8, 214u8,
						],
					)
				}
				#[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
				#[doc = "schedule an external referendum."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
				#[doc = ""]
				#[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
				#[doc = "pre-scheduled `external_propose` call."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`"]
				pub fn external_propose_default(
					&self,
					proposal: types::external_propose_default::Proposal,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::ExternalProposeDefault,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"external_propose_default",
						types::ExternalProposeDefault { proposal },
						[
							136u8, 199u8, 244u8, 69u8, 5u8, 174u8, 166u8, 251u8, 102u8, 196u8,
							25u8, 6u8, 33u8, 216u8, 141u8, 78u8, 118u8, 125u8, 128u8, 218u8, 120u8,
							170u8, 166u8, 15u8, 124u8, 216u8, 128u8, 178u8, 5u8, 74u8, 170u8, 25u8,
						],
					)
				}
				#[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
				#[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
				#[doc = "but it is not a majority-carries referendum then it fails."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `FastTrackOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The hash of the current external proposal."]
				#[doc = "- `voting_period`: The period that is allowed for voting on this proposal. Increased to"]
				#[doc = "\tMust be always greater than zero."]
				#[doc = "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`."]
				#[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
				#[doc = "  enacted. This doesn't have a minimum amount."]
				#[doc = ""]
				#[doc = "Emits `Started`."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`"]
				pub fn fast_track(
					&self,
					proposal_hash: types::fast_track::ProposalHash,
					voting_period: types::fast_track::VotingPeriod,
					delay: types::fast_track::Delay,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::FastTrack> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"fast_track",
						types::FastTrack { proposal_hash, voting_period, delay },
						[
							96u8, 201u8, 216u8, 109u8, 4u8, 244u8, 52u8, 237u8, 120u8, 234u8, 30u8,
							102u8, 186u8, 132u8, 214u8, 22u8, 40u8, 75u8, 118u8, 23u8, 56u8, 68u8,
							192u8, 129u8, 74u8, 61u8, 247u8, 98u8, 103u8, 127u8, 200u8, 171u8,
						],
					)
				}
				#[doc = "Veto and blacklist the external proposal hash."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `VetoOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
				#[doc = ""]
				#[doc = "Emits `Vetoed`."]
				#[doc = ""]
				#[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
				pub fn veto_external(
					&self,
					proposal_hash: types::veto_external::ProposalHash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::VetoExternal> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"veto_external",
						types::VetoExternal { proposal_hash },
						[
							121u8, 217u8, 249u8, 134u8, 45u8, 19u8, 126u8, 166u8, 218u8, 223u8,
							165u8, 124u8, 162u8, 59u8, 56u8, 200u8, 227u8, 125u8, 23u8, 133u8,
							196u8, 93u8, 210u8, 15u8, 39u8, 26u8, 58u8, 236u8, 9u8, 101u8, 202u8,
							168u8,
						],
					)
				}
				#[doc = "Remove a referendum."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Root_."]
				#[doc = ""]
				#[doc = "- `ref_index`: The index of the referendum to cancel."]
				#[doc = ""]
				#[doc = "# Weight: `O(1)`."]
				pub fn cancel_referendum(
					&self,
					ref_index: types::cancel_referendum::RefIndex,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelReferendum>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"cancel_referendum",
						types::CancelReferendum { ref_index },
						[
							149u8, 120u8, 70u8, 20u8, 126u8, 21u8, 30u8, 33u8, 82u8, 124u8, 229u8,
							179u8, 169u8, 243u8, 173u8, 146u8, 140u8, 22u8, 124u8, 154u8, 228u8,
							117u8, 109u8, 88u8, 11u8, 100u8, 235u8, 243u8, 118u8, 99u8, 250u8,
							140u8,
						],
					)
				}
				#[doc = "Delegate the voting power (with some given conviction) of the sending account."]
				#[doc = ""]
				#[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
				#[doc = "time appropriate for the conviction's lock period."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
				#[doc = "  - be delegating already; or"]
				#[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
				#[doc = "    through `reap_vote` or `unvote`)."]
				#[doc = ""]
				#[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
				#[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
				#[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
				#[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
				#[doc = "  be more than the account's current balance."]
				#[doc = ""]
				#[doc = "Emits `Delegated`."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
				#[doc = "  voted on. Weight is charged as if maximum votes."]
				pub fn delegate(
					&self,
					to: types::delegate::To,
					conviction: types::delegate::Conviction,
					balance: types::delegate::Balance,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Delegate> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"delegate",
						types::Delegate { to, conviction, balance },
						[
							98u8, 204u8, 103u8, 220u8, 240u8, 72u8, 17u8, 89u8, 31u8, 234u8, 53u8,
							234u8, 85u8, 150u8, 42u8, 130u8, 14u8, 164u8, 148u8, 103u8, 199u8,
							230u8, 119u8, 192u8, 95u8, 200u8, 10u8, 214u8, 48u8, 252u8, 64u8, 45u8,
						],
					)
				}
				#[doc = "Undelegate the voting power of the sending account."]
				#[doc = ""]
				#[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
				#[doc = "of the conviction with which the delegation was issued."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
				#[doc = "currently delegating."]
				#[doc = ""]
				#[doc = "Emits `Undelegated`."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
				#[doc = "  voted on. Weight is charged as if maximum votes."]
				pub fn undelegate(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Undelegate> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"undelegate",
						types::Undelegate {},
						[
							225u8, 156u8, 102u8, 1u8, 172u8, 145u8, 88u8, 12u8, 89u8, 32u8, 51u8,
							83u8, 25u8, 149u8, 132u8, 203u8, 246u8, 98u8, 155u8, 36u8, 165u8,
							206u8, 233u8, 169u8, 91u8, 85u8, 105u8, 67u8, 46u8, 134u8, 244u8,
							250u8,
						],
					)
				}
				#[doc = "Clears all public proposals."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Root_."]
				#[doc = ""]
				#[doc = "Weight: `O(1)`."]
				pub fn clear_public_proposals(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClearPublicProposals>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"clear_public_proposals",
						types::ClearPublicProposals {},
						[
							116u8, 160u8, 246u8, 216u8, 23u8, 188u8, 144u8, 63u8, 97u8, 198u8,
							11u8, 243u8, 165u8, 84u8, 159u8, 153u8, 235u8, 169u8, 166u8, 15u8,
							23u8, 116u8, 30u8, 56u8, 133u8, 31u8, 158u8, 114u8, 158u8, 86u8, 106u8,
							93u8,
						],
					)
				}
				#[doc = "Unlock tokens that have an expired lock."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `target`: The account to remove the lock on."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` with R number of vote of target."]
				pub fn unlock(
					&self,
					target: types::unlock::Target,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Unlock> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"unlock",
						types::Unlock { target },
						[
							116u8, 108u8, 113u8, 20u8, 39u8, 227u8, 153u8, 96u8, 178u8, 223u8,
							155u8, 95u8, 111u8, 168u8, 169u8, 32u8, 230u8, 125u8, 119u8, 162u8,
							8u8, 40u8, 57u8, 237u8, 22u8, 160u8, 100u8, 203u8, 247u8, 20u8, 251u8,
							99u8,
						],
					)
				}
				#[doc = "Remove a vote for a referendum."]
				#[doc = ""]
				#[doc = "If:"]
				#[doc = "- the referendum was cancelled, or"]
				#[doc = "- the referendum is ongoing, or"]
				#[doc = "- the referendum has ended such that"]
				#[doc = "  - the vote of the account was in opposition to the result; or"]
				#[doc = "  - there was no conviction to the account's vote; or"]
				#[doc = "  - the account made a split vote"]
				#[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
				#[doc = "funds being available."]
				#[doc = ""]
				#[doc = "If, however, the referendum has ended and:"]
				#[doc = "- it finished corresponding to the vote of the account, and"]
				#[doc = "- the account made a standard vote with conviction, and"]
				#[doc = "- the lock period of the conviction is not over"]
				#[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
				#[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
				#[doc = "of both the amount locked and the time is it locked for)."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
				#[doc = "registered for referendum `index`."]
				#[doc = ""]
				#[doc = "- `index`: The index of referendum of the vote to be removed."]
				#[doc = ""]
				#[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
				#[doc = "  Weight is calculated for the maximum number of vote."]
				pub fn remove_vote(
					&self,
					index: types::remove_vote::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveVote> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"remove_vote",
						types::RemoveVote { index },
						[
							98u8, 146u8, 215u8, 63u8, 222u8, 70u8, 61u8, 186u8, 90u8, 34u8, 63u8,
							25u8, 195u8, 119u8, 228u8, 189u8, 38u8, 163u8, 58u8, 210u8, 216u8,
							156u8, 20u8, 204u8, 136u8, 192u8, 33u8, 210u8, 124u8, 65u8, 153u8,
							105u8,
						],
					)
				}
				#[doc = "Remove a vote for a referendum."]
				#[doc = ""]
				#[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
				#[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
				#[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
				#[doc = "because the conviction period is over."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
				#[doc = "  referendum `index`."]
				#[doc = "- `index`: The index of referendum of the vote to be removed."]
				#[doc = ""]
				#[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
				#[doc = "  Weight is calculated for the maximum number of vote."]
				pub fn remove_other_vote(
					&self,
					target: types::remove_other_vote::Target,
					index: types::remove_other_vote::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveOtherVote>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"remove_other_vote",
						types::RemoveOtherVote { target, index },
						[
							71u8, 148u8, 41u8, 68u8, 78u8, 40u8, 128u8, 217u8, 49u8, 83u8, 128u8,
							13u8, 225u8, 24u8, 41u8, 69u8, 119u8, 229u8, 241u8, 178u8, 20u8, 91u8,
							1u8, 180u8, 113u8, 127u8, 8u8, 2u8, 233u8, 174u8, 192u8, 140u8,
						],
					)
				}
				#[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
				#[doc = "proposed again."]
				#[doc = ""]
				#[doc = "If called on a queued public or external proposal, then this will result in it being"]
				#[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
				#[doc = "then it will be cancelled."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
				#[doc = ""]
				#[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
				#[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
				#[doc = "cancelled."]
				#[doc = ""]
				#[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
				#[doc = "  reasonable value)."]
				pub fn blacklist(
					&self,
					proposal_hash: types::blacklist::ProposalHash,
					maybe_ref_index: types::blacklist::MaybeRefIndex,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Blacklist> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"blacklist",
						types::Blacklist { proposal_hash, maybe_ref_index },
						[
							227u8, 200u8, 88u8, 154u8, 134u8, 121u8, 131u8, 177u8, 94u8, 119u8,
							12u8, 129u8, 150u8, 59u8, 108u8, 103u8, 109u8, 55u8, 220u8, 211u8,
							250u8, 103u8, 160u8, 170u8, 63u8, 142u8, 112u8, 244u8, 29u8, 238u8,
							101u8, 24u8,
						],
					)
				}
				#[doc = "Remove a proposal."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
				#[doc = ""]
				#[doc = "- `prop_index`: The index of the proposal to cancel."]
				#[doc = ""]
				#[doc = "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"]
				pub fn cancel_proposal(
					&self,
					prop_index: types::cancel_proposal::PropIndex,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelProposal>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"cancel_proposal",
						types::CancelProposal { prop_index },
						[
							213u8, 5u8, 215u8, 209u8, 71u8, 229u8, 66u8, 38u8, 171u8, 38u8, 14u8,
							103u8, 248u8, 176u8, 217u8, 143u8, 234u8, 89u8, 110u8, 250u8, 3u8,
							190u8, 151u8, 74u8, 55u8, 58u8, 249u8, 138u8, 25u8, 191u8, 55u8, 142u8,
						],
					)
				}
				#[doc = "Set or clear a metadata of a proposal or a referendum."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `origin`: Must correspond to the `MetadataOwner`."]
				#[doc = "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`"]
				#[doc = "      threshold."]
				#[doc = "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`"]
				#[doc = "      threshold."]
				#[doc = "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`"]
				#[doc = "      threshold."]
				#[doc = "    - `Signed` by a creator for a public proposal."]
				#[doc = "    - `Signed` to clear a metadata for a finished referendum."]
				#[doc = "    - `Root` to set a metadata for an ongoing referendum."]
				#[doc = "- `owner`: an identifier of a metadata owner."]
				#[doc = "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."]
				pub fn set_metadata(
					&self,
					owner: types::set_metadata::Owner,
					maybe_hash: types::set_metadata::MaybeHash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetMetadata> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Democracy",
						"set_metadata",
						types::SetMetadata { owner, maybe_hash },
						[
							191u8, 200u8, 139u8, 27u8, 167u8, 250u8, 72u8, 78u8, 18u8, 98u8, 108u8,
							1u8, 122u8, 120u8, 47u8, 77u8, 174u8, 60u8, 247u8, 69u8, 228u8, 196u8,
							149u8, 107u8, 239u8, 45u8, 47u8, 118u8, 87u8, 233u8, 79u8, 29u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_democracy::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion has been proposed by a public account."]
			pub struct Proposed {
				pub proposal_index: proposed::ProposalIndex,
				pub deposit: proposed::Deposit,
			}
			pub mod proposed {
				use super::runtime_types;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type Deposit = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Proposed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A public proposal has been tabled for referendum vote."]
			pub struct Tabled {
				pub proposal_index: tabled::ProposalIndex,
				pub deposit: tabled::Deposit,
			}
			pub mod tabled {
				use super::runtime_types;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type Deposit = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Tabled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Tabled";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An external proposal has been tabled."]
			pub struct ExternalTabled;
			impl ::subxt::ext::subxt_core::events::StaticEvent for ExternalTabled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "ExternalTabled";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A referendum has begun."]
			pub struct Started {
				pub ref_index: started::RefIndex,
				pub threshold: started::Threshold,
			}
			pub mod started {
				use super::runtime_types;
				pub type RefIndex = ::core::primitive::u32;
				pub type Threshold = runtime_types::pallet_democracy::vote_threshold::VoteThreshold;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Started {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Started";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A proposal has been approved by referendum."]
			pub struct Passed {
				pub ref_index: passed::RefIndex,
			}
			pub mod passed {
				use super::runtime_types;
				pub type RefIndex = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Passed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Passed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A proposal has been rejected by referendum."]
			pub struct NotPassed {
				pub ref_index: not_passed::RefIndex,
			}
			pub mod not_passed {
				use super::runtime_types;
				pub type RefIndex = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NotPassed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "NotPassed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A referendum has been cancelled."]
			pub struct Cancelled {
				pub ref_index: cancelled::RefIndex,
			}
			pub mod cancelled {
				use super::runtime_types;
				pub type RefIndex = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Cancelled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Cancelled";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An account has delegated their vote to another account."]
			pub struct Delegated {
				pub who: delegated::Who,
				pub target: delegated::Target,
			}
			pub mod delegated {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Target = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Delegated {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Delegated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An account has cancelled a previous delegation operation."]
			pub struct Undelegated {
				pub account: undelegated::Account,
			}
			pub mod undelegated {
				use super::runtime_types;
				pub type Account = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Undelegated {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Undelegated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An external proposal has been vetoed."]
			pub struct Vetoed {
				pub who: vetoed::Who,
				pub proposal_hash: vetoed::ProposalHash,
				pub until: vetoed::Until,
			}
			pub mod vetoed {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Until = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Vetoed {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Vetoed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A proposal_hash has been blacklisted permanently."]
			pub struct Blacklisted {
				pub proposal_hash: blacklisted::ProposalHash,
			}
			pub mod blacklisted {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Blacklisted {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Blacklisted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An account has voted in a referendum"]
			pub struct Voted {
				pub voter: voted::Voter,
				pub ref_index: voted::RefIndex,
				pub vote: voted::Vote,
			}
			pub mod voted {
				use super::runtime_types;
				pub type Voter = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type RefIndex = ::core::primitive::u32;
				pub type Vote =
					runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Voted {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An account has secconded a proposal"]
			pub struct Seconded {
				pub seconder: seconded::Seconder,
				pub prop_index: seconded::PropIndex,
			}
			pub mod seconded {
				use super::runtime_types;
				pub type Seconder = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type PropIndex = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Seconded {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "Seconded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A proposal got canceled."]
			pub struct ProposalCanceled {
				pub prop_index: proposal_canceled::PropIndex,
			}
			pub mod proposal_canceled {
				use super::runtime_types;
				pub type PropIndex = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ProposalCanceled {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "ProposalCanceled";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Metadata for a proposal or a referendum has been set."]
			pub struct MetadataSet {
				pub owner: metadata_set::Owner,
				pub hash: metadata_set::Hash,
			}
			pub mod metadata_set {
				use super::runtime_types;
				pub type Owner = runtime_types::pallet_democracy::types::MetadataOwner;
				pub type Hash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for MetadataSet {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "MetadataSet";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Metadata for a proposal or a referendum has been cleared."]
			pub struct MetadataCleared {
				pub owner: metadata_cleared::Owner,
				pub hash: metadata_cleared::Hash,
			}
			pub mod metadata_cleared {
				use super::runtime_types;
				pub type Owner = runtime_types::pallet_democracy::types::MetadataOwner;
				pub type Hash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for MetadataCleared {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "MetadataCleared";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Metadata has been transferred to new owner."]
			pub struct MetadataTransferred {
				pub prev_owner: metadata_transferred::PrevOwner,
				pub owner: metadata_transferred::Owner,
				pub hash: metadata_transferred::Hash,
			}
			pub mod metadata_transferred {
				use super::runtime_types;
				pub type PrevOwner = runtime_types::pallet_democracy::types::MetadataOwner;
				pub type Owner = runtime_types::pallet_democracy::types::MetadataOwner;
				pub type Hash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for MetadataTransferred {
				const PALLET: &'static str = "Democracy";
				const EVENT: &'static str = "MetadataTransferred";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod public_prop_count {
					use super::runtime_types;
					pub type PublicPropCount = ::core::primitive::u32;
				}
				pub mod public_props {
					use super::runtime_types;
					pub type PublicProps =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							::core::primitive::u32,
							runtime_types::frame_support::traits::preimages::Bounded<
								runtime_types::composable_runtime::RuntimeCall,
							>,
							::subxt::ext::subxt_core::utils::AccountId32,
						)>;
				}
				pub mod deposit_of {
					use super::runtime_types;
					pub type DepositOf = (
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
						::core::primitive::u128,
					);
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod referendum_count {
					use super::runtime_types;
					pub type ReferendumCount = ::core::primitive::u32;
				}
				pub mod lowest_unbaked {
					use super::runtime_types;
					pub type LowestUnbaked = ::core::primitive::u32;
				}
				pub mod referendum_info_of {
					use super::runtime_types;
					pub type ReferendumInfoOf =
						runtime_types::pallet_democracy::types::ReferendumInfo<
							::core::primitive::u32,
							runtime_types::frame_support::traits::preimages::Bounded<
								runtime_types::composable_runtime::RuntimeCall,
							>,
							::core::primitive::u128,
						>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod voting_of {
					use super::runtime_types;
					pub type VotingOf = runtime_types::pallet_democracy::vote::Voting<
						::core::primitive::u128,
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod last_tabled_was_external {
					use super::runtime_types;
					pub type LastTabledWasExternal = ::core::primitive::bool;
				}
				pub mod next_external {
					use super::runtime_types;
					pub type NextExternal = (
						runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::composable_runtime::RuntimeCall,
						>,
						runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
					);
				}
				pub mod blacklist {
					use super::runtime_types;
					pub type Blacklist = (
						::core::primitive::u32,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
					);
					pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
				}
				pub mod cancellations {
					use super::runtime_types;
					pub type Cancellations = ::core::primitive::bool;
					pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
				}
				pub mod metadata_of {
					use super::runtime_types;
					pub type MetadataOf = ::subxt::ext::subxt_core::utils::H256;
					pub type Param0 = runtime_types::pallet_democracy::types::MetadataOwner;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The number of (public) proposals that have been made so far."]
				pub fn public_prop_count(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::public_prop_count::PublicPropCount,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"PublicPropCount",
						(),
						[
							51u8, 175u8, 184u8, 94u8, 91u8, 212u8, 100u8, 108u8, 127u8, 162u8,
							233u8, 137u8, 12u8, 209u8, 29u8, 130u8, 125u8, 179u8, 208u8, 160u8,
							173u8, 149u8, 12u8, 111u8, 1u8, 82u8, 196u8, 137u8, 51u8, 204u8, 153u8,
							198u8,
						],
					)
				}
				#[doc = " The public proposals. Unsorted. The second item is the proposal."]
				pub fn public_props(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::public_props::PublicProps,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"PublicProps",
						(),
						[
							174u8, 85u8, 209u8, 117u8, 29u8, 193u8, 230u8, 16u8, 94u8, 219u8, 69u8,
							29u8, 116u8, 35u8, 252u8, 43u8, 127u8, 0u8, 43u8, 218u8, 240u8, 176u8,
							73u8, 81u8, 207u8, 131u8, 227u8, 132u8, 242u8, 45u8, 172u8, 50u8,
						],
					)
				}
				#[doc = " Those who have locked a deposit."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
				pub fn deposit_of_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::deposit_of::DepositOf,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"DepositOf",
						(),
						[
							115u8, 12u8, 250u8, 191u8, 201u8, 165u8, 90u8, 140u8, 101u8, 47u8,
							46u8, 3u8, 78u8, 30u8, 180u8, 22u8, 28u8, 154u8, 36u8, 99u8, 255u8,
							84u8, 33u8, 21u8, 65u8, 110u8, 52u8, 245u8, 19u8, 6u8, 104u8, 167u8,
						],
					)
				}
				#[doc = " Those who have locked a deposit."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
				pub fn deposit_of(
					&self,
					_0: impl ::core::borrow::Borrow<types::deposit_of::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::deposit_of::Param0,
					>,
					types::deposit_of::DepositOf,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"DepositOf",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							115u8, 12u8, 250u8, 191u8, 201u8, 165u8, 90u8, 140u8, 101u8, 47u8,
							46u8, 3u8, 78u8, 30u8, 180u8, 22u8, 28u8, 154u8, 36u8, 99u8, 255u8,
							84u8, 33u8, 21u8, 65u8, 110u8, 52u8, 245u8, 19u8, 6u8, 104u8, 167u8,
						],
					)
				}
				#[doc = " The next free referendum index, aka the number of referenda started so far."]
				pub fn referendum_count(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::referendum_count::ReferendumCount,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"ReferendumCount",
						(),
						[
							64u8, 145u8, 232u8, 153u8, 121u8, 87u8, 128u8, 253u8, 170u8, 192u8,
							139u8, 18u8, 0u8, 33u8, 243u8, 11u8, 238u8, 222u8, 244u8, 5u8, 247u8,
							198u8, 149u8, 31u8, 122u8, 208u8, 86u8, 179u8, 166u8, 167u8, 93u8,
							67u8,
						],
					)
				}
				#[doc = " The lowest referendum index representing an unbaked referendum. Equal to"]
				#[doc = " `ReferendumCount` if there isn't a unbaked referendum."]
				pub fn lowest_unbaked(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::lowest_unbaked::LowestUnbaked,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"LowestUnbaked",
						(),
						[
							237u8, 222u8, 144u8, 214u8, 0u8, 186u8, 81u8, 176u8, 51u8, 14u8, 204u8,
							184u8, 147u8, 97u8, 187u8, 84u8, 40u8, 8u8, 86u8, 241u8, 16u8, 157u8,
							202u8, 44u8, 185u8, 111u8, 70u8, 114u8, 40u8, 135u8, 1u8, 155u8,
						],
					)
				}
				#[doc = " Information concerning any given referendum."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
				pub fn referendum_info_of_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::referendum_info_of::ReferendumInfoOf,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"ReferendumInfoOf",
						(),
						[
							245u8, 152u8, 149u8, 236u8, 59u8, 164u8, 120u8, 142u8, 130u8, 25u8,
							119u8, 158u8, 103u8, 140u8, 203u8, 213u8, 110u8, 151u8, 137u8, 226u8,
							186u8, 130u8, 233u8, 245u8, 145u8, 145u8, 140u8, 54u8, 222u8, 219u8,
							234u8, 206u8,
						],
					)
				}
				#[doc = " Information concerning any given referendum."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
				pub fn referendum_info_of(
					&self,
					_0: impl ::core::borrow::Borrow<types::referendum_info_of::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::referendum_info_of::Param0,
					>,
					types::referendum_info_of::ReferendumInfoOf,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"ReferendumInfoOf",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							245u8, 152u8, 149u8, 236u8, 59u8, 164u8, 120u8, 142u8, 130u8, 25u8,
							119u8, 158u8, 103u8, 140u8, 203u8, 213u8, 110u8, 151u8, 137u8, 226u8,
							186u8, 130u8, 233u8, 245u8, 145u8, 145u8, 140u8, 54u8, 222u8, 219u8,
							234u8, 206u8,
						],
					)
				}
				#[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
				#[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
				pub fn voting_of_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::voting_of::VotingOf,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"VotingOf",
						(),
						[
							234u8, 35u8, 206u8, 197u8, 17u8, 251u8, 1u8, 230u8, 80u8, 235u8, 108u8,
							126u8, 82u8, 145u8, 39u8, 104u8, 209u8, 16u8, 209u8, 52u8, 165u8,
							231u8, 110u8, 92u8, 113u8, 212u8, 72u8, 57u8, 60u8, 73u8, 107u8, 118u8,
						],
					)
				}
				#[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
				#[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
				#[doc = ""]
				#[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
				pub fn voting_of(
					&self,
					_0: impl ::core::borrow::Borrow<types::voting_of::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::voting_of::Param0,
					>,
					types::voting_of::VotingOf,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"VotingOf",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							234u8, 35u8, 206u8, 197u8, 17u8, 251u8, 1u8, 230u8, 80u8, 235u8, 108u8,
							126u8, 82u8, 145u8, 39u8, 104u8, 209u8, 16u8, 209u8, 52u8, 165u8,
							231u8, 110u8, 92u8, 113u8, 212u8, 72u8, 57u8, 60u8, 73u8, 107u8, 118u8,
						],
					)
				}
				#[doc = " True if the last referendum tabled was submitted externally. False if it was a public"]
				#[doc = " proposal."]
				pub fn last_tabled_was_external(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::last_tabled_was_external::LastTabledWasExternal,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"LastTabledWasExternal",
						(),
						[
							162u8, 201u8, 72u8, 9u8, 78u8, 49u8, 72u8, 62u8, 240u8, 69u8, 20u8,
							135u8, 26u8, 59u8, 71u8, 46u8, 19u8, 25u8, 195u8, 11u8, 99u8, 31u8,
							104u8, 4u8, 24u8, 129u8, 47u8, 69u8, 219u8, 178u8, 104u8, 190u8,
						],
					)
				}
				#[doc = " The referendum to be tabled whenever it would be valid to table an external proposal."]
				#[doc = " This happens when a referendum needs to be tabled and one of two conditions are met:"]
				#[doc = " - `LastTabledWasExternal` is `false`; or"]
				#[doc = " - `PublicProps` is empty."]
				pub fn next_external(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::next_external::NextExternal,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"NextExternal",
						(),
						[
							240u8, 58u8, 238u8, 86u8, 35u8, 48u8, 192u8, 51u8, 91u8, 4u8, 47u8,
							202u8, 21u8, 74u8, 158u8, 64u8, 107u8, 247u8, 248u8, 240u8, 122u8,
							109u8, 204u8, 180u8, 103u8, 239u8, 156u8, 68u8, 141u8, 253u8, 131u8,
							239u8,
						],
					)
				}
				#[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
				#[doc = " (until when it may not be resubmitted) and who vetoed it."]
				pub fn blacklist_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::blacklist::Blacklist,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"Blacklist",
						(),
						[
							12u8, 231u8, 204u8, 151u8, 57u8, 182u8, 5u8, 74u8, 231u8, 100u8, 165u8,
							28u8, 147u8, 109u8, 119u8, 37u8, 138u8, 159u8, 7u8, 175u8, 41u8, 110u8,
							205u8, 69u8, 17u8, 9u8, 39u8, 102u8, 90u8, 244u8, 165u8, 141u8,
						],
					)
				}
				#[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
				#[doc = " (until when it may not be resubmitted) and who vetoed it."]
				pub fn blacklist(
					&self,
					_0: impl ::core::borrow::Borrow<types::blacklist::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::blacklist::Param0,
					>,
					types::blacklist::Blacklist,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"Blacklist",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							12u8, 231u8, 204u8, 151u8, 57u8, 182u8, 5u8, 74u8, 231u8, 100u8, 165u8,
							28u8, 147u8, 109u8, 119u8, 37u8, 138u8, 159u8, 7u8, 175u8, 41u8, 110u8,
							205u8, 69u8, 17u8, 9u8, 39u8, 102u8, 90u8, 244u8, 165u8, 141u8,
						],
					)
				}
				#[doc = " Record of all proposals that have been subject to emergency cancellation."]
				pub fn cancellations_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::cancellations::Cancellations,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"Cancellations",
						(),
						[
							80u8, 190u8, 98u8, 105u8, 129u8, 25u8, 167u8, 180u8, 74u8, 128u8,
							232u8, 29u8, 193u8, 209u8, 185u8, 60u8, 18u8, 180u8, 59u8, 192u8,
							149u8, 13u8, 123u8, 232u8, 34u8, 208u8, 48u8, 104u8, 35u8, 181u8,
							186u8, 244u8,
						],
					)
				}
				#[doc = " Record of all proposals that have been subject to emergency cancellation."]
				pub fn cancellations(
					&self,
					_0: impl ::core::borrow::Borrow<types::cancellations::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::cancellations::Param0,
					>,
					types::cancellations::Cancellations,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"Cancellations",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							80u8, 190u8, 98u8, 105u8, 129u8, 25u8, 167u8, 180u8, 74u8, 128u8,
							232u8, 29u8, 193u8, 209u8, 185u8, 60u8, 18u8, 180u8, 59u8, 192u8,
							149u8, 13u8, 123u8, 232u8, 34u8, 208u8, 48u8, 104u8, 35u8, 181u8,
							186u8, 244u8,
						],
					)
				}
				#[doc = " General information concerning any proposal or referendum."]
				#[doc = " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"]
				#[doc = " dump or IPFS hash of a JSON file."]
				#[doc = ""]
				#[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
				#[doc = " large preimages."]
				pub fn metadata_of_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::metadata_of::MetadataOf,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"MetadataOf",
						(),
						[
							52u8, 151u8, 124u8, 110u8, 85u8, 173u8, 181u8, 86u8, 174u8, 183u8,
							102u8, 22u8, 8u8, 36u8, 224u8, 114u8, 98u8, 0u8, 220u8, 215u8, 19u8,
							147u8, 32u8, 238u8, 242u8, 187u8, 235u8, 163u8, 183u8, 235u8, 9u8,
							180u8,
						],
					)
				}
				#[doc = " General information concerning any proposal or referendum."]
				#[doc = " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"]
				#[doc = " dump or IPFS hash of a JSON file."]
				#[doc = ""]
				#[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
				#[doc = " large preimages."]
				pub fn metadata_of(
					&self,
					_0: impl ::core::borrow::Borrow<types::metadata_of::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::metadata_of::Param0,
					>,
					types::metadata_of::MetadataOf,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Democracy",
						"MetadataOf",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							52u8, 151u8, 124u8, 110u8, 85u8, 173u8, 181u8, 86u8, 174u8, 183u8,
							102u8, 22u8, 8u8, 36u8, 224u8, 114u8, 98u8, 0u8, 220u8, 215u8, 19u8,
							147u8, 32u8, 238u8, 242u8, 187u8, 235u8, 163u8, 183u8, 235u8, 9u8,
							180u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The period between a proposal being approved and enacted."]
				#[doc = ""]
				#[doc = " It should generally be a little more than the unstake period to ensure that"]
				#[doc = " voting stakers have an opportunity to remove themselves from the system in the case"]
				#[doc = " where they are on the losing side of a vote."]
				pub fn enactment_period(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Democracy",
						"EnactmentPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " How often (in blocks) new public referenda are launched."]
				pub fn launch_period(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Democracy",
						"LaunchPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " How often (in blocks) to check for new votes."]
				pub fn voting_period(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Democracy",
						"VotingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The minimum period of vote locking."]
				#[doc = ""]
				#[doc = " It should be no shorter than enactment period to ensure that in the case of an approval,"]
				#[doc = " those successful voters are locked into the consequences that their votes entail."]
				pub fn vote_locking_period(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Democracy",
						"VoteLockingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
				pub fn minimum_deposit(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Democracy",
						"MinimumDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Indicator for whether an emergency origin is even allowed to happen. Some chains may"]
				#[doc = " want to set this permanently to `false`, others may want to condition it on things such"]
				#[doc = " as an upgrade having happened recently."]
				pub fn instant_allowed(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::bool,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Democracy",
						"InstantAllowed",
						[
							165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
							252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
							100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
						],
					)
				}
				#[doc = " Minimum voting period allowed for a fast-track referendum."]
				pub fn fast_track_voting_period(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Democracy",
						"FastTrackVotingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Period in blocks where an external proposal may not be re-submitted after being vetoed."]
				pub fn cooloff_period(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Democracy",
						"CooloffPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of votes for an account."]
				#[doc = ""]
				#[doc = " Also used to compute weight, an overly big value can"]
				#[doc = " lead to extrinsic with very big weight: see `delegate` for instance."]
				pub fn max_votes(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Democracy",
						"MaxVotes",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of public proposals that can exist at any time."]
				pub fn max_proposals(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Democracy",
						"MaxProposals",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of deposits a public proposal may have at any time."]
				pub fn max_deposits(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Democracy",
						"MaxDeposits",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of items which can be blacklisted."]
				pub fn max_blacklisted(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Democracy",
						"MaxBlacklisted",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod technical_committee {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_collective::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_collective::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the collective's membership."]
				#[doc = ""]
				#[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
				#[doc = "- `prime`: The prime member whose vote sets the default."]
				#[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
				#[doc = "  weight estimation."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `SetMembersOrigin`."]
				#[doc = ""]
				#[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
				#[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
				#[doc = ""]
				#[doc = "# WARNING:"]
				#[doc = ""]
				#[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
				#[doc = "implementation of the trait [`ChangeMembers`]."]
				#[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
				#[doc = "with other logic managing the member set."]
				#[doc = ""]
				#[doc = "## Complexity:"]
				#[doc = "- `O(MP + N)` where:"]
				#[doc = "  - `M` old-members-count (code- and governance-bounded)"]
				#[doc = "  - `N` new-members-count (code- and governance-bounded)"]
				#[doc = "  - `P` proposals-count (code-bounded)"]
				pub struct SetMembers {
					pub new_members: set_members::NewMembers,
					pub prime: set_members::Prime,
					pub old_count: set_members::OldCount,
				}
				pub mod set_members {
					use super::runtime_types;
					pub type NewMembers = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
					pub type Prime =
						::core::option::Option<::subxt::ext::subxt_core::utils::AccountId32>;
					pub type OldCount = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetMembers {
					const PALLET: &'static str = "TechnicalCommittee";
					const CALL: &'static str = "set_members";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Dispatch a proposal from a member using the `Member` origin."]
				#[doc = ""]
				#[doc = "Origin must be a member of the collective."]
				#[doc = ""]
				#[doc = "## Complexity:"]
				#[doc = "- `O(B + M + P)` where:"]
				#[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "- `M` members-count (code-bounded)"]
				#[doc = "- `P` complexity of dispatching `proposal`"]
				pub struct Execute {
					pub proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<execute::Proposal>,
					#[codec(compact)]
					pub length_bound: execute::LengthBound,
				}
				pub mod execute {
					use super::runtime_types;
					pub type Proposal = runtime_types::composable_runtime::RuntimeCall;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Execute {
					const PALLET: &'static str = "TechnicalCommittee";
					const CALL: &'static str = "execute";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Add a new proposal to either be voted on or executed directly."]
				#[doc = ""]
				#[doc = "Requires the sender to be member."]
				#[doc = ""]
				#[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
				#[doc = "or put up for voting."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - branching is influenced by `threshold` where:"]
				#[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
				#[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
				pub struct Propose {
					#[codec(compact)]
					pub threshold: propose::Threshold,
					pub proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<propose::Proposal>,
					#[codec(compact)]
					pub length_bound: propose::LengthBound,
				}
				pub mod propose {
					use super::runtime_types;
					pub type Threshold = ::core::primitive::u32;
					pub type Proposal = runtime_types::composable_runtime::RuntimeCall;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Propose {
					const PALLET: &'static str = "TechnicalCommittee";
					const CALL: &'static str = "propose";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Add an aye or nay vote for the sender to the given proposal."]
				#[doc = ""]
				#[doc = "Requires the sender to be a member."]
				#[doc = ""]
				#[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
				#[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
				#[doc = "fee."]
				#[doc = "## Complexity"]
				#[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
				pub struct Vote {
					pub proposal: vote::Proposal,
					#[codec(compact)]
					pub index: vote::Index,
					pub approve: vote::Approve,
				}
				pub mod vote {
					use super::runtime_types;
					pub type Proposal = ::subxt::ext::subxt_core::utils::H256;
					pub type Index = ::core::primitive::u32;
					pub type Approve = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Vote {
					const PALLET: &'static str = "TechnicalCommittee";
					const CALL: &'static str = "vote";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
				#[doc = "state."]
				#[doc = ""]
				#[doc = "Must be called by the Root origin."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "O(P) where P is the number of max proposals"]
				pub struct DisapproveProposal {
					pub proposal_hash: disapprove_proposal::ProposalHash,
				}
				pub mod disapprove_proposal {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for DisapproveProposal {
					const PALLET: &'static str = "TechnicalCommittee";
					const CALL: &'static str = "disapprove_proposal";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
				#[doc = ""]
				#[doc = "May be called by any signed account in order to finish voting and close the proposal."]
				#[doc = ""]
				#[doc = "If called before the end of the voting period it will only close the vote if it is"]
				#[doc = "has enough votes to be approved or disapproved."]
				#[doc = ""]
				#[doc = "If called after the end of the voting period abstentions are counted as rejections"]
				#[doc = "unless there is a prime member set and the prime member cast an approval."]
				#[doc = ""]
				#[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
				#[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
				#[doc = ""]
				#[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
				#[doc = "proposal."]
				#[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
				#[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(B + M + P1 + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - `P1` is the complexity of `proposal` preimage."]
				#[doc = "  - `P2` is proposal-count (code-bounded)"]
				pub struct Close {
					pub proposal_hash: close::ProposalHash,
					#[codec(compact)]
					pub index: close::Index,
					pub proposal_weight_bound: close::ProposalWeightBound,
					#[codec(compact)]
					pub length_bound: close::LengthBound,
				}
				pub mod close {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
					pub type Index = ::core::primitive::u32;
					pub type ProposalWeightBound = runtime_types::sp_weights::weight_v2::Weight;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Close {
					const PALLET: &'static str = "TechnicalCommittee";
					const CALL: &'static str = "close";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Set the collective's membership."]
				#[doc = ""]
				#[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
				#[doc = "- `prime`: The prime member whose vote sets the default."]
				#[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
				#[doc = "  weight estimation."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `SetMembersOrigin`."]
				#[doc = ""]
				#[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
				#[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
				#[doc = ""]
				#[doc = "# WARNING:"]
				#[doc = ""]
				#[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
				#[doc = "implementation of the trait [`ChangeMembers`]."]
				#[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
				#[doc = "with other logic managing the member set."]
				#[doc = ""]
				#[doc = "## Complexity:"]
				#[doc = "- `O(MP + N)` where:"]
				#[doc = "  - `M` old-members-count (code- and governance-bounded)"]
				#[doc = "  - `N` new-members-count (code- and governance-bounded)"]
				#[doc = "  - `P` proposals-count (code-bounded)"]
				pub fn set_members(
					&self,
					new_members: types::set_members::NewMembers,
					prime: types::set_members::Prime,
					old_count: types::set_members::OldCount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetMembers> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"TechnicalCommittee",
						"set_members",
						types::SetMembers { new_members, prime, old_count },
						[
							66u8, 224u8, 186u8, 178u8, 41u8, 208u8, 67u8, 192u8, 57u8, 242u8,
							141u8, 31u8, 216u8, 118u8, 192u8, 43u8, 125u8, 213u8, 226u8, 85u8,
							142u8, 225u8, 131u8, 45u8, 172u8, 142u8, 12u8, 9u8, 73u8, 7u8, 218u8,
							61u8,
						],
					)
				}
				#[doc = "Dispatch a proposal from a member using the `Member` origin."]
				#[doc = ""]
				#[doc = "Origin must be a member of the collective."]
				#[doc = ""]
				#[doc = "## Complexity:"]
				#[doc = "- `O(B + M + P)` where:"]
				#[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "- `M` members-count (code-bounded)"]
				#[doc = "- `P` complexity of dispatching `proposal`"]
				pub fn execute(
					&self,
					proposal: types::execute::Proposal,
					length_bound: types::execute::LengthBound,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Execute> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"TechnicalCommittee",
						"execute",
						types::Execute {
							proposal: ::subxt::ext::subxt_core::alloc::boxed::Box::new(proposal),
							length_bound,
						},
						[
							234u8, 0u8, 95u8, 166u8, 244u8, 72u8, 155u8, 235u8, 221u8, 34u8, 177u8,
							53u8, 157u8, 42u8, 238u8, 197u8, 28u8, 26u8, 45u8, 63u8, 142u8, 247u8,
							47u8, 254u8, 24u8, 16u8, 8u8, 108u8, 33u8, 161u8, 88u8, 37u8,
						],
					)
				}
				#[doc = "Add a new proposal to either be voted on or executed directly."]
				#[doc = ""]
				#[doc = "Requires the sender to be member."]
				#[doc = ""]
				#[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
				#[doc = "or put up for voting."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - branching is influenced by `threshold` where:"]
				#[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
				#[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
				pub fn propose(
					&self,
					threshold: types::propose::Threshold,
					proposal: types::propose::Proposal,
					length_bound: types::propose::LengthBound,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Propose> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"TechnicalCommittee",
						"propose",
						types::Propose {
							threshold,
							proposal: ::subxt::ext::subxt_core::alloc::boxed::Box::new(proposal),
							length_bound,
						},
						[
							201u8, 68u8, 226u8, 239u8, 107u8, 242u8, 87u8, 249u8, 164u8, 79u8,
							192u8, 229u8, 7u8, 188u8, 244u8, 62u8, 48u8, 116u8, 174u8, 255u8,
							181u8, 33u8, 102u8, 235u8, 11u8, 219u8, 183u8, 87u8, 21u8, 1u8, 49u8,
							176u8,
						],
					)
				}
				#[doc = "Add an aye or nay vote for the sender to the given proposal."]
				#[doc = ""]
				#[doc = "Requires the sender to be a member."]
				#[doc = ""]
				#[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
				#[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
				#[doc = "fee."]
				#[doc = "## Complexity"]
				#[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
				pub fn vote(
					&self,
					proposal: types::vote::Proposal,
					index: types::vote::Index,
					approve: types::vote::Approve,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Vote> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"TechnicalCommittee",
						"vote",
						types::Vote { proposal, index, approve },
						[
							110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
							129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
							176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
							120u8,
						],
					)
				}
				#[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
				#[doc = "state."]
				#[doc = ""]
				#[doc = "Must be called by the Root origin."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "O(P) where P is the number of max proposals"]
				pub fn disapprove_proposal(
					&self,
					proposal_hash: types::disapprove_proposal::ProposalHash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::DisapproveProposal>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"TechnicalCommittee",
						"disapprove_proposal",
						types::DisapproveProposal { proposal_hash },
						[
							26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
							155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
							156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
						],
					)
				}
				#[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
				#[doc = ""]
				#[doc = "May be called by any signed account in order to finish voting and close the proposal."]
				#[doc = ""]
				#[doc = "If called before the end of the voting period it will only close the vote if it is"]
				#[doc = "has enough votes to be approved or disapproved."]
				#[doc = ""]
				#[doc = "If called after the end of the voting period abstentions are counted as rejections"]
				#[doc = "unless there is a prime member set and the prime member cast an approval."]
				#[doc = ""]
				#[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
				#[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
				#[doc = ""]
				#[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
				#[doc = "proposal."]
				#[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
				#[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(B + M + P1 + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - `P1` is the complexity of `proposal` preimage."]
				#[doc = "  - `P2` is proposal-count (code-bounded)"]
				pub fn close(
					&self,
					proposal_hash: types::close::ProposalHash,
					index: types::close::Index,
					proposal_weight_bound: types::close::ProposalWeightBound,
					length_bound: types::close::LengthBound,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Close> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"TechnicalCommittee",
						"close",
						types::Close { proposal_hash, index, proposal_weight_bound, length_bound },
						[
							136u8, 48u8, 243u8, 34u8, 60u8, 109u8, 186u8, 158u8, 72u8, 48u8, 62u8,
							34u8, 167u8, 46u8, 33u8, 142u8, 239u8, 43u8, 238u8, 125u8, 94u8, 80u8,
							157u8, 245u8, 220u8, 126u8, 58u8, 244u8, 186u8, 195u8, 30u8, 127u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_collective::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
			#[doc = "`MemberCount`)."]
			pub struct Proposed {
				pub account: proposed::Account,
				pub proposal_index: proposed::ProposalIndex,
				pub proposal_hash: proposed::ProposalHash,
				pub threshold: proposed::Threshold,
			}
			pub mod proposed {
				use super::runtime_types;
				pub type Account = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Threshold = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Proposed {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion (given hash) has been voted on by given account, leaving"]
			#[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
			pub struct Voted {
				pub account: voted::Account,
				pub proposal_hash: voted::ProposalHash,
				pub voted: voted::Voted,
				pub yes: voted::Yes,
				pub no: voted::No,
			}
			pub mod voted {
				use super::runtime_types;
				pub type Account = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Voted = ::core::primitive::bool;
				pub type Yes = ::core::primitive::u32;
				pub type No = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Voted {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion was approved by the required threshold."]
			pub struct Approved {
				pub proposal_hash: approved::ProposalHash,
			}
			pub mod approved {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Approved {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion was not approved by the required threshold."]
			pub struct Disapproved {
				pub proposal_hash: disapproved::ProposalHash,
			}
			pub mod disapproved {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Disapproved {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Disapproved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion was executed; result will be `Ok` if it returned without error."]
			pub struct Executed {
				pub proposal_hash: executed::ProposalHash,
				pub result: executed::Result,
			}
			pub mod executed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Executed {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Executed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A single member did some action; result will be `Ok` if it returned without error."]
			pub struct MemberExecuted {
				pub proposal_hash: member_executed::ProposalHash,
				pub result: member_executed::Result,
			}
			pub mod member_executed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for MemberExecuted {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "MemberExecuted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
			pub struct Closed {
				pub proposal_hash: closed::ProposalHash,
				pub yes: closed::Yes,
				pub no: closed::No,
			}
			pub mod closed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Yes = ::core::primitive::u32;
				pub type No = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Closed {
				const PALLET: &'static str = "TechnicalCommittee";
				const EVENT: &'static str = "Closed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod proposals {
					use super::runtime_types;
					pub type Proposals =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::ext::subxt_core::utils::H256,
						>;
				}
				pub mod proposal_of {
					use super::runtime_types;
					pub type ProposalOf = runtime_types::composable_runtime::RuntimeCall;
					pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
				}
				pub mod voting {
					use super::runtime_types;
					pub type Voting = runtime_types::pallet_collective::Votes<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
				}
				pub mod proposal_count {
					use super::runtime_types;
					pub type ProposalCount = ::core::primitive::u32;
				}
				pub mod members {
					use super::runtime_types;
					pub type Members = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				pub mod prime {
					use super::runtime_types;
					pub type Prime = ::subxt::ext::subxt_core::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The hashes of the active proposals."]
				pub fn proposals(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::proposals::Proposals,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"TechnicalCommittee",
						"Proposals",
						(),
						[
							210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
							147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
							198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
						],
					)
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::proposal_of::ProposalOf,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"TechnicalCommittee",
						"ProposalOf",
						(),
						[
							75u8, 197u8, 147u8, 38u8, 71u8, 208u8, 129u8, 6u8, 105u8, 179u8, 0u8,
							117u8, 80u8, 243u8, 83u8, 143u8, 117u8, 46u8, 84u8, 251u8, 232u8, 36u8,
							205u8, 227u8, 85u8, 33u8, 159u8, 122u8, 229u8, 78u8, 230u8, 231u8,
						],
					)
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of(
					&self,
					_0: impl ::core::borrow::Borrow<types::proposal_of::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::proposal_of::Param0,
					>,
					types::proposal_of::ProposalOf,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"TechnicalCommittee",
						"ProposalOf",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							75u8, 197u8, 147u8, 38u8, 71u8, 208u8, 129u8, 6u8, 105u8, 179u8, 0u8,
							117u8, 80u8, 243u8, 83u8, 143u8, 117u8, 46u8, 84u8, 251u8, 232u8, 36u8,
							205u8, 227u8, 85u8, 33u8, 159u8, 122u8, 229u8, 78u8, 230u8, 231u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::voting::Voting,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"TechnicalCommittee",
						"Voting",
						(),
						[
							109u8, 198u8, 2u8, 13u8, 29u8, 14u8, 241u8, 217u8, 55u8, 147u8, 147u8,
							4u8, 176u8, 69u8, 132u8, 228u8, 158u8, 203u8, 110u8, 239u8, 158u8,
							137u8, 97u8, 46u8, 228u8, 118u8, 251u8, 201u8, 88u8, 208u8, 94u8,
							132u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting(
					&self,
					_0: impl ::core::borrow::Borrow<types::voting::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::voting::Param0,
					>,
					types::voting::Voting,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"TechnicalCommittee",
						"Voting",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							109u8, 198u8, 2u8, 13u8, 29u8, 14u8, 241u8, 217u8, 55u8, 147u8, 147u8,
							4u8, 176u8, 69u8, 132u8, 228u8, 158u8, 203u8, 110u8, 239u8, 158u8,
							137u8, 97u8, 46u8, 228u8, 118u8, 251u8, 201u8, 88u8, 208u8, 94u8,
							132u8,
						],
					)
				}
				#[doc = " Proposals so far."]
				pub fn proposal_count(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::proposal_count::ProposalCount,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"TechnicalCommittee",
						"ProposalCount",
						(),
						[
							91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
							216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
							29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
						],
					)
				}
				#[doc = " The current members of the collective. This is stored sorted (just by value)."]
				pub fn members(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::members::Members,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"TechnicalCommittee",
						"Members",
						(),
						[
							16u8, 29u8, 32u8, 222u8, 175u8, 136u8, 111u8, 101u8, 43u8, 74u8, 209u8,
							81u8, 47u8, 97u8, 129u8, 39u8, 225u8, 243u8, 110u8, 229u8, 237u8, 21u8,
							90u8, 127u8, 80u8, 239u8, 156u8, 32u8, 90u8, 109u8, 179u8, 0u8,
						],
					)
				}
				#[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
				pub fn prime(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::prime::Prime,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"TechnicalCommittee",
						"Prime",
						(),
						[
							72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
							3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
							77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The maximum weight of a dispatch call that can be proposed and executed."]
				pub fn max_proposal_weight(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::sp_weights::weight_v2::Weight,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"TechnicalCommittee",
						"MaxProposalWeight",
						[
							149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
							56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
							128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
							112u8,
						],
					)
				}
			}
		}
	}
	pub mod technical_committee_membership {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_membership::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_membership::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Add a member `who` to the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::AddOrigin`."]
				pub struct AddMember {
					pub who: add_member::Who,
				}
				pub mod add_member {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddMember {
					const PALLET: &'static str = "TechnicalCommitteeMembership";
					const CALL: &'static str = "add_member";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove a member `who` from the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::RemoveOrigin`."]
				pub struct RemoveMember {
					pub who: remove_member::Who,
				}
				pub mod remove_member {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveMember {
					const PALLET: &'static str = "TechnicalCommitteeMembership";
					const CALL: &'static str = "remove_member";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Swap out one member `remove` for another `add`."]
				#[doc = ""]
				#[doc = "May only be called from `T::SwapOrigin`."]
				#[doc = ""]
				#[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
				pub struct SwapMember {
					pub remove: swap_member::Remove,
					pub add: swap_member::Add,
				}
				pub mod swap_member {
					use super::runtime_types;
					pub type Remove = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Add = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SwapMember {
					const PALLET: &'static str = "TechnicalCommitteeMembership";
					const CALL: &'static str = "swap_member";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
				#[doc = "pass `members` pre-sorted."]
				#[doc = ""]
				#[doc = "May only be called from `T::ResetOrigin`."]
				pub struct ResetMembers {
					pub members: reset_members::Members,
				}
				pub mod reset_members {
					use super::runtime_types;
					pub type Members = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ResetMembers {
					const PALLET: &'static str = "TechnicalCommitteeMembership";
					const CALL: &'static str = "reset_members";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Swap out the sending member for some other key `new`."]
				#[doc = ""]
				#[doc = "May only be called from `Signed` origin of a current member."]
				#[doc = ""]
				#[doc = "Prime membership is passed from the origin account to `new`, if extant."]
				pub struct ChangeKey {
					pub new: change_key::New,
				}
				pub mod change_key {
					use super::runtime_types;
					pub type New = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ChangeKey {
					const PALLET: &'static str = "TechnicalCommitteeMembership";
					const CALL: &'static str = "change_key";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the prime member. Must be a current member."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub struct SetPrime {
					pub who: set_prime::Who,
				}
				pub mod set_prime {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetPrime {
					const PALLET: &'static str = "TechnicalCommitteeMembership";
					const CALL: &'static str = "set_prime";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove the prime member if it exists."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub struct ClearPrime;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClearPrime {
					const PALLET: &'static str = "TechnicalCommitteeMembership";
					const CALL: &'static str = "clear_prime";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Add a member `who` to the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::AddOrigin`."]
				pub fn add_member(
					&self,
					who: types::add_member::Who,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AddMember> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"TechnicalCommitteeMembership",
						"add_member",
						types::AddMember { who },
						[
							237u8, 212u8, 114u8, 106u8, 42u8, 1u8, 28u8, 244u8, 161u8, 140u8, 80u8,
							251u8, 217u8, 116u8, 9u8, 155u8, 234u8, 94u8, 3u8, 156u8, 5u8, 68u8,
							197u8, 90u8, 47u8, 223u8, 235u8, 200u8, 194u8, 195u8, 90u8, 70u8,
						],
					)
				}
				#[doc = "Remove a member `who` from the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::RemoveOrigin`."]
				pub fn remove_member(
					&self,
					who: types::remove_member::Who,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveMember> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"TechnicalCommitteeMembership",
						"remove_member",
						types::RemoveMember { who },
						[
							182u8, 80u8, 149u8, 27u8, 252u8, 160u8, 231u8, 23u8, 208u8, 93u8,
							116u8, 252u8, 5u8, 28u8, 162u8, 221u8, 14u8, 150u8, 62u8, 65u8, 169u8,
							164u8, 226u8, 53u8, 152u8, 237u8, 37u8, 171u8, 209u8, 52u8, 235u8,
							11u8,
						],
					)
				}
				#[doc = "Swap out one member `remove` for another `add`."]
				#[doc = ""]
				#[doc = "May only be called from `T::SwapOrigin`."]
				#[doc = ""]
				#[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
				pub fn swap_member(
					&self,
					remove: types::swap_member::Remove,
					add: types::swap_member::Add,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SwapMember> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"TechnicalCommitteeMembership",
						"swap_member",
						types::SwapMember { remove, add },
						[
							11u8, 68u8, 57u8, 232u8, 242u8, 45u8, 34u8, 178u8, 250u8, 195u8, 254u8,
							22u8, 13u8, 164u8, 86u8, 193u8, 47u8, 198u8, 164u8, 143u8, 66u8, 245u8,
							222u8, 24u8, 240u8, 97u8, 241u8, 166u8, 198u8, 236u8, 148u8, 195u8,
						],
					)
				}
				#[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
				#[doc = "pass `members` pre-sorted."]
				#[doc = ""]
				#[doc = "May only be called from `T::ResetOrigin`."]
				pub fn reset_members(
					&self,
					members: types::reset_members::Members,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ResetMembers> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"TechnicalCommitteeMembership",
						"reset_members",
						types::ResetMembers { members },
						[
							212u8, 144u8, 99u8, 156u8, 70u8, 4u8, 219u8, 227u8, 150u8, 25u8, 86u8,
							8u8, 215u8, 128u8, 193u8, 206u8, 33u8, 193u8, 71u8, 15u8, 20u8, 92u8,
							99u8, 89u8, 174u8, 236u8, 102u8, 82u8, 164u8, 234u8, 12u8, 45u8,
						],
					)
				}
				#[doc = "Swap out the sending member for some other key `new`."]
				#[doc = ""]
				#[doc = "May only be called from `Signed` origin of a current member."]
				#[doc = ""]
				#[doc = "Prime membership is passed from the origin account to `new`, if extant."]
				pub fn change_key(
					&self,
					new: types::change_key::New,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ChangeKey> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"TechnicalCommitteeMembership",
						"change_key",
						types::ChangeKey { new },
						[
							189u8, 13u8, 214u8, 17u8, 2u8, 171u8, 123u8, 104u8, 227u8, 136u8,
							198u8, 88u8, 216u8, 105u8, 246u8, 70u8, 25u8, 19u8, 244u8, 19u8, 112u8,
							105u8, 14u8, 16u8, 75u8, 183u8, 85u8, 183u8, 131u8, 186u8, 129u8,
							231u8,
						],
					)
				}
				#[doc = "Set the prime member. Must be a current member."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub fn set_prime(
					&self,
					who: types::set_prime::Who,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetPrime> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"TechnicalCommitteeMembership",
						"set_prime",
						types::SetPrime { who },
						[
							76u8, 172u8, 20u8, 105u8, 143u8, 253u8, 234u8, 255u8, 138u8, 98u8,
							81u8, 183u8, 147u8, 232u8, 49u8, 234u8, 17u8, 129u8, 20u8, 119u8,
							116u8, 214u8, 131u8, 112u8, 38u8, 21u8, 93u8, 139u8, 161u8, 242u8,
							88u8, 152u8,
						],
					)
				}
				#[doc = "Remove the prime member if it exists."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub fn clear_prime(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClearPrime> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"TechnicalCommitteeMembership",
						"clear_prime",
						types::ClearPrime {},
						[
							71u8, 213u8, 34u8, 23u8, 186u8, 63u8, 240u8, 216u8, 190u8, 251u8, 84u8,
							109u8, 140u8, 137u8, 210u8, 211u8, 242u8, 231u8, 212u8, 133u8, 151u8,
							125u8, 25u8, 46u8, 210u8, 53u8, 133u8, 222u8, 21u8, 107u8, 120u8, 52u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_membership::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The given member was added; see the transaction for who."]
			pub struct MemberAdded;
			impl ::subxt::ext::subxt_core::events::StaticEvent for MemberAdded {
				const PALLET: &'static str = "TechnicalCommitteeMembership";
				const EVENT: &'static str = "MemberAdded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The given member was removed; see the transaction for who."]
			pub struct MemberRemoved;
			impl ::subxt::ext::subxt_core::events::StaticEvent for MemberRemoved {
				const PALLET: &'static str = "TechnicalCommitteeMembership";
				const EVENT: &'static str = "MemberRemoved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Two members were swapped; see the transaction for who."]
			pub struct MembersSwapped;
			impl ::subxt::ext::subxt_core::events::StaticEvent for MembersSwapped {
				const PALLET: &'static str = "TechnicalCommitteeMembership";
				const EVENT: &'static str = "MembersSwapped";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The membership was reset; see the transaction for who the new set is."]
			pub struct MembersReset;
			impl ::subxt::ext::subxt_core::events::StaticEvent for MembersReset {
				const PALLET: &'static str = "TechnicalCommitteeMembership";
				const EVENT: &'static str = "MembersReset";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "One of the members' keys changed."]
			pub struct KeyChanged;
			impl ::subxt::ext::subxt_core::events::StaticEvent for KeyChanged {
				const PALLET: &'static str = "TechnicalCommitteeMembership";
				const EVENT: &'static str = "KeyChanged";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Phantom member, never used."]
			pub struct Dummy;
			impl ::subxt::ext::subxt_core::events::StaticEvent for Dummy {
				const PALLET: &'static str = "TechnicalCommitteeMembership";
				const EVENT: &'static str = "Dummy";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod members {
					use super::runtime_types;
					pub type Members = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				pub mod prime {
					use super::runtime_types;
					pub type Prime = ::subxt::ext::subxt_core::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current membership, stored as an ordered Vec."]
				pub fn members(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::members::Members,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"TechnicalCommitteeMembership",
						"Members",
						(),
						[
							109u8, 100u8, 14u8, 195u8, 213u8, 67u8, 44u8, 218u8, 84u8, 254u8, 76u8,
							80u8, 210u8, 155u8, 155u8, 30u8, 18u8, 169u8, 195u8, 92u8, 208u8,
							223u8, 242u8, 97u8, 147u8, 20u8, 168u8, 145u8, 254u8, 115u8, 225u8,
							193u8,
						],
					)
				}
				#[doc = " The current prime member, if one exists."]
				pub fn prime(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::prime::Prime,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"TechnicalCommitteeMembership",
						"Prime",
						(),
						[
							72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
							3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
							77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
						],
					)
				}
			}
		}
	}
	pub mod release_committee {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_collective::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_collective::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the collective's membership."]
				#[doc = ""]
				#[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
				#[doc = "- `prime`: The prime member whose vote sets the default."]
				#[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
				#[doc = "  weight estimation."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `SetMembersOrigin`."]
				#[doc = ""]
				#[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
				#[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
				#[doc = ""]
				#[doc = "# WARNING:"]
				#[doc = ""]
				#[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
				#[doc = "implementation of the trait [`ChangeMembers`]."]
				#[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
				#[doc = "with other logic managing the member set."]
				#[doc = ""]
				#[doc = "## Complexity:"]
				#[doc = "- `O(MP + N)` where:"]
				#[doc = "  - `M` old-members-count (code- and governance-bounded)"]
				#[doc = "  - `N` new-members-count (code- and governance-bounded)"]
				#[doc = "  - `P` proposals-count (code-bounded)"]
				pub struct SetMembers {
					pub new_members: set_members::NewMembers,
					pub prime: set_members::Prime,
					pub old_count: set_members::OldCount,
				}
				pub mod set_members {
					use super::runtime_types;
					pub type NewMembers = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
					pub type Prime =
						::core::option::Option<::subxt::ext::subxt_core::utils::AccountId32>;
					pub type OldCount = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetMembers {
					const PALLET: &'static str = "ReleaseCommittee";
					const CALL: &'static str = "set_members";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Dispatch a proposal from a member using the `Member` origin."]
				#[doc = ""]
				#[doc = "Origin must be a member of the collective."]
				#[doc = ""]
				#[doc = "## Complexity:"]
				#[doc = "- `O(B + M + P)` where:"]
				#[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "- `M` members-count (code-bounded)"]
				#[doc = "- `P` complexity of dispatching `proposal`"]
				pub struct Execute {
					pub proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<execute::Proposal>,
					#[codec(compact)]
					pub length_bound: execute::LengthBound,
				}
				pub mod execute {
					use super::runtime_types;
					pub type Proposal = runtime_types::composable_runtime::RuntimeCall;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Execute {
					const PALLET: &'static str = "ReleaseCommittee";
					const CALL: &'static str = "execute";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Add a new proposal to either be voted on or executed directly."]
				#[doc = ""]
				#[doc = "Requires the sender to be member."]
				#[doc = ""]
				#[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
				#[doc = "or put up for voting."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - branching is influenced by `threshold` where:"]
				#[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
				#[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
				pub struct Propose {
					#[codec(compact)]
					pub threshold: propose::Threshold,
					pub proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<propose::Proposal>,
					#[codec(compact)]
					pub length_bound: propose::LengthBound,
				}
				pub mod propose {
					use super::runtime_types;
					pub type Threshold = ::core::primitive::u32;
					pub type Proposal = runtime_types::composable_runtime::RuntimeCall;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Propose {
					const PALLET: &'static str = "ReleaseCommittee";
					const CALL: &'static str = "propose";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Add an aye or nay vote for the sender to the given proposal."]
				#[doc = ""]
				#[doc = "Requires the sender to be a member."]
				#[doc = ""]
				#[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
				#[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
				#[doc = "fee."]
				#[doc = "## Complexity"]
				#[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
				pub struct Vote {
					pub proposal: vote::Proposal,
					#[codec(compact)]
					pub index: vote::Index,
					pub approve: vote::Approve,
				}
				pub mod vote {
					use super::runtime_types;
					pub type Proposal = ::subxt::ext::subxt_core::utils::H256;
					pub type Index = ::core::primitive::u32;
					pub type Approve = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Vote {
					const PALLET: &'static str = "ReleaseCommittee";
					const CALL: &'static str = "vote";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
				#[doc = "state."]
				#[doc = ""]
				#[doc = "Must be called by the Root origin."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "O(P) where P is the number of max proposals"]
				pub struct DisapproveProposal {
					pub proposal_hash: disapprove_proposal::ProposalHash,
				}
				pub mod disapprove_proposal {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for DisapproveProposal {
					const PALLET: &'static str = "ReleaseCommittee";
					const CALL: &'static str = "disapprove_proposal";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
				#[doc = ""]
				#[doc = "May be called by any signed account in order to finish voting and close the proposal."]
				#[doc = ""]
				#[doc = "If called before the end of the voting period it will only close the vote if it is"]
				#[doc = "has enough votes to be approved or disapproved."]
				#[doc = ""]
				#[doc = "If called after the end of the voting period abstentions are counted as rejections"]
				#[doc = "unless there is a prime member set and the prime member cast an approval."]
				#[doc = ""]
				#[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
				#[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
				#[doc = ""]
				#[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
				#[doc = "proposal."]
				#[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
				#[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(B + M + P1 + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - `P1` is the complexity of `proposal` preimage."]
				#[doc = "  - `P2` is proposal-count (code-bounded)"]
				pub struct Close {
					pub proposal_hash: close::ProposalHash,
					#[codec(compact)]
					pub index: close::Index,
					pub proposal_weight_bound: close::ProposalWeightBound,
					#[codec(compact)]
					pub length_bound: close::LengthBound,
				}
				pub mod close {
					use super::runtime_types;
					pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
					pub type Index = ::core::primitive::u32;
					pub type ProposalWeightBound = runtime_types::sp_weights::weight_v2::Weight;
					pub type LengthBound = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Close {
					const PALLET: &'static str = "ReleaseCommittee";
					const CALL: &'static str = "close";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Set the collective's membership."]
				#[doc = ""]
				#[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
				#[doc = "- `prime`: The prime member whose vote sets the default."]
				#[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
				#[doc = "  weight estimation."]
				#[doc = ""]
				#[doc = "The dispatch of this call must be `SetMembersOrigin`."]
				#[doc = ""]
				#[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
				#[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
				#[doc = ""]
				#[doc = "# WARNING:"]
				#[doc = ""]
				#[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
				#[doc = "implementation of the trait [`ChangeMembers`]."]
				#[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
				#[doc = "with other logic managing the member set."]
				#[doc = ""]
				#[doc = "## Complexity:"]
				#[doc = "- `O(MP + N)` where:"]
				#[doc = "  - `M` old-members-count (code- and governance-bounded)"]
				#[doc = "  - `N` new-members-count (code- and governance-bounded)"]
				#[doc = "  - `P` proposals-count (code-bounded)"]
				pub fn set_members(
					&self,
					new_members: types::set_members::NewMembers,
					prime: types::set_members::Prime,
					old_count: types::set_members::OldCount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetMembers> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ReleaseCommittee",
						"set_members",
						types::SetMembers { new_members, prime, old_count },
						[
							66u8, 224u8, 186u8, 178u8, 41u8, 208u8, 67u8, 192u8, 57u8, 242u8,
							141u8, 31u8, 216u8, 118u8, 192u8, 43u8, 125u8, 213u8, 226u8, 85u8,
							142u8, 225u8, 131u8, 45u8, 172u8, 142u8, 12u8, 9u8, 73u8, 7u8, 218u8,
							61u8,
						],
					)
				}
				#[doc = "Dispatch a proposal from a member using the `Member` origin."]
				#[doc = ""]
				#[doc = "Origin must be a member of the collective."]
				#[doc = ""]
				#[doc = "## Complexity:"]
				#[doc = "- `O(B + M + P)` where:"]
				#[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "- `M` members-count (code-bounded)"]
				#[doc = "- `P` complexity of dispatching `proposal`"]
				pub fn execute(
					&self,
					proposal: types::execute::Proposal,
					length_bound: types::execute::LengthBound,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Execute> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ReleaseCommittee",
						"execute",
						types::Execute {
							proposal: ::subxt::ext::subxt_core::alloc::boxed::Box::new(proposal),
							length_bound,
						},
						[
							234u8, 0u8, 95u8, 166u8, 244u8, 72u8, 155u8, 235u8, 221u8, 34u8, 177u8,
							53u8, 157u8, 42u8, 238u8, 197u8, 28u8, 26u8, 45u8, 63u8, 142u8, 247u8,
							47u8, 254u8, 24u8, 16u8, 8u8, 108u8, 33u8, 161u8, 88u8, 37u8,
						],
					)
				}
				#[doc = "Add a new proposal to either be voted on or executed directly."]
				#[doc = ""]
				#[doc = "Requires the sender to be member."]
				#[doc = ""]
				#[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
				#[doc = "or put up for voting."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - branching is influenced by `threshold` where:"]
				#[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
				#[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
				pub fn propose(
					&self,
					threshold: types::propose::Threshold,
					proposal: types::propose::Proposal,
					length_bound: types::propose::LengthBound,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Propose> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ReleaseCommittee",
						"propose",
						types::Propose {
							threshold,
							proposal: ::subxt::ext::subxt_core::alloc::boxed::Box::new(proposal),
							length_bound,
						},
						[
							201u8, 68u8, 226u8, 239u8, 107u8, 242u8, 87u8, 249u8, 164u8, 79u8,
							192u8, 229u8, 7u8, 188u8, 244u8, 62u8, 48u8, 116u8, 174u8, 255u8,
							181u8, 33u8, 102u8, 235u8, 11u8, 219u8, 183u8, 87u8, 21u8, 1u8, 49u8,
							176u8,
						],
					)
				}
				#[doc = "Add an aye or nay vote for the sender to the given proposal."]
				#[doc = ""]
				#[doc = "Requires the sender to be a member."]
				#[doc = ""]
				#[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
				#[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
				#[doc = "fee."]
				#[doc = "## Complexity"]
				#[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
				pub fn vote(
					&self,
					proposal: types::vote::Proposal,
					index: types::vote::Index,
					approve: types::vote::Approve,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Vote> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ReleaseCommittee",
						"vote",
						types::Vote { proposal, index, approve },
						[
							110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
							129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
							176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
							120u8,
						],
					)
				}
				#[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
				#[doc = "state."]
				#[doc = ""]
				#[doc = "Must be called by the Root origin."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "O(P) where P is the number of max proposals"]
				pub fn disapprove_proposal(
					&self,
					proposal_hash: types::disapprove_proposal::ProposalHash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::DisapproveProposal>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ReleaseCommittee",
						"disapprove_proposal",
						types::DisapproveProposal { proposal_hash },
						[
							26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
							155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
							156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
						],
					)
				}
				#[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
				#[doc = ""]
				#[doc = "May be called by any signed account in order to finish voting and close the proposal."]
				#[doc = ""]
				#[doc = "If called before the end of the voting period it will only close the vote if it is"]
				#[doc = "has enough votes to be approved or disapproved."]
				#[doc = ""]
				#[doc = "If called after the end of the voting period abstentions are counted as rejections"]
				#[doc = "unless there is a prime member set and the prime member cast an approval."]
				#[doc = ""]
				#[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
				#[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
				#[doc = ""]
				#[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
				#[doc = "proposal."]
				#[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
				#[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- `O(B + M + P1 + P2)` where:"]
				#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
				#[doc = "  - `M` is members-count (code- and governance-bounded)"]
				#[doc = "  - `P1` is the complexity of `proposal` preimage."]
				#[doc = "  - `P2` is proposal-count (code-bounded)"]
				pub fn close(
					&self,
					proposal_hash: types::close::ProposalHash,
					index: types::close::Index,
					proposal_weight_bound: types::close::ProposalWeightBound,
					length_bound: types::close::LengthBound,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Close> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ReleaseCommittee",
						"close",
						types::Close { proposal_hash, index, proposal_weight_bound, length_bound },
						[
							136u8, 48u8, 243u8, 34u8, 60u8, 109u8, 186u8, 158u8, 72u8, 48u8, 62u8,
							34u8, 167u8, 46u8, 33u8, 142u8, 239u8, 43u8, 238u8, 125u8, 94u8, 80u8,
							157u8, 245u8, 220u8, 126u8, 58u8, 244u8, 186u8, 195u8, 30u8, 127u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_collective::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
			#[doc = "`MemberCount`)."]
			pub struct Proposed {
				pub account: proposed::Account,
				pub proposal_index: proposed::ProposalIndex,
				pub proposal_hash: proposed::ProposalHash,
				pub threshold: proposed::Threshold,
			}
			pub mod proposed {
				use super::runtime_types;
				pub type Account = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type ProposalIndex = ::core::primitive::u32;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Threshold = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Proposed {
				const PALLET: &'static str = "ReleaseCommittee";
				const EVENT: &'static str = "Proposed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion (given hash) has been voted on by given account, leaving"]
			#[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
			pub struct Voted {
				pub account: voted::Account,
				pub proposal_hash: voted::ProposalHash,
				pub voted: voted::Voted,
				pub yes: voted::Yes,
				pub no: voted::No,
			}
			pub mod voted {
				use super::runtime_types;
				pub type Account = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Voted = ::core::primitive::bool;
				pub type Yes = ::core::primitive::u32;
				pub type No = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Voted {
				const PALLET: &'static str = "ReleaseCommittee";
				const EVENT: &'static str = "Voted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion was approved by the required threshold."]
			pub struct Approved {
				pub proposal_hash: approved::ProposalHash,
			}
			pub mod approved {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Approved {
				const PALLET: &'static str = "ReleaseCommittee";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion was not approved by the required threshold."]
			pub struct Disapproved {
				pub proposal_hash: disapproved::ProposalHash,
			}
			pub mod disapproved {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Disapproved {
				const PALLET: &'static str = "ReleaseCommittee";
				const EVENT: &'static str = "Disapproved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A motion was executed; result will be `Ok` if it returned without error."]
			pub struct Executed {
				pub proposal_hash: executed::ProposalHash,
				pub result: executed::Result,
			}
			pub mod executed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Executed {
				const PALLET: &'static str = "ReleaseCommittee";
				const EVENT: &'static str = "Executed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A single member did some action; result will be `Ok` if it returned without error."]
			pub struct MemberExecuted {
				pub proposal_hash: member_executed::ProposalHash,
				pub result: member_executed::Result,
			}
			pub mod member_executed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for MemberExecuted {
				const PALLET: &'static str = "ReleaseCommittee";
				const EVENT: &'static str = "MemberExecuted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
			pub struct Closed {
				pub proposal_hash: closed::ProposalHash,
				pub yes: closed::Yes,
				pub no: closed::No,
			}
			pub mod closed {
				use super::runtime_types;
				pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Yes = ::core::primitive::u32;
				pub type No = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Closed {
				const PALLET: &'static str = "ReleaseCommittee";
				const EVENT: &'static str = "Closed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod proposals {
					use super::runtime_types;
					pub type Proposals =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::subxt::ext::subxt_core::utils::H256,
						>;
				}
				pub mod proposal_of {
					use super::runtime_types;
					pub type ProposalOf = runtime_types::composable_runtime::RuntimeCall;
					pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
				}
				pub mod voting {
					use super::runtime_types;
					pub type Voting = runtime_types::pallet_collective::Votes<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
				}
				pub mod proposal_count {
					use super::runtime_types;
					pub type ProposalCount = ::core::primitive::u32;
				}
				pub mod members {
					use super::runtime_types;
					pub type Members = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				pub mod prime {
					use super::runtime_types;
					pub type Prime = ::subxt::ext::subxt_core::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The hashes of the active proposals."]
				pub fn proposals(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::proposals::Proposals,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ReleaseCommittee",
						"Proposals",
						(),
						[
							210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
							147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
							198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
						],
					)
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::proposal_of::ProposalOf,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ReleaseCommittee",
						"ProposalOf",
						(),
						[
							75u8, 197u8, 147u8, 38u8, 71u8, 208u8, 129u8, 6u8, 105u8, 179u8, 0u8,
							117u8, 80u8, 243u8, 83u8, 143u8, 117u8, 46u8, 84u8, 251u8, 232u8, 36u8,
							205u8, 227u8, 85u8, 33u8, 159u8, 122u8, 229u8, 78u8, 230u8, 231u8,
						],
					)
				}
				#[doc = " Actual proposal for a given hash, if it's current."]
				pub fn proposal_of(
					&self,
					_0: impl ::core::borrow::Borrow<types::proposal_of::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::proposal_of::Param0,
					>,
					types::proposal_of::ProposalOf,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ReleaseCommittee",
						"ProposalOf",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							75u8, 197u8, 147u8, 38u8, 71u8, 208u8, 129u8, 6u8, 105u8, 179u8, 0u8,
							117u8, 80u8, 243u8, 83u8, 143u8, 117u8, 46u8, 84u8, 251u8, 232u8, 36u8,
							205u8, 227u8, 85u8, 33u8, 159u8, 122u8, 229u8, 78u8, 230u8, 231u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::voting::Voting,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ReleaseCommittee",
						"Voting",
						(),
						[
							109u8, 198u8, 2u8, 13u8, 29u8, 14u8, 241u8, 217u8, 55u8, 147u8, 147u8,
							4u8, 176u8, 69u8, 132u8, 228u8, 158u8, 203u8, 110u8, 239u8, 158u8,
							137u8, 97u8, 46u8, 228u8, 118u8, 251u8, 201u8, 88u8, 208u8, 94u8,
							132u8,
						],
					)
				}
				#[doc = " Votes on a given proposal, if it is ongoing."]
				pub fn voting(
					&self,
					_0: impl ::core::borrow::Borrow<types::voting::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::voting::Param0,
					>,
					types::voting::Voting,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ReleaseCommittee",
						"Voting",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							109u8, 198u8, 2u8, 13u8, 29u8, 14u8, 241u8, 217u8, 55u8, 147u8, 147u8,
							4u8, 176u8, 69u8, 132u8, 228u8, 158u8, 203u8, 110u8, 239u8, 158u8,
							137u8, 97u8, 46u8, 228u8, 118u8, 251u8, 201u8, 88u8, 208u8, 94u8,
							132u8,
						],
					)
				}
				#[doc = " Proposals so far."]
				pub fn proposal_count(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::proposal_count::ProposalCount,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ReleaseCommittee",
						"ProposalCount",
						(),
						[
							91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
							216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
							29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
						],
					)
				}
				#[doc = " The current members of the collective. This is stored sorted (just by value)."]
				pub fn members(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::members::Members,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ReleaseCommittee",
						"Members",
						(),
						[
							16u8, 29u8, 32u8, 222u8, 175u8, 136u8, 111u8, 101u8, 43u8, 74u8, 209u8,
							81u8, 47u8, 97u8, 129u8, 39u8, 225u8, 243u8, 110u8, 229u8, 237u8, 21u8,
							90u8, 127u8, 80u8, 239u8, 156u8, 32u8, 90u8, 109u8, 179u8, 0u8,
						],
					)
				}
				#[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
				pub fn prime(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::prime::Prime,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ReleaseCommittee",
						"Prime",
						(),
						[
							72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
							3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
							77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The maximum weight of a dispatch call that can be proposed and executed."]
				pub fn max_proposal_weight(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::sp_weights::weight_v2::Weight,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"ReleaseCommittee",
						"MaxProposalWeight",
						[
							149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
							56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
							128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
							112u8,
						],
					)
				}
			}
		}
	}
	pub mod release_membership {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_membership::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_membership::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Add a member `who` to the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::AddOrigin`."]
				pub struct AddMember {
					pub who: add_member::Who,
				}
				pub mod add_member {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddMember {
					const PALLET: &'static str = "ReleaseMembership";
					const CALL: &'static str = "add_member";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove a member `who` from the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::RemoveOrigin`."]
				pub struct RemoveMember {
					pub who: remove_member::Who,
				}
				pub mod remove_member {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveMember {
					const PALLET: &'static str = "ReleaseMembership";
					const CALL: &'static str = "remove_member";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Swap out one member `remove` for another `add`."]
				#[doc = ""]
				#[doc = "May only be called from `T::SwapOrigin`."]
				#[doc = ""]
				#[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
				pub struct SwapMember {
					pub remove: swap_member::Remove,
					pub add: swap_member::Add,
				}
				pub mod swap_member {
					use super::runtime_types;
					pub type Remove = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Add = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SwapMember {
					const PALLET: &'static str = "ReleaseMembership";
					const CALL: &'static str = "swap_member";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
				#[doc = "pass `members` pre-sorted."]
				#[doc = ""]
				#[doc = "May only be called from `T::ResetOrigin`."]
				pub struct ResetMembers {
					pub members: reset_members::Members,
				}
				pub mod reset_members {
					use super::runtime_types;
					pub type Members = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ResetMembers {
					const PALLET: &'static str = "ReleaseMembership";
					const CALL: &'static str = "reset_members";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Swap out the sending member for some other key `new`."]
				#[doc = ""]
				#[doc = "May only be called from `Signed` origin of a current member."]
				#[doc = ""]
				#[doc = "Prime membership is passed from the origin account to `new`, if extant."]
				pub struct ChangeKey {
					pub new: change_key::New,
				}
				pub mod change_key {
					use super::runtime_types;
					pub type New = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ChangeKey {
					const PALLET: &'static str = "ReleaseMembership";
					const CALL: &'static str = "change_key";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the prime member. Must be a current member."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub struct SetPrime {
					pub who: set_prime::Who,
				}
				pub mod set_prime {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetPrime {
					const PALLET: &'static str = "ReleaseMembership";
					const CALL: &'static str = "set_prime";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove the prime member if it exists."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub struct ClearPrime;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClearPrime {
					const PALLET: &'static str = "ReleaseMembership";
					const CALL: &'static str = "clear_prime";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Add a member `who` to the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::AddOrigin`."]
				pub fn add_member(
					&self,
					who: types::add_member::Who,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AddMember> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ReleaseMembership",
						"add_member",
						types::AddMember { who },
						[
							237u8, 212u8, 114u8, 106u8, 42u8, 1u8, 28u8, 244u8, 161u8, 140u8, 80u8,
							251u8, 217u8, 116u8, 9u8, 155u8, 234u8, 94u8, 3u8, 156u8, 5u8, 68u8,
							197u8, 90u8, 47u8, 223u8, 235u8, 200u8, 194u8, 195u8, 90u8, 70u8,
						],
					)
				}
				#[doc = "Remove a member `who` from the set."]
				#[doc = ""]
				#[doc = "May only be called from `T::RemoveOrigin`."]
				pub fn remove_member(
					&self,
					who: types::remove_member::Who,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveMember> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ReleaseMembership",
						"remove_member",
						types::RemoveMember { who },
						[
							182u8, 80u8, 149u8, 27u8, 252u8, 160u8, 231u8, 23u8, 208u8, 93u8,
							116u8, 252u8, 5u8, 28u8, 162u8, 221u8, 14u8, 150u8, 62u8, 65u8, 169u8,
							164u8, 226u8, 53u8, 152u8, 237u8, 37u8, 171u8, 209u8, 52u8, 235u8,
							11u8,
						],
					)
				}
				#[doc = "Swap out one member `remove` for another `add`."]
				#[doc = ""]
				#[doc = "May only be called from `T::SwapOrigin`."]
				#[doc = ""]
				#[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
				pub fn swap_member(
					&self,
					remove: types::swap_member::Remove,
					add: types::swap_member::Add,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SwapMember> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ReleaseMembership",
						"swap_member",
						types::SwapMember { remove, add },
						[
							11u8, 68u8, 57u8, 232u8, 242u8, 45u8, 34u8, 178u8, 250u8, 195u8, 254u8,
							22u8, 13u8, 164u8, 86u8, 193u8, 47u8, 198u8, 164u8, 143u8, 66u8, 245u8,
							222u8, 24u8, 240u8, 97u8, 241u8, 166u8, 198u8, 236u8, 148u8, 195u8,
						],
					)
				}
				#[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
				#[doc = "pass `members` pre-sorted."]
				#[doc = ""]
				#[doc = "May only be called from `T::ResetOrigin`."]
				pub fn reset_members(
					&self,
					members: types::reset_members::Members,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ResetMembers> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ReleaseMembership",
						"reset_members",
						types::ResetMembers { members },
						[
							212u8, 144u8, 99u8, 156u8, 70u8, 4u8, 219u8, 227u8, 150u8, 25u8, 86u8,
							8u8, 215u8, 128u8, 193u8, 206u8, 33u8, 193u8, 71u8, 15u8, 20u8, 92u8,
							99u8, 89u8, 174u8, 236u8, 102u8, 82u8, 164u8, 234u8, 12u8, 45u8,
						],
					)
				}
				#[doc = "Swap out the sending member for some other key `new`."]
				#[doc = ""]
				#[doc = "May only be called from `Signed` origin of a current member."]
				#[doc = ""]
				#[doc = "Prime membership is passed from the origin account to `new`, if extant."]
				pub fn change_key(
					&self,
					new: types::change_key::New,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ChangeKey> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ReleaseMembership",
						"change_key",
						types::ChangeKey { new },
						[
							189u8, 13u8, 214u8, 17u8, 2u8, 171u8, 123u8, 104u8, 227u8, 136u8,
							198u8, 88u8, 216u8, 105u8, 246u8, 70u8, 25u8, 19u8, 244u8, 19u8, 112u8,
							105u8, 14u8, 16u8, 75u8, 183u8, 85u8, 183u8, 131u8, 186u8, 129u8,
							231u8,
						],
					)
				}
				#[doc = "Set the prime member. Must be a current member."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub fn set_prime(
					&self,
					who: types::set_prime::Who,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetPrime> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ReleaseMembership",
						"set_prime",
						types::SetPrime { who },
						[
							76u8, 172u8, 20u8, 105u8, 143u8, 253u8, 234u8, 255u8, 138u8, 98u8,
							81u8, 183u8, 147u8, 232u8, 49u8, 234u8, 17u8, 129u8, 20u8, 119u8,
							116u8, 214u8, 131u8, 112u8, 38u8, 21u8, 93u8, 139u8, 161u8, 242u8,
							88u8, 152u8,
						],
					)
				}
				#[doc = "Remove the prime member if it exists."]
				#[doc = ""]
				#[doc = "May only be called from `T::PrimeOrigin`."]
				pub fn clear_prime(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClearPrime> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ReleaseMembership",
						"clear_prime",
						types::ClearPrime {},
						[
							71u8, 213u8, 34u8, 23u8, 186u8, 63u8, 240u8, 216u8, 190u8, 251u8, 84u8,
							109u8, 140u8, 137u8, 210u8, 211u8, 242u8, 231u8, 212u8, 133u8, 151u8,
							125u8, 25u8, 46u8, 210u8, 53u8, 133u8, 222u8, 21u8, 107u8, 120u8, 52u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_membership::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The given member was added; see the transaction for who."]
			pub struct MemberAdded;
			impl ::subxt::ext::subxt_core::events::StaticEvent for MemberAdded {
				const PALLET: &'static str = "ReleaseMembership";
				const EVENT: &'static str = "MemberAdded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The given member was removed; see the transaction for who."]
			pub struct MemberRemoved;
			impl ::subxt::ext::subxt_core::events::StaticEvent for MemberRemoved {
				const PALLET: &'static str = "ReleaseMembership";
				const EVENT: &'static str = "MemberRemoved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Two members were swapped; see the transaction for who."]
			pub struct MembersSwapped;
			impl ::subxt::ext::subxt_core::events::StaticEvent for MembersSwapped {
				const PALLET: &'static str = "ReleaseMembership";
				const EVENT: &'static str = "MembersSwapped";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The membership was reset; see the transaction for who the new set is."]
			pub struct MembersReset;
			impl ::subxt::ext::subxt_core::events::StaticEvent for MembersReset {
				const PALLET: &'static str = "ReleaseMembership";
				const EVENT: &'static str = "MembersReset";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "One of the members' keys changed."]
			pub struct KeyChanged;
			impl ::subxt::ext::subxt_core::events::StaticEvent for KeyChanged {
				const PALLET: &'static str = "ReleaseMembership";
				const EVENT: &'static str = "KeyChanged";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Phantom member, never used."]
			pub struct Dummy;
			impl ::subxt::ext::subxt_core::events::StaticEvent for Dummy {
				const PALLET: &'static str = "ReleaseMembership";
				const EVENT: &'static str = "Dummy";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod members {
					use super::runtime_types;
					pub type Members = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				pub mod prime {
					use super::runtime_types;
					pub type Prime = ::subxt::ext::subxt_core::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The current membership, stored as an ordered Vec."]
				pub fn members(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::members::Members,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ReleaseMembership",
						"Members",
						(),
						[
							109u8, 100u8, 14u8, 195u8, 213u8, 67u8, 44u8, 218u8, 84u8, 254u8, 76u8,
							80u8, 210u8, 155u8, 155u8, 30u8, 18u8, 169u8, 195u8, 92u8, 208u8,
							223u8, 242u8, 97u8, 147u8, 20u8, 168u8, 145u8, 254u8, 115u8, 225u8,
							193u8,
						],
					)
				}
				#[doc = " The current prime member, if one exists."]
				pub fn prime(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::prime::Prime,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ReleaseMembership",
						"Prime",
						(),
						[
							72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
							3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
							77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
						],
					)
				}
			}
		}
	}
	pub mod scheduler {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_scheduler::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_scheduler::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Anonymously schedule a task."]
				pub struct Schedule {
					pub when: schedule::When,
					pub maybe_periodic: schedule::MaybePeriodic,
					pub priority: schedule::Priority,
					pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<schedule::Call>,
				}
				pub mod schedule {
					use super::runtime_types;
					pub type When = ::core::primitive::u32;
					pub type MaybePeriodic =
						::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
					pub type Priority = ::core::primitive::u8;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Schedule {
					const PALLET: &'static str = "Scheduler";
					const CALL: &'static str = "schedule";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Cancel an anonymously scheduled task."]
				pub struct Cancel {
					pub when: cancel::When,
					pub index: cancel::Index,
				}
				pub mod cancel {
					use super::runtime_types;
					pub type When = ::core::primitive::u32;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Cancel {
					const PALLET: &'static str = "Scheduler";
					const CALL: &'static str = "cancel";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Schedule a named task."]
				pub struct ScheduleNamed {
					pub id: schedule_named::Id,
					pub when: schedule_named::When,
					pub maybe_periodic: schedule_named::MaybePeriodic,
					pub priority: schedule_named::Priority,
					pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<schedule_named::Call>,
				}
				pub mod schedule_named {
					use super::runtime_types;
					pub type Id = [::core::primitive::u8; 32usize];
					pub type When = ::core::primitive::u32;
					pub type MaybePeriodic =
						::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
					pub type Priority = ::core::primitive::u8;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ScheduleNamed {
					const PALLET: &'static str = "Scheduler";
					const CALL: &'static str = "schedule_named";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Cancel a named scheduled task."]
				pub struct CancelNamed {
					pub id: cancel_named::Id,
				}
				pub mod cancel_named {
					use super::runtime_types;
					pub type Id = [::core::primitive::u8; 32usize];
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelNamed {
					const PALLET: &'static str = "Scheduler";
					const CALL: &'static str = "cancel_named";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Anonymously schedule a task after a delay."]
				pub struct ScheduleAfter {
					pub after: schedule_after::After,
					pub maybe_periodic: schedule_after::MaybePeriodic,
					pub priority: schedule_after::Priority,
					pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<schedule_after::Call>,
				}
				pub mod schedule_after {
					use super::runtime_types;
					pub type After = ::core::primitive::u32;
					pub type MaybePeriodic =
						::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
					pub type Priority = ::core::primitive::u8;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ScheduleAfter {
					const PALLET: &'static str = "Scheduler";
					const CALL: &'static str = "schedule_after";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Schedule a named task after a delay."]
				pub struct ScheduleNamedAfter {
					pub id: schedule_named_after::Id,
					pub after: schedule_named_after::After,
					pub maybe_periodic: schedule_named_after::MaybePeriodic,
					pub priority: schedule_named_after::Priority,
					pub call:
						::subxt::ext::subxt_core::alloc::boxed::Box<schedule_named_after::Call>,
				}
				pub mod schedule_named_after {
					use super::runtime_types;
					pub type Id = [::core::primitive::u8; 32usize];
					pub type After = ::core::primitive::u32;
					pub type MaybePeriodic =
						::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
					pub type Priority = ::core::primitive::u8;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ScheduleNamedAfter {
					const PALLET: &'static str = "Scheduler";
					const CALL: &'static str = "schedule_named_after";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Anonymously schedule a task."]
				pub fn schedule(
					&self,
					when: types::schedule::When,
					maybe_periodic: types::schedule::MaybePeriodic,
					priority: types::schedule::Priority,
					call: types::schedule::Call,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Schedule> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Scheduler",
						"schedule",
						types::Schedule {
							when,
							maybe_periodic,
							priority,
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
						},
						[
							234u8, 0u8, 22u8, 80u8, 100u8, 195u8, 78u8, 85u8, 97u8, 73u8, 184u8,
							235u8, 220u8, 88u8, 73u8, 39u8, 137u8, 3u8, 79u8, 239u8, 194u8, 74u8,
							255u8, 137u8, 98u8, 213u8, 48u8, 11u8, 99u8, 20u8, 87u8, 197u8,
						],
					)
				}
				#[doc = "Cancel an anonymously scheduled task."]
				pub fn cancel(
					&self,
					when: types::cancel::When,
					index: types::cancel::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Cancel> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Scheduler",
						"cancel",
						types::Cancel { when, index },
						[
							183u8, 204u8, 143u8, 86u8, 17u8, 130u8, 132u8, 91u8, 133u8, 168u8,
							103u8, 129u8, 114u8, 56u8, 123u8, 42u8, 123u8, 120u8, 221u8, 211u8,
							26u8, 85u8, 82u8, 246u8, 192u8, 39u8, 254u8, 45u8, 147u8, 56u8, 178u8,
							133u8,
						],
					)
				}
				#[doc = "Schedule a named task."]
				pub fn schedule_named(
					&self,
					id: types::schedule_named::Id,
					when: types::schedule_named::When,
					maybe_periodic: types::schedule_named::MaybePeriodic,
					priority: types::schedule_named::Priority,
					call: types::schedule_named::Call,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ScheduleNamed>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Scheduler",
						"schedule_named",
						types::ScheduleNamed {
							id,
							when,
							maybe_periodic,
							priority,
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
						},
						[
							209u8, 46u8, 158u8, 232u8, 30u8, 199u8, 39u8, 105u8, 121u8, 248u8,
							130u8, 126u8, 246u8, 51u8, 24u8, 19u8, 111u8, 169u8, 176u8, 103u8,
							167u8, 222u8, 46u8, 92u8, 5u8, 191u8, 199u8, 215u8, 242u8, 89u8, 106u8,
							34u8,
						],
					)
				}
				#[doc = "Cancel a named scheduled task."]
				pub fn cancel_named(
					&self,
					id: types::cancel_named::Id,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelNamed> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Scheduler",
						"cancel_named",
						types::CancelNamed { id },
						[
							205u8, 35u8, 28u8, 57u8, 224u8, 7u8, 49u8, 233u8, 236u8, 163u8, 93u8,
							236u8, 103u8, 69u8, 65u8, 51u8, 121u8, 84u8, 9u8, 196u8, 147u8, 122u8,
							227u8, 200u8, 181u8, 233u8, 62u8, 240u8, 174u8, 83u8, 129u8, 193u8,
						],
					)
				}
				#[doc = "Anonymously schedule a task after a delay."]
				pub fn schedule_after(
					&self,
					after: types::schedule_after::After,
					maybe_periodic: types::schedule_after::MaybePeriodic,
					priority: types::schedule_after::Priority,
					call: types::schedule_after::Call,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ScheduleAfter>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Scheduler",
						"schedule_after",
						types::ScheduleAfter {
							after,
							maybe_periodic,
							priority,
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
						},
						[
							215u8, 238u8, 141u8, 37u8, 182u8, 249u8, 164u8, 31u8, 129u8, 141u8,
							235u8, 173u8, 101u8, 245u8, 179u8, 226u8, 179u8, 123u8, 130u8, 55u8,
							35u8, 241u8, 219u8, 125u8, 22u8, 230u8, 144u8, 175u8, 179u8, 170u8,
							244u8, 217u8,
						],
					)
				}
				#[doc = "Schedule a named task after a delay."]
				pub fn schedule_named_after(
					&self,
					id: types::schedule_named_after::Id,
					after: types::schedule_named_after::After,
					maybe_periodic: types::schedule_named_after::MaybePeriodic,
					priority: types::schedule_named_after::Priority,
					call: types::schedule_named_after::Call,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ScheduleNamedAfter>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Scheduler",
						"schedule_named_after",
						types::ScheduleNamedAfter {
							id,
							after,
							maybe_periodic,
							priority,
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
						},
						[
							143u8, 89u8, 143u8, 236u8, 107u8, 13u8, 100u8, 148u8, 78u8, 225u8,
							15u8, 138u8, 142u8, 148u8, 98u8, 229u8, 45u8, 45u8, 243u8, 178u8,
							233u8, 39u8, 108u8, 170u8, 52u8, 123u8, 154u8, 250u8, 229u8, 122u8,
							254u8, 24u8,
						],
					)
				}
			}
		}
		#[doc = "Events type."]
		pub type Event = runtime_types::pallet_scheduler::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Scheduled some task."]
			pub struct Scheduled {
				pub when: scheduled::When,
				pub index: scheduled::Index,
			}
			pub mod scheduled {
				use super::runtime_types;
				pub type When = ::core::primitive::u32;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Scheduled {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Scheduled";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Canceled some task."]
			pub struct Canceled {
				pub when: canceled::When,
				pub index: canceled::Index,
			}
			pub mod canceled {
				use super::runtime_types;
				pub type When = ::core::primitive::u32;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Canceled {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Canceled";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Dispatched some task."]
			pub struct Dispatched {
				pub task: dispatched::Task,
				pub id: dispatched::Id,
				pub result: dispatched::Result,
			}
			pub mod dispatched {
				use super::runtime_types;
				pub type Task = (::core::primitive::u32, ::core::primitive::u32);
				pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Dispatched {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "Dispatched";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The call for the provided hash was not found so the task has been aborted."]
			pub struct CallUnavailable {
				pub task: call_unavailable::Task,
				pub id: call_unavailable::Id,
			}
			pub mod call_unavailable {
				use super::runtime_types;
				pub type Task = (::core::primitive::u32, ::core::primitive::u32);
				pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for CallUnavailable {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "CallUnavailable";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The given task was unable to be renewed since the agenda is full at that block."]
			pub struct PeriodicFailed {
				pub task: periodic_failed::Task,
				pub id: periodic_failed::Id,
			}
			pub mod periodic_failed {
				use super::runtime_types;
				pub type Task = (::core::primitive::u32, ::core::primitive::u32);
				pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for PeriodicFailed {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "PeriodicFailed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The given task can never be executed since it is overweight."]
			pub struct PermanentlyOverweight {
				pub task: permanently_overweight::Task,
				pub id: permanently_overweight::Id,
			}
			pub mod permanently_overweight {
				use super::runtime_types;
				pub type Task = (::core::primitive::u32, ::core::primitive::u32);
				pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for PermanentlyOverweight {
				const PALLET: &'static str = "Scheduler";
				const EVENT: &'static str = "PermanentlyOverweight";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod incomplete_since {
					use super::runtime_types;
					pub type IncompleteSince = ::core::primitive::u32;
				}
				pub mod agenda {
					use super::runtime_types;
					pub type Agenda = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::option::Option<
							runtime_types::pallet_scheduler::Scheduled<
								[::core::primitive::u8; 32usize],
								runtime_types::frame_support::traits::preimages::Bounded<
									runtime_types::composable_runtime::RuntimeCall,
								>,
								::core::primitive::u32,
								runtime_types::composable_runtime::OriginCaller,
								::subxt::ext::subxt_core::utils::AccountId32,
							>,
						>,
					>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod lookup {
					use super::runtime_types;
					pub type Lookup = (::core::primitive::u32, ::core::primitive::u32);
					pub type Param0 = [::core::primitive::u8; 32usize];
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn incomplete_since(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::incomplete_since::IncompleteSince,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Scheduler",
						"IncompleteSince",
						(),
						[
							250u8, 83u8, 64u8, 167u8, 205u8, 59u8, 225u8, 97u8, 205u8, 12u8, 76u8,
							130u8, 197u8, 4u8, 111u8, 208u8, 92u8, 217u8, 145u8, 119u8, 38u8,
							135u8, 1u8, 242u8, 228u8, 143u8, 56u8, 25u8, 115u8, 233u8, 227u8, 66u8,
						],
					)
				}
				#[doc = " Items to be executed, indexed by the block number that they should be executed on."]
				pub fn agenda_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::agenda::Agenda,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Scheduler",
						"Agenda",
						(),
						[
							252u8, 111u8, 54u8, 143u8, 126u8, 135u8, 27u8, 72u8, 186u8, 87u8, 28u8,
							130u8, 46u8, 67u8, 48u8, 193u8, 85u8, 156u8, 202u8, 156u8, 243u8,
							172u8, 168u8, 178u8, 103u8, 50u8, 6u8, 186u8, 143u8, 59u8, 20u8, 160u8,
						],
					)
				}
				#[doc = " Items to be executed, indexed by the block number that they should be executed on."]
				pub fn agenda(
					&self,
					_0: impl ::core::borrow::Borrow<types::agenda::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::agenda::Param0,
					>,
					types::agenda::Agenda,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Scheduler",
						"Agenda",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							252u8, 111u8, 54u8, 143u8, 126u8, 135u8, 27u8, 72u8, 186u8, 87u8, 28u8,
							130u8, 46u8, 67u8, 48u8, 193u8, 85u8, 156u8, 202u8, 156u8, 243u8,
							172u8, 168u8, 178u8, 103u8, 50u8, 6u8, 186u8, 143u8, 59u8, 20u8, 160u8,
						],
					)
				}
				#[doc = " Lookup from a name to the block number and index of the task."]
				#[doc = ""]
				#[doc = " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4"]
				#[doc = " identities."]
				pub fn lookup_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::lookup::Lookup,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Scheduler",
						"Lookup",
						(),
						[
							24u8, 87u8, 96u8, 127u8, 136u8, 205u8, 238u8, 174u8, 71u8, 110u8, 65u8,
							98u8, 228u8, 167u8, 99u8, 71u8, 171u8, 186u8, 12u8, 218u8, 137u8, 70u8,
							70u8, 228u8, 153u8, 111u8, 165u8, 114u8, 229u8, 136u8, 118u8, 131u8,
						],
					)
				}
				#[doc = " Lookup from a name to the block number and index of the task."]
				#[doc = ""]
				#[doc = " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4"]
				#[doc = " identities."]
				pub fn lookup(
					&self,
					_0: impl ::core::borrow::Borrow<types::lookup::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::lookup::Param0,
					>,
					types::lookup::Lookup,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Scheduler",
						"Lookup",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							24u8, 87u8, 96u8, 127u8, 136u8, 205u8, 238u8, 174u8, 71u8, 110u8, 65u8,
							98u8, 228u8, 167u8, 99u8, 71u8, 171u8, 186u8, 12u8, 218u8, 137u8, 70u8,
							70u8, 228u8, 153u8, 111u8, 165u8, 114u8, 229u8, 136u8, 118u8, 131u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The maximum weight that may be scheduled per block for any dispatchables."]
				pub fn maximum_weight(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::sp_weights::weight_v2::Weight,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Scheduler",
						"MaximumWeight",
						[
							149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
							56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
							128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
							112u8,
						],
					)
				}
				#[doc = " The maximum number of scheduled calls in the queue for a single block."]
				#[doc = ""]
				#[doc = " NOTE:"]
				#[doc = " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a"]
				#[doc = " higher limit under `runtime-benchmarks` feature."]
				pub fn max_scheduled_per_block(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Scheduler",
						"MaxScheduledPerBlock",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod utility {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_utility::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_utility::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Send a batch of dispatch calls."]
				#[doc = ""]
				#[doc = "May be called from any origin except `None`."]
				#[doc = ""]
				#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
				#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
				#[doc = ""]
				#[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
				#[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(C) where C is the number of calls to be batched."]
				#[doc = ""]
				#[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
				#[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
				#[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
				#[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
				#[doc = "event is deposited."]
				pub struct Batch {
					pub calls: batch::Calls,
				}
				pub mod batch {
					use super::runtime_types;
					pub type Calls = ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::composable_runtime::RuntimeCall,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Batch {
					const PALLET: &'static str = "Utility";
					const CALL: &'static str = "batch";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Send a call through an indexed pseudonym of the sender."]
				#[doc = ""]
				#[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
				#[doc = "use the same filter as the origin of this call."]
				#[doc = ""]
				#[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
				#[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
				#[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
				#[doc = "in the Multisig pallet instead."]
				#[doc = ""]
				#[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				pub struct AsDerivative {
					pub index: as_derivative::Index,
					pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<as_derivative::Call>,
				}
				pub mod as_derivative {
					use super::runtime_types;
					pub type Index = ::core::primitive::u16;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AsDerivative {
					const PALLET: &'static str = "Utility";
					const CALL: &'static str = "as_derivative";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Send a batch of dispatch calls and atomically execute them."]
				#[doc = "The whole transaction will rollback and fail if any of the calls failed."]
				#[doc = ""]
				#[doc = "May be called from any origin except `None`."]
				#[doc = ""]
				#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
				#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
				#[doc = ""]
				#[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
				#[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(C) where C is the number of calls to be batched."]
				pub struct BatchAll {
					pub calls: batch_all::Calls,
				}
				pub mod batch_all {
					use super::runtime_types;
					pub type Calls = ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::composable_runtime::RuntimeCall,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for BatchAll {
					const PALLET: &'static str = "Utility";
					const CALL: &'static str = "batch_all";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Dispatches a function call with a provided origin."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(1)."]
				pub struct DispatchAs {
					pub as_origin:
						::subxt::ext::subxt_core::alloc::boxed::Box<dispatch_as::AsOrigin>,
					pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<dispatch_as::Call>,
				}
				pub mod dispatch_as {
					use super::runtime_types;
					pub type AsOrigin = runtime_types::composable_runtime::OriginCaller;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for DispatchAs {
					const PALLET: &'static str = "Utility";
					const CALL: &'static str = "dispatch_as";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Send a batch of dispatch calls."]
				#[doc = "Unlike `batch`, it allows errors and won't interrupt."]
				#[doc = ""]
				#[doc = "May be called from any origin except `None`."]
				#[doc = ""]
				#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
				#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
				#[doc = ""]
				#[doc = "If origin is root then the calls are dispatch without checking origin filter. (This"]
				#[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(C) where C is the number of calls to be batched."]
				pub struct ForceBatch {
					pub calls: force_batch::Calls,
				}
				pub mod force_batch {
					use super::runtime_types;
					pub type Calls = ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::composable_runtime::RuntimeCall,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceBatch {
					const PALLET: &'static str = "Utility";
					const CALL: &'static str = "force_batch";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Dispatch a function call with a specified weight."]
				#[doc = ""]
				#[doc = "This function does not check the weight of the call, and instead allows the"]
				#[doc = "Root origin to specify the weight of the call."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				pub struct WithWeight {
					pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<with_weight::Call>,
					pub weight: with_weight::Weight,
				}
				pub mod with_weight {
					use super::runtime_types;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
					pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for WithWeight {
					const PALLET: &'static str = "Utility";
					const CALL: &'static str = "with_weight";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Send a batch of dispatch calls."]
				#[doc = ""]
				#[doc = "May be called from any origin except `None`."]
				#[doc = ""]
				#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
				#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
				#[doc = ""]
				#[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
				#[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(C) where C is the number of calls to be batched."]
				#[doc = ""]
				#[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
				#[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
				#[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
				#[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
				#[doc = "event is deposited."]
				pub fn batch(
					&self,
					calls: types::batch::Calls,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Batch> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Utility",
						"batch",
						types::Batch { calls },
						[
							220u8, 60u8, 13u8, 171u8, 81u8, 221u8, 6u8, 6u8, 73u8, 238u8, 80u8,
							39u8, 63u8, 72u8, 169u8, 97u8, 241u8, 1u8, 119u8, 132u8, 69u8, 182u8,
							139u8, 90u8, 45u8, 105u8, 227u8, 191u8, 218u8, 39u8, 108u8, 109u8,
						],
					)
				}
				#[doc = "Send a call through an indexed pseudonym of the sender."]
				#[doc = ""]
				#[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
				#[doc = "use the same filter as the origin of this call."]
				#[doc = ""]
				#[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
				#[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
				#[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
				#[doc = "in the Multisig pallet instead."]
				#[doc = ""]
				#[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				pub fn as_derivative(
					&self,
					index: types::as_derivative::Index,
					call: types::as_derivative::Call,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AsDerivative> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Utility",
						"as_derivative",
						types::AsDerivative {
							index,
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
						},
						[
							217u8, 92u8, 114u8, 135u8, 31u8, 83u8, 57u8, 58u8, 115u8, 176u8, 185u8,
							125u8, 213u8, 23u8, 188u8, 109u8, 116u8, 208u8, 5u8, 179u8, 1u8, 210u8,
							185u8, 78u8, 173u8, 255u8, 113u8, 202u8, 122u8, 9u8, 243u8, 169u8,
						],
					)
				}
				#[doc = "Send a batch of dispatch calls and atomically execute them."]
				#[doc = "The whole transaction will rollback and fail if any of the calls failed."]
				#[doc = ""]
				#[doc = "May be called from any origin except `None`."]
				#[doc = ""]
				#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
				#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
				#[doc = ""]
				#[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
				#[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(C) where C is the number of calls to be batched."]
				pub fn batch_all(
					&self,
					calls: types::batch_all::Calls,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::BatchAll> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Utility",
						"batch_all",
						types::BatchAll { calls },
						[
							169u8, 220u8, 2u8, 130u8, 3u8, 8u8, 95u8, 158u8, 17u8, 245u8, 0u8,
							24u8, 113u8, 149u8, 76u8, 0u8, 158u8, 182u8, 74u8, 211u8, 42u8, 42u8,
							197u8, 12u8, 156u8, 58u8, 139u8, 254u8, 156u8, 11u8, 127u8, 131u8,
						],
					)
				}
				#[doc = "Dispatches a function call with a provided origin."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(1)."]
				pub fn dispatch_as(
					&self,
					as_origin: types::dispatch_as::AsOrigin,
					call: types::dispatch_as::Call,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::DispatchAs> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Utility",
						"dispatch_as",
						types::DispatchAs {
							as_origin: ::subxt::ext::subxt_core::alloc::boxed::Box::new(as_origin),
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
						},
						[
							100u8, 226u8, 5u8, 51u8, 233u8, 207u8, 99u8, 77u8, 43u8, 3u8, 105u8,
							132u8, 59u8, 169u8, 159u8, 244u8, 250u8, 51u8, 116u8, 28u8, 74u8,
							208u8, 154u8, 169u8, 225u8, 79u8, 17u8, 164u8, 245u8, 119u8, 84u8,
							169u8,
						],
					)
				}
				#[doc = "Send a batch of dispatch calls."]
				#[doc = "Unlike `batch`, it allows errors and won't interrupt."]
				#[doc = ""]
				#[doc = "May be called from any origin except `None`."]
				#[doc = ""]
				#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
				#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
				#[doc = ""]
				#[doc = "If origin is root then the calls are dispatch without checking origin filter. (This"]
				#[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
				#[doc = ""]
				#[doc = "## Complexity"]
				#[doc = "- O(C) where C is the number of calls to be batched."]
				pub fn force_batch(
					&self,
					calls: types::force_batch::Calls,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceBatch> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Utility",
						"force_batch",
						types::ForceBatch { calls },
						[
							219u8, 204u8, 81u8, 138u8, 115u8, 151u8, 165u8, 56u8, 98u8, 203u8,
							114u8, 238u8, 64u8, 34u8, 18u8, 172u8, 242u8, 18u8, 109u8, 168u8,
							122u8, 212u8, 239u8, 77u8, 10u8, 170u8, 40u8, 138u8, 88u8, 109u8,
							165u8, 140u8,
						],
					)
				}
				#[doc = "Dispatch a function call with a specified weight."]
				#[doc = ""]
				#[doc = "This function does not check the weight of the call, and instead allows the"]
				#[doc = "Root origin to specify the weight of the call."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				pub fn with_weight(
					&self,
					call: types::with_weight::Call,
					weight: types::with_weight::Weight,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::WithWeight> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Utility",
						"with_weight",
						types::WithWeight {
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
							weight,
						},
						[
							71u8, 65u8, 70u8, 11u8, 149u8, 31u8, 247u8, 62u8, 108u8, 196u8, 197u8,
							181u8, 156u8, 236u8, 190u8, 44u8, 234u8, 240u8, 60u8, 60u8, 148u8,
							207u8, 252u8, 160u8, 110u8, 10u8, 121u8, 49u8, 14u8, 233u8, 43u8, 47u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_utility::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
			#[doc = "well as the error."]
			pub struct BatchInterrupted {
				pub index: batch_interrupted::Index,
				pub error: batch_interrupted::Error,
			}
			pub mod batch_interrupted {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Error = runtime_types::sp_runtime::DispatchError;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for BatchInterrupted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchInterrupted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Batch of dispatches completed fully with no error."]
			pub struct BatchCompleted;
			impl ::subxt::ext::subxt_core::events::StaticEvent for BatchCompleted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchCompleted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Batch of dispatches completed but has errors."]
			pub struct BatchCompletedWithErrors;
			impl ::subxt::ext::subxt_core::events::StaticEvent for BatchCompletedWithErrors {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "BatchCompletedWithErrors";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A single item within a Batch of dispatches has completed with no error."]
			pub struct ItemCompleted;
			impl ::subxt::ext::subxt_core::events::StaticEvent for ItemCompleted {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "ItemCompleted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A single item within a Batch of dispatches has completed with error."]
			pub struct ItemFailed {
				pub error: item_failed::Error,
			}
			pub mod item_failed {
				use super::runtime_types;
				pub type Error = runtime_types::sp_runtime::DispatchError;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ItemFailed {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "ItemFailed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A call was dispatched."]
			pub struct DispatchedAs {
				pub result: dispatched_as::Result,
			}
			pub mod dispatched_as {
				use super::runtime_types;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for DispatchedAs {
				const PALLET: &'static str = "Utility";
				const EVENT: &'static str = "DispatchedAs";
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The limit on the number of batched calls."]
				pub fn batched_calls_limit(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Utility",
						"batched_calls_limit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod preimage {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_preimage::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_preimage::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Register a preimage on-chain."]
				#[doc = ""]
				#[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
				#[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
				pub struct NotePreimage {
					pub bytes: note_preimage::Bytes,
				}
				pub mod note_preimage {
					use super::runtime_types;
					pub type Bytes =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for NotePreimage {
					const PALLET: &'static str = "Preimage";
					const CALL: &'static str = "note_preimage";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Clear an unrequested preimage from the runtime storage."]
				#[doc = ""]
				#[doc = "If `len` is provided, then it will be a much cheaper operation."]
				#[doc = ""]
				#[doc = "- `hash`: The hash of the preimage to be removed from the store."]
				#[doc = "- `len`: The length of the preimage of `hash`."]
				pub struct UnnotePreimage {
					pub hash: unnote_preimage::Hash,
				}
				pub mod unnote_preimage {
					use super::runtime_types;
					pub type Hash = ::subxt::ext::subxt_core::utils::H256;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UnnotePreimage {
					const PALLET: &'static str = "Preimage";
					const CALL: &'static str = "unnote_preimage";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
				#[doc = ""]
				#[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
				#[doc = "a user may have paid, and take the control of the preimage out of their hands."]
				pub struct RequestPreimage {
					pub hash: request_preimage::Hash,
				}
				pub mod request_preimage {
					use super::runtime_types;
					pub type Hash = ::subxt::ext::subxt_core::utils::H256;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RequestPreimage {
					const PALLET: &'static str = "Preimage";
					const CALL: &'static str = "request_preimage";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Clear a previously made request for a preimage."]
				#[doc = ""]
				#[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
				pub struct UnrequestPreimage {
					pub hash: unrequest_preimage::Hash,
				}
				pub mod unrequest_preimage {
					use super::runtime_types;
					pub type Hash = ::subxt::ext::subxt_core::utils::H256;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UnrequestPreimage {
					const PALLET: &'static str = "Preimage";
					const CALL: &'static str = "unrequest_preimage";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Register a preimage on-chain."]
				#[doc = ""]
				#[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
				#[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
				pub fn note_preimage(
					&self,
					bytes: types::note_preimage::Bytes,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::NotePreimage> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Preimage",
						"note_preimage",
						types::NotePreimage { bytes },
						[
							121u8, 88u8, 18u8, 92u8, 176u8, 15u8, 192u8, 198u8, 146u8, 198u8, 38u8,
							242u8, 213u8, 83u8, 7u8, 230u8, 14u8, 110u8, 235u8, 32u8, 215u8, 26u8,
							192u8, 217u8, 113u8, 224u8, 206u8, 96u8, 177u8, 198u8, 246u8, 33u8,
						],
					)
				}
				#[doc = "Clear an unrequested preimage from the runtime storage."]
				#[doc = ""]
				#[doc = "If `len` is provided, then it will be a much cheaper operation."]
				#[doc = ""]
				#[doc = "- `hash`: The hash of the preimage to be removed from the store."]
				#[doc = "- `len`: The length of the preimage of `hash`."]
				pub fn unnote_preimage(
					&self,
					hash: types::unnote_preimage::Hash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UnnotePreimage>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Preimage",
						"unnote_preimage",
						types::UnnotePreimage { hash },
						[
							188u8, 116u8, 222u8, 22u8, 127u8, 215u8, 2u8, 133u8, 96u8, 202u8,
							190u8, 123u8, 203u8, 43u8, 200u8, 161u8, 226u8, 24u8, 49u8, 36u8,
							221u8, 160u8, 130u8, 119u8, 30u8, 138u8, 144u8, 85u8, 5u8, 164u8,
							252u8, 222u8,
						],
					)
				}
				#[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
				#[doc = ""]
				#[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
				#[doc = "a user may have paid, and take the control of the preimage out of their hands."]
				pub fn request_preimage(
					&self,
					hash: types::request_preimage::Hash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RequestPreimage>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Preimage",
						"request_preimage",
						types::RequestPreimage { hash },
						[
							87u8, 0u8, 204u8, 111u8, 43u8, 115u8, 64u8, 209u8, 133u8, 13u8, 83u8,
							45u8, 164u8, 166u8, 233u8, 105u8, 242u8, 238u8, 235u8, 208u8, 113u8,
							134u8, 93u8, 242u8, 86u8, 32u8, 7u8, 152u8, 107u8, 208u8, 79u8, 59u8,
						],
					)
				}
				#[doc = "Clear a previously made request for a preimage."]
				#[doc = ""]
				#[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
				pub fn unrequest_preimage(
					&self,
					hash: types::unrequest_preimage::Hash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UnrequestPreimage>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Preimage",
						"unrequest_preimage",
						types::UnrequestPreimage { hash },
						[
							55u8, 37u8, 224u8, 149u8, 142u8, 120u8, 8u8, 68u8, 183u8, 225u8, 255u8,
							240u8, 254u8, 111u8, 58u8, 200u8, 113u8, 217u8, 177u8, 203u8, 107u8,
							104u8, 233u8, 87u8, 252u8, 53u8, 33u8, 112u8, 116u8, 254u8, 117u8,
							134u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_preimage::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A preimage has been noted."]
			pub struct Noted {
				pub hash: noted::Hash,
			}
			pub mod noted {
				use super::runtime_types;
				pub type Hash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Noted {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Noted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A preimage has been requested."]
			pub struct Requested {
				pub hash: requested::Hash,
			}
			pub mod requested {
				use super::runtime_types;
				pub type Hash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Requested {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Requested";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A preimage has ben cleared."]
			pub struct Cleared {
				pub hash: cleared::Hash,
			}
			pub mod cleared {
				use super::runtime_types;
				pub type Hash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Cleared {
				const PALLET: &'static str = "Preimage";
				const EVENT: &'static str = "Cleared";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod status_for {
					use super::runtime_types;
					pub type StatusFor = runtime_types::pallet_preimage::RequestStatus<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u128,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
				}
				pub mod preimage_for {
					use super::runtime_types;
					pub type PreimageFor =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
					pub type Param1 = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The request status of a given hash."]
				pub fn status_for_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::status_for::StatusFor,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Preimage",
						"StatusFor",
						(),
						[
							187u8, 100u8, 54u8, 112u8, 96u8, 129u8, 36u8, 149u8, 127u8, 226u8,
							126u8, 171u8, 72u8, 189u8, 59u8, 126u8, 204u8, 125u8, 67u8, 204u8,
							231u8, 6u8, 212u8, 135u8, 166u8, 252u8, 5u8, 46u8, 111u8, 120u8, 54u8,
							209u8,
						],
					)
				}
				#[doc = " The request status of a given hash."]
				pub fn status_for(
					&self,
					_0: impl ::core::borrow::Borrow<types::status_for::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::status_for::Param0,
					>,
					types::status_for::StatusFor,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Preimage",
						"StatusFor",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							187u8, 100u8, 54u8, 112u8, 96u8, 129u8, 36u8, 149u8, 127u8, 226u8,
							126u8, 171u8, 72u8, 189u8, 59u8, 126u8, 204u8, 125u8, 67u8, 204u8,
							231u8, 6u8, 212u8, 135u8, 166u8, 252u8, 5u8, 46u8, 111u8, 120u8, 54u8,
							209u8,
						],
					)
				}
				pub fn preimage_for_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::preimage_for::PreimageFor,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Preimage",
						"PreimageFor",
						(),
						[
							106u8, 5u8, 17u8, 46u8, 6u8, 184u8, 177u8, 113u8, 169u8, 34u8, 119u8,
							141u8, 117u8, 40u8, 30u8, 94u8, 187u8, 35u8, 206u8, 216u8, 143u8,
							208u8, 49u8, 156u8, 200u8, 255u8, 109u8, 200u8, 210u8, 134u8, 24u8,
							139u8,
						],
					)
				}
				pub fn preimage_for_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::preimage_for::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::preimage_for::Param0,
					>,
					types::preimage_for::PreimageFor,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Preimage",
						"PreimageFor",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							106u8, 5u8, 17u8, 46u8, 6u8, 184u8, 177u8, 113u8, 169u8, 34u8, 119u8,
							141u8, 117u8, 40u8, 30u8, 94u8, 187u8, 35u8, 206u8, 216u8, 143u8,
							208u8, 49u8, 156u8, 200u8, 255u8, 109u8, 200u8, 210u8, 134u8, 24u8,
							139u8,
						],
					)
				}
				pub fn preimage_for(
					&self,
					_0: impl ::core::borrow::Borrow<types::preimage_for::Param0>,
					_1: impl ::core::borrow::Borrow<types::preimage_for::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::preimage_for::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::preimage_for::Param1,
						>,
					),
					types::preimage_for::PreimageFor,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Preimage",
						"PreimageFor",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							106u8, 5u8, 17u8, 46u8, 6u8, 184u8, 177u8, 113u8, 169u8, 34u8, 119u8,
							141u8, 117u8, 40u8, 30u8, 94u8, 187u8, 35u8, 206u8, 216u8, 143u8,
							208u8, 49u8, 156u8, 200u8, 255u8, 109u8, 200u8, 210u8, 134u8, 24u8,
							139u8,
						],
					)
				}
			}
		}
	}
	pub mod proxy {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_proxy::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_proxy::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
				#[doc = "`add_proxy`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
				#[doc = "- `call`: The call to be made by the `real` account."]
				pub struct Proxy {
					pub real: proxy::Real,
					pub force_proxy_type: proxy::ForceProxyType,
					pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<proxy::Call>,
				}
				pub mod proxy {
					use super::runtime_types;
					pub type Real = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type ForceProxyType = ::core::option::Option<
						runtime_types::composable_traits::account_proxy::ProxyType,
					>;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Proxy {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "proxy";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
				#[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
				#[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
				#[doc = "zero."]
				pub struct AddProxy {
					pub delegate: add_proxy::Delegate,
					pub proxy_type: add_proxy::ProxyType,
					pub delay: add_proxy::Delay,
				}
				pub mod add_proxy {
					use super::runtime_types;
					pub type Delegate = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type ProxyType = runtime_types::composable_traits::account_proxy::ProxyType;
					pub type Delay = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddProxy {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "add_proxy";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Unregister a proxy account for the sender."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
				#[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
				pub struct RemoveProxy {
					pub delegate: remove_proxy::Delegate,
					pub proxy_type: remove_proxy::ProxyType,
					pub delay: remove_proxy::Delay,
				}
				pub mod remove_proxy {
					use super::runtime_types;
					pub type Delegate = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type ProxyType = runtime_types::composable_traits::account_proxy::ProxyType;
					pub type Delay = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveProxy {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "remove_proxy";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Unregister all proxy accounts for the sender."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "WARNING: This may be called on accounts created by `pure`, however if done, then"]
				#[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
				pub struct RemoveProxies;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveProxies {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "remove_proxies";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
				#[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
				#[doc = ""]
				#[doc = "Requires a `Signed` origin."]
				#[doc = ""]
				#[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
				#[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
				#[doc = "allow for maximum flexibility."]
				#[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
				#[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
				#[doc = "want to use `0`."]
				#[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
				#[doc = "zero."]
				#[doc = ""]
				#[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
				#[doc = "same sender, with the same parameters."]
				#[doc = ""]
				#[doc = "Fails if there are insufficient funds to pay for deposit."]
				pub struct CreatePure {
					pub proxy_type: create_pure::ProxyType,
					pub delay: create_pure::Delay,
					pub index: create_pure::Index,
				}
				pub mod create_pure {
					use super::runtime_types;
					pub type ProxyType = runtime_types::composable_traits::account_proxy::ProxyType;
					pub type Delay = ::core::primitive::u32;
					pub type Index = ::core::primitive::u16;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CreatePure {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "create_pure";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Removes a previously spawned pure proxy."]
				#[doc = ""]
				#[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
				#[doc = "inaccessible."]
				#[doc = ""]
				#[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
				#[doc = "`pure` with corresponding parameters."]
				#[doc = ""]
				#[doc = "- `spawner`: The account that originally called `pure` to create this account."]
				#[doc = "- `index`: The disambiguation index originally passed to `pure`. Probably `0`."]
				#[doc = "- `proxy_type`: The proxy type originally passed to `pure`."]
				#[doc = "- `height`: The height of the chain when the call to `pure` was processed."]
				#[doc = "- `ext_index`: The extrinsic index in which the call to `pure` was processed."]
				#[doc = ""]
				#[doc = "Fails with `NoPermission` in case the caller is not a previously created pure"]
				#[doc = "account whose `pure` call has corresponding parameters."]
				pub struct KillPure {
					pub spawner: kill_pure::Spawner,
					pub proxy_type: kill_pure::ProxyType,
					pub index: kill_pure::Index,
					#[codec(compact)]
					pub height: kill_pure::Height,
					#[codec(compact)]
					pub ext_index: kill_pure::ExtIndex,
				}
				pub mod kill_pure {
					use super::runtime_types;
					pub type Spawner = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type ProxyType = runtime_types::composable_traits::account_proxy::ProxyType;
					pub type Index = ::core::primitive::u16;
					pub type Height = ::core::primitive::u32;
					pub type ExtIndex = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for KillPure {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "kill_pure";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Publish the hash of a proxy-call that will be made in the future."]
				#[doc = ""]
				#[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
				#[doc = "if the delay associated with the proxy relationship is greater than zero."]
				#[doc = ""]
				#[doc = "No more than `MaxPending` announcements may be made at any one time."]
				#[doc = ""]
				#[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
				#[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
				pub struct Announce {
					pub real: announce::Real,
					pub call_hash: announce::CallHash,
				}
				pub mod announce {
					use super::runtime_types;
					pub type Real = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Announce {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "announce";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove a given announcement."]
				#[doc = ""]
				#[doc = "May be called by a proxy account to remove a call they previously announced and return"]
				#[doc = "the deposit."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
				pub struct RemoveAnnouncement {
					pub real: remove_announcement::Real,
					pub call_hash: remove_announcement::CallHash,
				}
				pub mod remove_announcement {
					use super::runtime_types;
					pub type Real = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveAnnouncement {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "remove_announcement";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove the given announcement of a delegate."]
				#[doc = ""]
				#[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
				#[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `delegate`: The account that previously announced the call."]
				#[doc = "- `call_hash`: The hash of the call to be made."]
				pub struct RejectAnnouncement {
					pub delegate: reject_announcement::Delegate,
					pub call_hash: reject_announcement::CallHash,
				}
				pub mod reject_announcement {
					use super::runtime_types;
					pub type Delegate = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RejectAnnouncement {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "reject_announcement";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
				#[doc = "`add_proxy`."]
				#[doc = ""]
				#[doc = "Removes any corresponding announcement(s)."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
				#[doc = "- `call`: The call to be made by the `real` account."]
				pub struct ProxyAnnounced {
					pub delegate: proxy_announced::Delegate,
					pub real: proxy_announced::Real,
					pub force_proxy_type: proxy_announced::ForceProxyType,
					pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<proxy_announced::Call>,
				}
				pub mod proxy_announced {
					use super::runtime_types;
					pub type Delegate = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Real = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type ForceProxyType = ::core::option::Option<
						runtime_types::composable_traits::account_proxy::ProxyType,
					>;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ProxyAnnounced {
					const PALLET: &'static str = "Proxy";
					const CALL: &'static str = "proxy_announced";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
				#[doc = "`add_proxy`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
				#[doc = "- `call`: The call to be made by the `real` account."]
				pub fn proxy(
					&self,
					real: types::proxy::Real,
					force_proxy_type: types::proxy::ForceProxyType,
					call: types::proxy::Call,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Proxy> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Proxy",
						"proxy",
						types::Proxy {
							real,
							force_proxy_type,
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
						},
						[
							169u8, 50u8, 55u8, 59u8, 234u8, 189u8, 5u8, 209u8, 60u8, 67u8, 252u8,
							173u8, 36u8, 215u8, 171u8, 94u8, 138u8, 143u8, 196u8, 250u8, 132u8,
							100u8, 180u8, 97u8, 214u8, 127u8, 104u8, 119u8, 102u8, 20u8, 87u8,
							108u8,
						],
					)
				}
				#[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
				#[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
				#[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
				#[doc = "zero."]
				pub fn add_proxy(
					&self,
					delegate: types::add_proxy::Delegate,
					proxy_type: types::add_proxy::ProxyType,
					delay: types::add_proxy::Delay,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AddProxy> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Proxy",
						"add_proxy",
						types::AddProxy { delegate, proxy_type, delay },
						[
							182u8, 165u8, 22u8, 28u8, 42u8, 174u8, 153u8, 169u8, 148u8, 191u8,
							95u8, 104u8, 230u8, 3u8, 150u8, 146u8, 46u8, 155u8, 241u8, 17u8, 28u8,
							103u8, 233u8, 235u8, 181u8, 206u8, 206u8, 110u8, 138u8, 76u8, 153u8,
							87u8,
						],
					)
				}
				#[doc = "Unregister a proxy account for the sender."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
				#[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
				pub fn remove_proxy(
					&self,
					delegate: types::remove_proxy::Delegate,
					proxy_type: types::remove_proxy::ProxyType,
					delay: types::remove_proxy::Delay,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveProxy> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Proxy",
						"remove_proxy",
						types::RemoveProxy { delegate, proxy_type, delay },
						[
							99u8, 175u8, 2u8, 28u8, 173u8, 219u8, 40u8, 183u8, 102u8, 219u8, 148u8,
							107u8, 250u8, 114u8, 239u8, 57u8, 112u8, 212u8, 146u8, 25u8, 251u8,
							185u8, 3u8, 250u8, 223u8, 239u8, 40u8, 222u8, 18u8, 91u8, 53u8, 236u8,
						],
					)
				}
				#[doc = "Unregister all proxy accounts for the sender."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "WARNING: This may be called on accounts created by `pure`, however if done, then"]
				#[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
				pub fn remove_proxies(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveProxies>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Proxy",
						"remove_proxies",
						types::RemoveProxies {},
						[
							1u8, 126u8, 36u8, 227u8, 185u8, 34u8, 218u8, 236u8, 125u8, 231u8, 68u8,
							185u8, 145u8, 63u8, 250u8, 225u8, 103u8, 3u8, 189u8, 37u8, 172u8,
							195u8, 197u8, 216u8, 99u8, 210u8, 240u8, 162u8, 158u8, 132u8, 24u8,
							6u8,
						],
					)
				}
				#[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
				#[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
				#[doc = ""]
				#[doc = "Requires a `Signed` origin."]
				#[doc = ""]
				#[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
				#[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
				#[doc = "allow for maximum flexibility."]
				#[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
				#[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
				#[doc = "want to use `0`."]
				#[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
				#[doc = "zero."]
				#[doc = ""]
				#[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
				#[doc = "same sender, with the same parameters."]
				#[doc = ""]
				#[doc = "Fails if there are insufficient funds to pay for deposit."]
				pub fn create_pure(
					&self,
					proxy_type: types::create_pure::ProxyType,
					delay: types::create_pure::Delay,
					index: types::create_pure::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CreatePure> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Proxy",
						"create_pure",
						types::CreatePure { proxy_type, delay, index },
						[
							165u8, 248u8, 178u8, 202u8, 234u8, 208u8, 97u8, 52u8, 80u8, 66u8,
							120u8, 212u8, 62u8, 109u8, 196u8, 1u8, 136u8, 223u8, 129u8, 156u8,
							148u8, 5u8, 55u8, 164u8, 13u8, 162u8, 146u8, 59u8, 203u8, 5u8, 170u8,
							7u8,
						],
					)
				}
				#[doc = "Removes a previously spawned pure proxy."]
				#[doc = ""]
				#[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
				#[doc = "inaccessible."]
				#[doc = ""]
				#[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
				#[doc = "`pure` with corresponding parameters."]
				#[doc = ""]
				#[doc = "- `spawner`: The account that originally called `pure` to create this account."]
				#[doc = "- `index`: The disambiguation index originally passed to `pure`. Probably `0`."]
				#[doc = "- `proxy_type`: The proxy type originally passed to `pure`."]
				#[doc = "- `height`: The height of the chain when the call to `pure` was processed."]
				#[doc = "- `ext_index`: The extrinsic index in which the call to `pure` was processed."]
				#[doc = ""]
				#[doc = "Fails with `NoPermission` in case the caller is not a previously created pure"]
				#[doc = "account whose `pure` call has corresponding parameters."]
				pub fn kill_pure(
					&self,
					spawner: types::kill_pure::Spawner,
					proxy_type: types::kill_pure::ProxyType,
					index: types::kill_pure::Index,
					height: types::kill_pure::Height,
					ext_index: types::kill_pure::ExtIndex,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::KillPure> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Proxy",
						"kill_pure",
						types::KillPure { spawner, proxy_type, index, height, ext_index },
						[
							249u8, 240u8, 223u8, 4u8, 122u8, 46u8, 42u8, 27u8, 103u8, 144u8, 223u8,
							103u8, 86u8, 43u8, 241u8, 28u8, 142u8, 128u8, 32u8, 232u8, 163u8,
							191u8, 92u8, 109u8, 153u8, 55u8, 171u8, 70u8, 77u8, 80u8, 100u8, 214u8,
						],
					)
				}
				#[doc = "Publish the hash of a proxy-call that will be made in the future."]
				#[doc = ""]
				#[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
				#[doc = "if the delay associated with the proxy relationship is greater than zero."]
				#[doc = ""]
				#[doc = "No more than `MaxPending` announcements may be made at any one time."]
				#[doc = ""]
				#[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
				#[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
				pub fn announce(
					&self,
					real: types::announce::Real,
					call_hash: types::announce::CallHash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Announce> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Proxy",
						"announce",
						types::Announce { real, call_hash },
						[
							32u8, 88u8, 145u8, 33u8, 55u8, 44u8, 136u8, 153u8, 26u8, 111u8, 73u8,
							15u8, 247u8, 188u8, 14u8, 236u8, 221u8, 222u8, 60u8, 97u8, 71u8, 229u8,
							18u8, 120u8, 182u8, 43u8, 67u8, 248u8, 169u8, 80u8, 170u8, 207u8,
						],
					)
				}
				#[doc = "Remove a given announcement."]
				#[doc = ""]
				#[doc = "May be called by a proxy account to remove a call they previously announced and return"]
				#[doc = "the deposit."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
				pub fn remove_announcement(
					&self,
					real: types::remove_announcement::Real,
					call_hash: types::remove_announcement::CallHash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveAnnouncement>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Proxy",
						"remove_announcement",
						types::RemoveAnnouncement { real, call_hash },
						[
							195u8, 224u8, 61u8, 33u8, 27u8, 100u8, 168u8, 18u8, 105u8, 23u8, 220u8,
							168u8, 207u8, 231u8, 136u8, 46u8, 181u8, 85u8, 15u8, 151u8, 126u8,
							227u8, 97u8, 162u8, 232u8, 39u8, 45u8, 255u8, 44u8, 167u8, 237u8, 38u8,
						],
					)
				}
				#[doc = "Remove the given announcement of a delegate."]
				#[doc = ""]
				#[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
				#[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `delegate`: The account that previously announced the call."]
				#[doc = "- `call_hash`: The hash of the call to be made."]
				pub fn reject_announcement(
					&self,
					delegate: types::reject_announcement::Delegate,
					call_hash: types::reject_announcement::CallHash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RejectAnnouncement>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Proxy",
						"reject_announcement",
						types::RejectAnnouncement { delegate, call_hash },
						[
							29u8, 140u8, 243u8, 165u8, 143u8, 166u8, 205u8, 203u8, 111u8, 196u8,
							11u8, 2u8, 4u8, 230u8, 11u8, 136u8, 249u8, 139u8, 224u8, 242u8, 96u8,
							146u8, 118u8, 210u8, 104u8, 77u8, 168u8, 28u8, 67u8, 244u8, 91u8, 65u8,
						],
					)
				}
				#[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
				#[doc = "`add_proxy`."]
				#[doc = ""]
				#[doc = "Removes any corresponding announcement(s)."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
				#[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
				#[doc = "- `call`: The call to be made by the `real` account."]
				pub fn proxy_announced(
					&self,
					delegate: types::proxy_announced::Delegate,
					real: types::proxy_announced::Real,
					force_proxy_type: types::proxy_announced::ForceProxyType,
					call: types::proxy_announced::Call,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ProxyAnnounced>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Proxy",
						"proxy_announced",
						types::ProxyAnnounced {
							delegate,
							real,
							force_proxy_type,
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
						},
						[
							241u8, 170u8, 38u8, 234u8, 3u8, 103u8, 137u8, 218u8, 210u8, 30u8, 65u8,
							253u8, 4u8, 85u8, 172u8, 235u8, 100u8, 23u8, 176u8, 103u8, 203u8, 50u8,
							76u8, 152u8, 75u8, 130u8, 41u8, 241u8, 176u8, 177u8, 51u8, 175u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_proxy::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A proxy was executed correctly, with the given."]
			pub struct ProxyExecuted {
				pub result: proxy_executed::Result,
			}
			pub mod proxy_executed {
				use super::runtime_types;
				pub type Result =
					::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ProxyExecuted {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyExecuted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A pure account has been created by new proxy with given"]
			#[doc = "disambiguation index and proxy type."]
			pub struct PureCreated {
				pub pure: pure_created::Pure,
				pub who: pure_created::Who,
				pub proxy_type: pure_created::ProxyType,
				pub disambiguation_index: pure_created::DisambiguationIndex,
			}
			pub mod pure_created {
				use super::runtime_types;
				pub type Pure = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type ProxyType = runtime_types::composable_traits::account_proxy::ProxyType;
				pub type DisambiguationIndex = ::core::primitive::u16;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for PureCreated {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "PureCreated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An announcement was placed to make a call in the future."]
			pub struct Announced {
				pub real: announced::Real,
				pub proxy: announced::Proxy,
				pub call_hash: announced::CallHash,
			}
			pub mod announced {
				use super::runtime_types;
				pub type Real = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Proxy = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Announced {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "Announced";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A proxy was added."]
			pub struct ProxyAdded {
				pub delegator: proxy_added::Delegator,
				pub delegatee: proxy_added::Delegatee,
				pub proxy_type: proxy_added::ProxyType,
				pub delay: proxy_added::Delay,
			}
			pub mod proxy_added {
				use super::runtime_types;
				pub type Delegator = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Delegatee = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type ProxyType = runtime_types::composable_traits::account_proxy::ProxyType;
				pub type Delay = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ProxyAdded {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyAdded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A proxy was removed."]
			pub struct ProxyRemoved {
				pub delegator: proxy_removed::Delegator,
				pub delegatee: proxy_removed::Delegatee,
				pub proxy_type: proxy_removed::ProxyType,
				pub delay: proxy_removed::Delay,
			}
			pub mod proxy_removed {
				use super::runtime_types;
				pub type Delegator = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Delegatee = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type ProxyType = runtime_types::composable_traits::account_proxy::ProxyType;
				pub type Delay = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ProxyRemoved {
				const PALLET: &'static str = "Proxy";
				const EVENT: &'static str = "ProxyRemoved";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod proxies {
					use super::runtime_types;
					pub type Proxies = (
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::pallet_proxy::ProxyDefinition<
								::subxt::ext::subxt_core::utils::AccountId32,
								runtime_types::composable_traits::account_proxy::ProxyType,
								::core::primitive::u32,
							>,
						>,
						::core::primitive::u128,
					);
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod announcements {
					use super::runtime_types;
					pub type Announcements = (
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::pallet_proxy::Announcement<
								::subxt::ext::subxt_core::utils::AccountId32,
								::subxt::ext::subxt_core::utils::H256,
								::core::primitive::u32,
							>,
						>,
						::core::primitive::u128,
					);
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
				#[doc = " which are being delegated to, together with the amount held on deposit."]
				pub fn proxies_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::proxies::Proxies,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Proxy",
						"Proxies",
						(),
						[
							68u8, 195u8, 37u8, 187u8, 13u8, 190u8, 195u8, 54u8, 26u8, 16u8, 132u8,
							26u8, 65u8, 172u8, 7u8, 238u8, 57u8, 162u8, 133u8, 84u8, 175u8, 113u8,
							227u8, 166u8, 232u8, 203u8, 12u8, 116u8, 24u8, 236u8, 64u8, 74u8,
						],
					)
				}
				#[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
				#[doc = " which are being delegated to, together with the amount held on deposit."]
				pub fn proxies(
					&self,
					_0: impl ::core::borrow::Borrow<types::proxies::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::proxies::Param0,
					>,
					types::proxies::Proxies,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Proxy",
						"Proxies",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							68u8, 195u8, 37u8, 187u8, 13u8, 190u8, 195u8, 54u8, 26u8, 16u8, 132u8,
							26u8, 65u8, 172u8, 7u8, 238u8, 57u8, 162u8, 133u8, 84u8, 175u8, 113u8,
							227u8, 166u8, 232u8, 203u8, 12u8, 116u8, 24u8, 236u8, 64u8, 74u8,
						],
					)
				}
				#[doc = " The announcements made by the proxy (key)."]
				pub fn announcements_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::announcements::Announcements,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Proxy",
						"Announcements",
						(),
						[
							129u8, 228u8, 198u8, 210u8, 90u8, 69u8, 151u8, 198u8, 206u8, 174u8,
							148u8, 58u8, 134u8, 14u8, 53u8, 56u8, 234u8, 71u8, 84u8, 247u8, 246u8,
							207u8, 117u8, 221u8, 84u8, 72u8, 254u8, 215u8, 102u8, 49u8, 21u8,
							173u8,
						],
					)
				}
				#[doc = " The announcements made by the proxy (key)."]
				pub fn announcements(
					&self,
					_0: impl ::core::borrow::Borrow<types::announcements::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::announcements::Param0,
					>,
					types::announcements::Announcements,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Proxy",
						"Announcements",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							129u8, 228u8, 198u8, 210u8, 90u8, 69u8, 151u8, 198u8, 206u8, 174u8,
							148u8, 58u8, 134u8, 14u8, 53u8, 56u8, 234u8, 71u8, 84u8, 247u8, 246u8,
							207u8, 117u8, 221u8, 84u8, 72u8, 254u8, 215u8, 102u8, 49u8, 21u8,
							173u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The base amount of currency needed to reserve for creating a proxy."]
				#[doc = ""]
				#[doc = " This is held for an additional storage item whose value size is"]
				#[doc = " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."]
				pub fn proxy_deposit_base(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Proxy",
						"ProxyDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount of currency needed per proxy added."]
				#[doc = ""]
				#[doc = " This is held for adding 32 bytes plus an instance of `ProxyType` more into a"]
				#[doc = " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take"]
				#[doc = " into account `32 + proxy_type.encode().len()` bytes of data."]
				pub fn proxy_deposit_factor(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Proxy",
						"ProxyDepositFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum amount of proxies allowed for a single account."]
				pub fn max_proxies(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Proxy",
						"MaxProxies",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum amount of time-delayed announcements that are allowed to be pending."]
				pub fn max_pending(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Proxy",
						"MaxPending",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The base amount of currency needed to reserve for creating an announcement."]
				#[doc = ""]
				#[doc = " This is held when a new storage item holding a `Balance` is created (typically 16"]
				#[doc = " bytes)."]
				pub fn announcement_deposit_base(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Proxy",
						"AnnouncementDepositBase",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The amount of currency needed per announcement made."]
				#[doc = ""]
				#[doc = " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)"]
				#[doc = " into a pre-existing storage value."]
				pub fn announcement_deposit_factor(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Proxy",
						"AnnouncementDepositFactor",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
			}
		}
	}
	pub mod xcmp_queue {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::cumulus_pallet_xcmp_queue::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::cumulus_pallet_xcmp_queue::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Services a single overweight XCM."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
				#[doc = "- `index`: The index of the overweight XCM to service"]
				#[doc = "- `weight_limit`: The amount of weight that XCM execution may take."]
				#[doc = ""]
				#[doc = "Errors:"]
				#[doc = "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map."]
				#[doc = "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format."]
				#[doc = "- `WeightOverLimit`: XCM execution may use greater `weight_limit`."]
				#[doc = ""]
				#[doc = "Events:"]
				#[doc = "- `OverweightServiced`: On success."]
				pub struct ServiceOverweight {
					pub index: service_overweight::Index,
					pub weight_limit: service_overweight::WeightLimit,
				}
				pub mod service_overweight {
					use super::runtime_types;
					pub type Index = ::core::primitive::u64;
					pub type WeightLimit = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ServiceOverweight {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "service_overweight";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `ControllerOrigin`."]
				pub struct SuspendXcmExecution;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SuspendXcmExecution {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "suspend_xcm_execution";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Resumes all XCM executions for the XCMP queue."]
				#[doc = ""]
				#[doc = "Note that this function doesn't change the status of the in/out bound channels."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `ControllerOrigin`."]
				pub struct ResumeXcmExecution;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ResumeXcmExecution {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "resume_xcm_execution";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Overwrites the number of pages of messages which must be in the queue for the other side to be told to"]
				#[doc = "suspend their sending."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.suspend_value`"]
				pub struct UpdateSuspendThreshold {
					pub new: update_suspend_threshold::New,
				}
				pub mod update_suspend_threshold {
					use super::runtime_types;
					pub type New = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateSuspendThreshold {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "update_suspend_threshold";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Overwrites the number of pages of messages which must be in the queue after which we drop any further"]
				#[doc = "messages from the channel."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.drop_threshold`"]
				pub struct UpdateDropThreshold {
					pub new: update_drop_threshold::New,
				}
				pub mod update_drop_threshold {
					use super::runtime_types;
					pub type New = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateDropThreshold {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "update_drop_threshold";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Overwrites the number of pages of messages which the queue must be reduced to before it signals that"]
				#[doc = "message sending may recommence after it has been suspended."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.resume_threshold`"]
				pub struct UpdateResumeThreshold {
					pub new: update_resume_threshold::New,
				}
				pub mod update_resume_threshold {
					use super::runtime_types;
					pub type New = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateResumeThreshold {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "update_resume_threshold";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Overwrites the amount of remaining weight under which we stop processing messages."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.threshold_weight`"]
				pub struct UpdateThresholdWeight {
					pub new: update_threshold_weight::New,
				}
				pub mod update_threshold_weight {
					use super::runtime_types;
					pub type New = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateThresholdWeight {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "update_threshold_weight";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Overwrites the speed to which the available weight approaches the maximum weight."]
				#[doc = "A lower number results in a faster progression. A value of 1 makes the entire weight available initially."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."]
				pub struct UpdateWeightRestrictDecay {
					pub new: update_weight_restrict_decay::New,
				}
				pub mod update_weight_restrict_decay {
					use super::runtime_types;
					pub type New = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateWeightRestrictDecay {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "update_weight_restrict_decay";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Overwrite the maximum amount of weight any individual message may consume."]
				#[doc = "Messages above this weight go into the overweight queue and may only be serviced explicitly."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."]
				pub struct UpdateXcmpMaxIndividualWeight {
					pub new: update_xcmp_max_individual_weight::New,
				}
				pub mod update_xcmp_max_individual_weight {
					use super::runtime_types;
					pub type New = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateXcmpMaxIndividualWeight {
					const PALLET: &'static str = "XcmpQueue";
					const CALL: &'static str = "update_xcmp_max_individual_weight";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Services a single overweight XCM."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
				#[doc = "- `index`: The index of the overweight XCM to service"]
				#[doc = "- `weight_limit`: The amount of weight that XCM execution may take."]
				#[doc = ""]
				#[doc = "Errors:"]
				#[doc = "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map."]
				#[doc = "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format."]
				#[doc = "- `WeightOverLimit`: XCM execution may use greater `weight_limit`."]
				#[doc = ""]
				#[doc = "Events:"]
				#[doc = "- `OverweightServiced`: On success."]
				pub fn service_overweight(
					&self,
					index: types::service_overweight::Index,
					weight_limit: types::service_overweight::WeightLimit,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ServiceOverweight>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XcmpQueue",
						"service_overweight",
						types::ServiceOverweight { index, weight_limit },
						[
							235u8, 203u8, 220u8, 162u8, 173u8, 117u8, 224u8, 194u8, 176u8, 125u8,
							50u8, 74u8, 180u8, 37u8, 126u8, 227u8, 138u8, 213u8, 227u8, 35u8,
							247u8, 18u8, 160u8, 231u8, 97u8, 149u8, 144u8, 49u8, 34u8, 146u8, 32u8,
							7u8,
						],
					)
				}
				#[doc = "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `ControllerOrigin`."]
				pub fn suspend_xcm_execution(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SuspendXcmExecution>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XcmpQueue",
						"suspend_xcm_execution",
						types::SuspendXcmExecution {},
						[
							54u8, 120u8, 33u8, 251u8, 74u8, 56u8, 29u8, 76u8, 104u8, 218u8, 115u8,
							198u8, 148u8, 237u8, 9u8, 191u8, 241u8, 48u8, 33u8, 24u8, 60u8, 144u8,
							22u8, 78u8, 58u8, 50u8, 26u8, 188u8, 231u8, 42u8, 201u8, 76u8,
						],
					)
				}
				#[doc = "Resumes all XCM executions for the XCMP queue."]
				#[doc = ""]
				#[doc = "Note that this function doesn't change the status of the in/out bound channels."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `ControllerOrigin`."]
				pub fn resume_xcm_execution(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ResumeXcmExecution>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XcmpQueue",
						"resume_xcm_execution",
						types::ResumeXcmExecution {},
						[
							173u8, 231u8, 78u8, 253u8, 108u8, 234u8, 199u8, 124u8, 184u8, 154u8,
							95u8, 194u8, 13u8, 77u8, 175u8, 7u8, 7u8, 112u8, 161u8, 72u8, 133u8,
							71u8, 63u8, 218u8, 97u8, 226u8, 133u8, 6u8, 93u8, 177u8, 247u8, 109u8,
						],
					)
				}
				#[doc = "Overwrites the number of pages of messages which must be in the queue for the other side to be told to"]
				#[doc = "suspend their sending."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.suspend_value`"]
				pub fn update_suspend_threshold(
					&self,
					new: types::update_suspend_threshold::New,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::UpdateSuspendThreshold,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XcmpQueue",
						"update_suspend_threshold",
						types::UpdateSuspendThreshold { new },
						[
							64u8, 91u8, 172u8, 51u8, 220u8, 174u8, 54u8, 47u8, 57u8, 89u8, 75u8,
							39u8, 126u8, 198u8, 143u8, 35u8, 70u8, 125u8, 167u8, 14u8, 17u8, 18u8,
							146u8, 222u8, 100u8, 92u8, 81u8, 239u8, 173u8, 43u8, 42u8, 174u8,
						],
					)
				}
				#[doc = "Overwrites the number of pages of messages which must be in the queue after which we drop any further"]
				#[doc = "messages from the channel."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.drop_threshold`"]
				pub fn update_drop_threshold(
					&self,
					new: types::update_drop_threshold::New,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateDropThreshold>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XcmpQueue",
						"update_drop_threshold",
						types::UpdateDropThreshold { new },
						[
							123u8, 54u8, 12u8, 180u8, 165u8, 198u8, 141u8, 200u8, 149u8, 168u8,
							186u8, 237u8, 162u8, 91u8, 89u8, 242u8, 229u8, 16u8, 32u8, 254u8, 59u8,
							168u8, 31u8, 134u8, 217u8, 251u8, 0u8, 102u8, 113u8, 194u8, 175u8, 9u8,
						],
					)
				}
				#[doc = "Overwrites the number of pages of messages which the queue must be reduced to before it signals that"]
				#[doc = "message sending may recommence after it has been suspended."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.resume_threshold`"]
				pub fn update_resume_threshold(
					&self,
					new: types::update_resume_threshold::New,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::UpdateResumeThreshold,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XcmpQueue",
						"update_resume_threshold",
						types::UpdateResumeThreshold { new },
						[
							172u8, 136u8, 11u8, 106u8, 42u8, 157u8, 167u8, 183u8, 87u8, 62u8,
							182u8, 17u8, 184u8, 59u8, 215u8, 230u8, 18u8, 243u8, 212u8, 34u8, 54u8,
							188u8, 95u8, 119u8, 173u8, 20u8, 91u8, 206u8, 212u8, 57u8, 136u8, 77u8,
						],
					)
				}
				#[doc = "Overwrites the amount of remaining weight under which we stop processing messages."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.threshold_weight`"]
				pub fn update_threshold_weight(
					&self,
					new: types::update_threshold_weight::New,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::UpdateThresholdWeight,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XcmpQueue",
						"update_threshold_weight",
						types::UpdateThresholdWeight { new },
						[
							79u8, 1u8, 102u8, 119u8, 93u8, 104u8, 197u8, 189u8, 248u8, 215u8, 30u8,
							227u8, 83u8, 26u8, 149u8, 99u8, 174u8, 191u8, 97u8, 82u8, 168u8, 128u8,
							130u8, 136u8, 185u8, 54u8, 104u8, 186u8, 231u8, 11u8, 66u8, 184u8,
						],
					)
				}
				#[doc = "Overwrites the speed to which the available weight approaches the maximum weight."]
				#[doc = "A lower number results in a faster progression. A value of 1 makes the entire weight available initially."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."]
				pub fn update_weight_restrict_decay(
					&self,
					new: types::update_weight_restrict_decay::New,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::UpdateWeightRestrictDecay,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XcmpQueue",
						"update_weight_restrict_decay",
						types::UpdateWeightRestrictDecay { new },
						[
							37u8, 210u8, 52u8, 253u8, 67u8, 66u8, 63u8, 238u8, 117u8, 80u8, 77u8,
							102u8, 166u8, 103u8, 173u8, 135u8, 54u8, 139u8, 100u8, 225u8, 115u8,
							214u8, 160u8, 228u8, 195u8, 221u8, 160u8, 62u8, 192u8, 105u8, 188u8,
							139u8,
						],
					)
				}
				#[doc = "Overwrite the maximum amount of weight any individual message may consume."]
				#[doc = "Messages above this weight go into the overweight queue and may only be serviced explicitly."]
				#[doc = ""]
				#[doc = "- `origin`: Must pass `Root`."]
				#[doc = "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."]
				pub fn update_xcmp_max_individual_weight(
					&self,
					new: types::update_xcmp_max_individual_weight::New,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::UpdateXcmpMaxIndividualWeight,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XcmpQueue",
						"update_xcmp_max_individual_weight",
						types::UpdateXcmpMaxIndividualWeight { new },
						[
							185u8, 199u8, 32u8, 102u8, 179u8, 139u8, 101u8, 14u8, 48u8, 173u8,
							123u8, 158u8, 161u8, 153u8, 81u8, 109u8, 196u8, 217u8, 235u8, 150u8,
							176u8, 55u8, 168u8, 31u8, 34u8, 251u8, 128u8, 53u8, 160u8, 220u8,
							140u8, 174u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::cumulus_pallet_xcmp_queue::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some XCM was executed ok."]
			pub struct Success {
				pub message_hash: success::MessageHash,
				pub weight: success::Weight,
			}
			pub mod success {
				use super::runtime_types;
				pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
				pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Success {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "Success";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some XCM failed."]
			pub struct Fail {
				pub message_hash: fail::MessageHash,
				pub error: fail::Error,
				pub weight: fail::Weight,
			}
			pub mod fail {
				use super::runtime_types;
				pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
				pub type Error = runtime_types::xcm::v3::traits::Error;
				pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Fail {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "Fail";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Bad XCM version used."]
			pub struct BadVersion {
				pub message_hash: bad_version::MessageHash,
			}
			pub mod bad_version {
				use super::runtime_types;
				pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for BadVersion {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "BadVersion";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Bad XCM format used."]
			pub struct BadFormat {
				pub message_hash: bad_format::MessageHash,
			}
			pub mod bad_format {
				use super::runtime_types;
				pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for BadFormat {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "BadFormat";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An HRMP message was sent to a sibling parachain."]
			pub struct XcmpMessageSent {
				pub message_hash: xcmp_message_sent::MessageHash,
			}
			pub mod xcmp_message_sent {
				use super::runtime_types;
				pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for XcmpMessageSent {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "XcmpMessageSent";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An XCM exceeded the individual message weight budget."]
			pub struct OverweightEnqueued {
				pub sender: overweight_enqueued::Sender,
				pub sent_at: overweight_enqueued::SentAt,
				pub index: overweight_enqueued::Index,
				pub required: overweight_enqueued::Required,
			}
			pub mod overweight_enqueued {
				use super::runtime_types;
				pub type Sender = runtime_types::polkadot_parachain::primitives::Id;
				pub type SentAt = ::core::primitive::u32;
				pub type Index = ::core::primitive::u64;
				pub type Required = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for OverweightEnqueued {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "OverweightEnqueued";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An XCM from the overweight queue was executed with the given actual weight used."]
			pub struct OverweightServiced {
				pub index: overweight_serviced::Index,
				pub used: overweight_serviced::Used,
			}
			pub mod overweight_serviced {
				use super::runtime_types;
				pub type Index = ::core::primitive::u64;
				pub type Used = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for OverweightServiced {
				const PALLET: &'static str = "XcmpQueue";
				const EVENT: &'static str = "OverweightServiced";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod inbound_xcmp_status {
					use super::runtime_types;
					pub type InboundXcmpStatus = ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::cumulus_pallet_xcmp_queue::InboundChannelDetails,
					>;
				}
				pub mod inbound_xcmp_messages {
					use super::runtime_types;
					pub type InboundXcmpMessages =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
					pub type Param0 = runtime_types::polkadot_parachain::primitives::Id;
					pub type Param1 = ::core::primitive::u32;
				}
				pub mod outbound_xcmp_status {
					use super::runtime_types;
					pub type OutboundXcmpStatus = ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::cumulus_pallet_xcmp_queue::OutboundChannelDetails,
					>;
				}
				pub mod outbound_xcmp_messages {
					use super::runtime_types;
					pub type OutboundXcmpMessages =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
					pub type Param0 = runtime_types::polkadot_parachain::primitives::Id;
					pub type Param1 = ::core::primitive::u16;
				}
				pub mod signal_messages {
					use super::runtime_types;
					pub type SignalMessages =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
					pub type Param0 = runtime_types::polkadot_parachain::primitives::Id;
				}
				pub mod queue_config {
					use super::runtime_types;
					pub type QueueConfig =
						runtime_types::cumulus_pallet_xcmp_queue::QueueConfigData;
				}
				pub mod overweight {
					use super::runtime_types;
					pub type Overweight = (
						runtime_types::polkadot_parachain::primitives::Id,
						::core::primitive::u32,
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					);
					pub type Param0 = ::core::primitive::u64;
				}
				pub mod counter_for_overweight {
					use super::runtime_types;
					pub type CounterForOverweight = ::core::primitive::u32;
				}
				pub mod overweight_count {
					use super::runtime_types;
					pub type OverweightCount = ::core::primitive::u64;
				}
				pub mod queue_suspended {
					use super::runtime_types;
					pub type QueueSuspended = ::core::primitive::bool;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Status of the inbound XCMP channels."]
				pub fn inbound_xcmp_status(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::inbound_xcmp_status::InboundXcmpStatus,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"InboundXcmpStatus",
						(),
						[
							216u8, 138u8, 138u8, 71u8, 210u8, 155u8, 255u8, 91u8, 44u8, 147u8,
							80u8, 187u8, 203u8, 88u8, 34u8, 54u8, 80u8, 232u8, 249u8, 20u8, 169u8,
							138u8, 123u8, 139u8, 182u8, 184u8, 0u8, 205u8, 101u8, 9u8, 194u8,
							122u8,
						],
					)
				}
				#[doc = " Inbound aggregate XCMP messages. It can only be one per ParaId/block."]
				pub fn inbound_xcmp_messages_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::inbound_xcmp_messages::InboundXcmpMessages,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"InboundXcmpMessages",
						(),
						[
							60u8, 227u8, 118u8, 144u8, 41u8, 170u8, 15u8, 80u8, 148u8, 229u8,
							213u8, 6u8, 213u8, 186u8, 20u8, 199u8, 229u8, 159u8, 17u8, 39u8, 116u8,
							85u8, 34u8, 82u8, 109u8, 100u8, 174u8, 85u8, 245u8, 247u8, 84u8, 116u8,
						],
					)
				}
				#[doc = " Inbound aggregate XCMP messages. It can only be one per ParaId/block."]
				pub fn inbound_xcmp_messages_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::inbound_xcmp_messages::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::inbound_xcmp_messages::Param0,
					>,
					types::inbound_xcmp_messages::InboundXcmpMessages,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"InboundXcmpMessages",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							60u8, 227u8, 118u8, 144u8, 41u8, 170u8, 15u8, 80u8, 148u8, 229u8,
							213u8, 6u8, 213u8, 186u8, 20u8, 199u8, 229u8, 159u8, 17u8, 39u8, 116u8,
							85u8, 34u8, 82u8, 109u8, 100u8, 174u8, 85u8, 245u8, 247u8, 84u8, 116u8,
						],
					)
				}
				#[doc = " Inbound aggregate XCMP messages. It can only be one per ParaId/block."]
				pub fn inbound_xcmp_messages(
					&self,
					_0: impl ::core::borrow::Borrow<types::inbound_xcmp_messages::Param0>,
					_1: impl ::core::borrow::Borrow<types::inbound_xcmp_messages::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::inbound_xcmp_messages::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::inbound_xcmp_messages::Param1,
						>,
					),
					types::inbound_xcmp_messages::InboundXcmpMessages,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"InboundXcmpMessages",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							60u8, 227u8, 118u8, 144u8, 41u8, 170u8, 15u8, 80u8, 148u8, 229u8,
							213u8, 6u8, 213u8, 186u8, 20u8, 199u8, 229u8, 159u8, 17u8, 39u8, 116u8,
							85u8, 34u8, 82u8, 109u8, 100u8, 174u8, 85u8, 245u8, 247u8, 84u8, 116u8,
						],
					)
				}
				#[doc = " The non-empty XCMP channels in order of becoming non-empty, and the index of the first"]
				#[doc = " and last outbound message. If the two indices are equal, then it indicates an empty"]
				#[doc = " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater"]
				#[doc = " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in"]
				#[doc = " case of the need to send a high-priority signal message this block."]
				#[doc = " The bool is true if there is a signal message waiting to be sent."]
				pub fn outbound_xcmp_status(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::outbound_xcmp_status::OutboundXcmpStatus,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"OutboundXcmpStatus",
						(),
						[
							181u8, 5u8, 216u8, 176u8, 154u8, 233u8, 116u8, 14u8, 151u8, 1u8, 114u8,
							16u8, 42u8, 20u8, 63u8, 233u8, 79u8, 122u8, 87u8, 255u8, 75u8, 149u8,
							176u8, 106u8, 23u8, 101u8, 228u8, 120u8, 217u8, 167u8, 127u8, 117u8,
						],
					)
				}
				#[doc = " The messages outbound in a given XCMP channel."]
				pub fn outbound_xcmp_messages_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::outbound_xcmp_messages::OutboundXcmpMessages,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"OutboundXcmpMessages",
						(),
						[
							156u8, 3u8, 202u8, 175u8, 175u8, 129u8, 38u8, 144u8, 35u8, 59u8, 228u8,
							159u8, 142u8, 25u8, 19u8, 73u8, 73u8, 6u8, 115u8, 19u8, 236u8, 235u8,
							144u8, 172u8, 31u8, 168u8, 24u8, 65u8, 115u8, 95u8, 77u8, 63u8,
						],
					)
				}
				#[doc = " The messages outbound in a given XCMP channel."]
				pub fn outbound_xcmp_messages_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::outbound_xcmp_messages::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::outbound_xcmp_messages::Param0,
					>,
					types::outbound_xcmp_messages::OutboundXcmpMessages,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"OutboundXcmpMessages",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							156u8, 3u8, 202u8, 175u8, 175u8, 129u8, 38u8, 144u8, 35u8, 59u8, 228u8,
							159u8, 142u8, 25u8, 19u8, 73u8, 73u8, 6u8, 115u8, 19u8, 236u8, 235u8,
							144u8, 172u8, 31u8, 168u8, 24u8, 65u8, 115u8, 95u8, 77u8, 63u8,
						],
					)
				}
				#[doc = " The messages outbound in a given XCMP channel."]
				pub fn outbound_xcmp_messages(
					&self,
					_0: impl ::core::borrow::Borrow<types::outbound_xcmp_messages::Param0>,
					_1: impl ::core::borrow::Borrow<types::outbound_xcmp_messages::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::outbound_xcmp_messages::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::outbound_xcmp_messages::Param1,
						>,
					),
					types::outbound_xcmp_messages::OutboundXcmpMessages,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"OutboundXcmpMessages",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							156u8, 3u8, 202u8, 175u8, 175u8, 129u8, 38u8, 144u8, 35u8, 59u8, 228u8,
							159u8, 142u8, 25u8, 19u8, 73u8, 73u8, 6u8, 115u8, 19u8, 236u8, 235u8,
							144u8, 172u8, 31u8, 168u8, 24u8, 65u8, 115u8, 95u8, 77u8, 63u8,
						],
					)
				}
				#[doc = " Any signal messages waiting to be sent."]
				pub fn signal_messages_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::signal_messages::SignalMessages,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"SignalMessages",
						(),
						[
							182u8, 143u8, 233u8, 233u8, 111u8, 137u8, 174u8, 165u8, 166u8, 7u8,
							229u8, 183u8, 99u8, 108u8, 30u8, 162u8, 71u8, 55u8, 122u8, 124u8,
							249u8, 203u8, 142u8, 124u8, 158u8, 213u8, 182u8, 159u8, 206u8, 249u8,
							180u8, 24u8,
						],
					)
				}
				#[doc = " Any signal messages waiting to be sent."]
				pub fn signal_messages(
					&self,
					_0: impl ::core::borrow::Borrow<types::signal_messages::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::signal_messages::Param0,
					>,
					types::signal_messages::SignalMessages,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"SignalMessages",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							182u8, 143u8, 233u8, 233u8, 111u8, 137u8, 174u8, 165u8, 166u8, 7u8,
							229u8, 183u8, 99u8, 108u8, 30u8, 162u8, 71u8, 55u8, 122u8, 124u8,
							249u8, 203u8, 142u8, 124u8, 158u8, 213u8, 182u8, 159u8, 206u8, 249u8,
							180u8, 24u8,
						],
					)
				}
				#[doc = " The configuration which controls the dynamics of the outbound queue."]
				pub fn queue_config(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::queue_config::QueueConfig,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"QueueConfig",
						(),
						[
							112u8, 136u8, 198u8, 133u8, 5u8, 66u8, 33u8, 29u8, 99u8, 72u8, 70u8,
							56u8, 182u8, 57u8, 48u8, 10u8, 135u8, 63u8, 103u8, 13u8, 143u8, 121u8,
							12u8, 126u8, 207u8, 56u8, 244u8, 63u8, 126u8, 51u8, 100u8, 69u8,
						],
					)
				}
				#[doc = " The messages that exceeded max individual message weight budget."]
				#[doc = ""]
				#[doc = " These message stay in this storage map until they are manually dispatched via"]
				#[doc = " `service_overweight`."]
				pub fn overweight_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::overweight::Overweight,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"Overweight",
						(),
						[
							4u8, 180u8, 123u8, 50u8, 174u8, 195u8, 68u8, 214u8, 187u8, 92u8, 131u8,
							234u8, 166u8, 124u8, 19u8, 202u8, 0u8, 249u8, 246u8, 239u8, 199u8,
							27u8, 129u8, 252u8, 22u8, 92u8, 206u8, 159u8, 136u8, 222u8, 238u8,
							81u8,
						],
					)
				}
				#[doc = " The messages that exceeded max individual message weight budget."]
				#[doc = ""]
				#[doc = " These message stay in this storage map until they are manually dispatched via"]
				#[doc = " `service_overweight`."]
				pub fn overweight(
					&self,
					_0: impl ::core::borrow::Borrow<types::overweight::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::overweight::Param0,
					>,
					types::overweight::Overweight,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"Overweight",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							4u8, 180u8, 123u8, 50u8, 174u8, 195u8, 68u8, 214u8, 187u8, 92u8, 131u8,
							234u8, 166u8, 124u8, 19u8, 202u8, 0u8, 249u8, 246u8, 239u8, 199u8,
							27u8, 129u8, 252u8, 22u8, 92u8, 206u8, 159u8, 136u8, 222u8, 238u8,
							81u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_overweight(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::counter_for_overweight::CounterForOverweight,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"CounterForOverweight",
						(),
						[
							44u8, 249u8, 133u8, 204u8, 169u8, 253u8, 23u8, 157u8, 132u8, 193u8,
							28u8, 178u8, 156u8, 176u8, 206u8, 46u8, 79u8, 254u8, 174u8, 236u8,
							143u8, 219u8, 59u8, 43u8, 36u8, 109u8, 244u8, 206u8, 48u8, 126u8,
							247u8, 0u8,
						],
					)
				}
				#[doc = " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next"]
				#[doc = " available free overweight index."]
				pub fn overweight_count(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::overweight_count::OverweightCount,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"OverweightCount",
						(),
						[
							28u8, 72u8, 218u8, 167u8, 253u8, 30u8, 10u8, 51u8, 49u8, 101u8, 86u8,
							26u8, 146u8, 2u8, 153u8, 232u8, 129u8, 38u8, 111u8, 105u8, 246u8, 84u8,
							192u8, 157u8, 193u8, 57u8, 222u8, 122u8, 38u8, 160u8, 56u8, 39u8,
						],
					)
				}
				#[doc = " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."]
				pub fn queue_suspended(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::queue_suspended::QueueSuspended,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"XcmpQueue",
						"QueueSuspended",
						(),
						[
							165u8, 66u8, 105u8, 244u8, 113u8, 43u8, 177u8, 252u8, 212u8, 243u8,
							143u8, 184u8, 87u8, 51u8, 163u8, 104u8, 29u8, 84u8, 119u8, 74u8, 233u8,
							129u8, 203u8, 105u8, 2u8, 101u8, 19u8, 170u8, 69u8, 253u8, 80u8, 132u8,
						],
					)
				}
			}
		}
	}
	pub mod polkadot_xcm {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_xcm::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_xcm::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Send {
					pub dest: ::subxt::ext::subxt_core::alloc::boxed::Box<send::Dest>,
					pub message: ::subxt::ext::subxt_core::alloc::boxed::Box<send::Message>,
				}
				pub mod send {
					use super::runtime_types;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type Message = runtime_types::xcm::VersionedXcm;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Send {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "send";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Teleport some assets from the local chain to some destination chain."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
				#[doc = "with all fees taken as needed from the asset."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
				#[doc = "  `dest` side. May not be empty."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				pub struct TeleportAssets {
					pub dest: ::subxt::ext::subxt_core::alloc::boxed::Box<teleport_assets::Dest>,
					pub beneficiary:
						::subxt::ext::subxt_core::alloc::boxed::Box<teleport_assets::Beneficiary>,
					pub assets:
						::subxt::ext::subxt_core::alloc::boxed::Box<teleport_assets::Assets>,
					pub fee_asset_item: teleport_assets::FeeAssetItem,
				}
				pub mod teleport_assets {
					use super::runtime_types;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type Beneficiary = runtime_types::xcm::VersionedMultiLocation;
					pub type Assets = runtime_types::xcm::VersionedMultiAssets;
					pub type FeeAssetItem = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TeleportAssets {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "teleport_assets";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
				#[doc = "chain and forward a notification XCM."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
				#[doc = "with all fees taken as needed from the asset."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
				#[doc = "  `dest` side."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				pub struct ReserveTransferAssets {
					pub dest:
						::subxt::ext::subxt_core::alloc::boxed::Box<reserve_transfer_assets::Dest>,
					pub beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
						reserve_transfer_assets::Beneficiary,
					>,
					pub assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
						reserve_transfer_assets::Assets,
					>,
					pub fee_asset_item: reserve_transfer_assets::FeeAssetItem,
				}
				pub mod reserve_transfer_assets {
					use super::runtime_types;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type Beneficiary = runtime_types::xcm::VersionedMultiLocation;
					pub type Assets = runtime_types::xcm::VersionedMultiAssets;
					pub type FeeAssetItem = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ReserveTransferAssets {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "reserve_transfer_assets";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Execute an XCM message from a local, signed, origin."]
				#[doc = ""]
				#[doc = "An event is deposited indicating whether `msg` could be executed completely or only"]
				#[doc = "partially."]
				#[doc = ""]
				#[doc = "No more than `max_weight` will be used in its attempted execution. If this is less than the"]
				#[doc = "maximum amount of weight that the message could take to be executed, then no execution"]
				#[doc = "attempt will be made."]
				#[doc = ""]
				#[doc = "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully"]
				#[doc = "to completion; only that *some* of it was executed."]
				pub struct Execute {
					pub message: ::subxt::ext::subxt_core::alloc::boxed::Box<execute::Message>,
					pub max_weight: execute::MaxWeight,
				}
				pub mod execute {
					use super::runtime_types;
					pub type Message = runtime_types::xcm::VersionedXcm;
					pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Execute {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "execute";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Extoll that a particular destination can be communicated with through a particular"]
				#[doc = "version of XCM."]
				#[doc = ""]
				#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
				#[doc = "- `location`: The destination that is being described."]
				#[doc = "- `xcm_version`: The latest version of XCM that `location` supports."]
				pub struct ForceXcmVersion {
					pub location:
						::subxt::ext::subxt_core::alloc::boxed::Box<force_xcm_version::Location>,
					pub xcm_version: force_xcm_version::XcmVersion,
				}
				pub mod force_xcm_version {
					use super::runtime_types;
					pub type Location = runtime_types::xcm::v3::multilocation::MultiLocation;
					pub type XcmVersion = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceXcmVersion {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "force_xcm_version";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set a safe XCM version (the version that XCM should be encoded with if the most recent"]
				#[doc = "version a destination can accept is unknown)."]
				#[doc = ""]
				#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
				#[doc = "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."]
				pub struct ForceDefaultXcmVersion {
					pub maybe_xcm_version: force_default_xcm_version::MaybeXcmVersion,
				}
				pub mod force_default_xcm_version {
					use super::runtime_types;
					pub type MaybeXcmVersion = ::core::option::Option<::core::primitive::u32>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceDefaultXcmVersion {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "force_default_xcm_version";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Ask a location to notify us regarding their XCM version and any changes to it."]
				#[doc = ""]
				#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
				#[doc = "- `location`: The location to which we should subscribe for XCM version notifications."]
				pub struct ForceSubscribeVersionNotify {
					pub location: ::subxt::ext::subxt_core::alloc::boxed::Box<
						force_subscribe_version_notify::Location,
					>,
				}
				pub mod force_subscribe_version_notify {
					use super::runtime_types;
					pub type Location = runtime_types::xcm::VersionedMultiLocation;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceSubscribeVersionNotify {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "force_subscribe_version_notify";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Require that a particular destination should no longer notify us regarding any XCM"]
				#[doc = "version changes."]
				#[doc = ""]
				#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
				#[doc = "- `location`: The location to which we are currently subscribed for XCM version"]
				#[doc = "  notifications which we no longer desire."]
				pub struct ForceUnsubscribeVersionNotify {
					pub location: ::subxt::ext::subxt_core::alloc::boxed::Box<
						force_unsubscribe_version_notify::Location,
					>,
				}
				pub mod force_unsubscribe_version_notify {
					use super::runtime_types;
					pub type Location = runtime_types::xcm::VersionedMultiLocation;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceUnsubscribeVersionNotify {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "force_unsubscribe_version_notify";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
				#[doc = "chain and forward a notification XCM."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
				#[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
				#[doc = "at risk."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
				#[doc = "  `dest` side."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				#[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
				pub struct LimitedReserveTransferAssets {
					pub dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
						limited_reserve_transfer_assets::Dest,
					>,
					pub beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
						limited_reserve_transfer_assets::Beneficiary,
					>,
					pub assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
						limited_reserve_transfer_assets::Assets,
					>,
					pub fee_asset_item: limited_reserve_transfer_assets::FeeAssetItem,
					pub weight_limit: limited_reserve_transfer_assets::WeightLimit,
				}
				pub mod limited_reserve_transfer_assets {
					use super::runtime_types;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type Beneficiary = runtime_types::xcm::VersionedMultiLocation;
					pub type Assets = runtime_types::xcm::VersionedMultiAssets;
					pub type FeeAssetItem = ::core::primitive::u32;
					pub type WeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for LimitedReserveTransferAssets {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "limited_reserve_transfer_assets";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Teleport some assets from the local chain to some destination chain."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
				#[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
				#[doc = "at risk."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
				#[doc = "  `dest` side. May not be empty."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				#[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
				pub struct LimitedTeleportAssets {
					pub dest:
						::subxt::ext::subxt_core::alloc::boxed::Box<limited_teleport_assets::Dest>,
					pub beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
						limited_teleport_assets::Beneficiary,
					>,
					pub assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
						limited_teleport_assets::Assets,
					>,
					pub fee_asset_item: limited_teleport_assets::FeeAssetItem,
					pub weight_limit: limited_teleport_assets::WeightLimit,
				}
				pub mod limited_teleport_assets {
					use super::runtime_types;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type Beneficiary = runtime_types::xcm::VersionedMultiLocation;
					pub type Assets = runtime_types::xcm::VersionedMultiAssets;
					pub type FeeAssetItem = ::core::primitive::u32;
					pub type WeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for LimitedTeleportAssets {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "limited_teleport_assets";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set or unset the global suspension state of the XCM executor."]
				#[doc = ""]
				#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
				#[doc = "- `suspended`: `true` to suspend, `false` to resume."]
				pub struct ForceSuspension {
					pub suspended: force_suspension::Suspended,
				}
				pub mod force_suspension {
					use super::runtime_types;
					pub type Suspended = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceSuspension {
					const PALLET: &'static str = "PolkadotXcm";
					const CALL: &'static str = "force_suspension";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				pub fn send(
					&self,
					dest: types::send::Dest,
					message: types::send::Message,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Send> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PolkadotXcm",
						"send",
						types::Send {
							dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
							message: ::subxt::ext::subxt_core::alloc::boxed::Box::new(message),
						},
						[
							147u8, 255u8, 86u8, 82u8, 17u8, 159u8, 225u8, 145u8, 220u8, 89u8, 71u8,
							23u8, 193u8, 249u8, 12u8, 70u8, 19u8, 140u8, 232u8, 97u8, 12u8, 220u8,
							113u8, 65u8, 4u8, 255u8, 138u8, 10u8, 231u8, 122u8, 67u8, 105u8,
						],
					)
				}
				#[doc = "Teleport some assets from the local chain to some destination chain."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
				#[doc = "with all fees taken as needed from the asset."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
				#[doc = "  `dest` side. May not be empty."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				pub fn teleport_assets(
					&self,
					dest: types::teleport_assets::Dest,
					beneficiary: types::teleport_assets::Beneficiary,
					assets: types::teleport_assets::Assets,
					fee_asset_item: types::teleport_assets::FeeAssetItem,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TeleportAssets>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PolkadotXcm",
						"teleport_assets",
						types::TeleportAssets {
							dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
							beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
								beneficiary,
							),
							assets: ::subxt::ext::subxt_core::alloc::boxed::Box::new(assets),
							fee_asset_item,
						},
						[
							56u8, 144u8, 237u8, 60u8, 157u8, 5u8, 7u8, 129u8, 41u8, 149u8, 160u8,
							100u8, 233u8, 102u8, 181u8, 140u8, 115u8, 213u8, 29u8, 132u8, 16u8,
							30u8, 23u8, 82u8, 140u8, 134u8, 37u8, 87u8, 3u8, 99u8, 172u8, 42u8,
						],
					)
				}
				#[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
				#[doc = "chain and forward a notification XCM."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
				#[doc = "with all fees taken as needed from the asset."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
				#[doc = "  `dest` side."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				pub fn reserve_transfer_assets(
					&self,
					dest: types::reserve_transfer_assets::Dest,
					beneficiary: types::reserve_transfer_assets::Beneficiary,
					assets: types::reserve_transfer_assets::Assets,
					fee_asset_item: types::reserve_transfer_assets::FeeAssetItem,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::ReserveTransferAssets,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PolkadotXcm",
						"reserve_transfer_assets",
						types::ReserveTransferAssets {
							dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
							beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
								beneficiary,
							),
							assets: ::subxt::ext::subxt_core::alloc::boxed::Box::new(assets),
							fee_asset_item,
						},
						[
							21u8, 167u8, 44u8, 22u8, 210u8, 73u8, 148u8, 7u8, 91u8, 108u8, 148u8,
							205u8, 170u8, 243u8, 142u8, 224u8, 205u8, 119u8, 252u8, 22u8, 203u8,
							32u8, 73u8, 200u8, 178u8, 14u8, 167u8, 147u8, 166u8, 55u8, 14u8, 231u8,
						],
					)
				}
				#[doc = "Execute an XCM message from a local, signed, origin."]
				#[doc = ""]
				#[doc = "An event is deposited indicating whether `msg` could be executed completely or only"]
				#[doc = "partially."]
				#[doc = ""]
				#[doc = "No more than `max_weight` will be used in its attempted execution. If this is less than the"]
				#[doc = "maximum amount of weight that the message could take to be executed, then no execution"]
				#[doc = "attempt will be made."]
				#[doc = ""]
				#[doc = "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully"]
				#[doc = "to completion; only that *some* of it was executed."]
				pub fn execute(
					&self,
					message: types::execute::Message,
					max_weight: types::execute::MaxWeight,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Execute> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PolkadotXcm",
						"execute",
						types::Execute {
							message: ::subxt::ext::subxt_core::alloc::boxed::Box::new(message),
							max_weight,
						},
						[
							15u8, 97u8, 86u8, 111u8, 105u8, 116u8, 109u8, 206u8, 70u8, 8u8, 57u8,
							232u8, 133u8, 132u8, 30u8, 219u8, 34u8, 69u8, 0u8, 213u8, 98u8, 241u8,
							186u8, 93u8, 216u8, 39u8, 73u8, 24u8, 193u8, 87u8, 92u8, 31u8,
						],
					)
				}
				#[doc = "Extoll that a particular destination can be communicated with through a particular"]
				#[doc = "version of XCM."]
				#[doc = ""]
				#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
				#[doc = "- `location`: The destination that is being described."]
				#[doc = "- `xcm_version`: The latest version of XCM that `location` supports."]
				pub fn force_xcm_version(
					&self,
					location: types::force_xcm_version::Location,
					xcm_version: types::force_xcm_version::XcmVersion,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceXcmVersion>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PolkadotXcm",
						"force_xcm_version",
						types::ForceXcmVersion {
							location: ::subxt::ext::subxt_core::alloc::boxed::Box::new(location),
							xcm_version,
						},
						[
							84u8, 212u8, 64u8, 161u8, 17u8, 129u8, 213u8, 129u8, 79u8, 86u8, 117u8,
							246u8, 93u8, 1u8, 161u8, 23u8, 35u8, 171u8, 163u8, 200u8, 69u8, 157u8,
							71u8, 8u8, 225u8, 149u8, 254u8, 124u8, 38u8, 250u8, 164u8, 218u8,
						],
					)
				}
				#[doc = "Set a safe XCM version (the version that XCM should be encoded with if the most recent"]
				#[doc = "version a destination can accept is unknown)."]
				#[doc = ""]
				#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
				#[doc = "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."]
				pub fn force_default_xcm_version(
					&self,
					maybe_xcm_version: types::force_default_xcm_version::MaybeXcmVersion,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::ForceDefaultXcmVersion,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PolkadotXcm",
						"force_default_xcm_version",
						types::ForceDefaultXcmVersion { maybe_xcm_version },
						[
							43u8, 114u8, 102u8, 104u8, 209u8, 234u8, 108u8, 173u8, 109u8, 188u8,
							94u8, 214u8, 136u8, 43u8, 153u8, 75u8, 161u8, 192u8, 76u8, 12u8, 221u8,
							237u8, 158u8, 247u8, 41u8, 193u8, 35u8, 174u8, 183u8, 207u8, 79u8,
							213u8,
						],
					)
				}
				#[doc = "Ask a location to notify us regarding their XCM version and any changes to it."]
				#[doc = ""]
				#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
				#[doc = "- `location`: The location to which we should subscribe for XCM version notifications."]
				pub fn force_subscribe_version_notify(
					&self,
					location: types::force_subscribe_version_notify::Location,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::ForceSubscribeVersionNotify,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PolkadotXcm",
						"force_subscribe_version_notify",
						types::ForceSubscribeVersionNotify {
							location: ::subxt::ext::subxt_core::alloc::boxed::Box::new(location),
						},
						[
							112u8, 254u8, 138u8, 12u8, 203u8, 176u8, 251u8, 167u8, 223u8, 0u8,
							71u8, 148u8, 19u8, 179u8, 47u8, 96u8, 188u8, 189u8, 14u8, 172u8, 1u8,
							1u8, 192u8, 107u8, 137u8, 158u8, 22u8, 9u8, 138u8, 241u8, 32u8, 47u8,
						],
					)
				}
				#[doc = "Require that a particular destination should no longer notify us regarding any XCM"]
				#[doc = "version changes."]
				#[doc = ""]
				#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
				#[doc = "- `location`: The location to which we are currently subscribed for XCM version"]
				#[doc = "  notifications which we no longer desire."]
				pub fn force_unsubscribe_version_notify(
					&self,
					location: types::force_unsubscribe_version_notify::Location,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::ForceUnsubscribeVersionNotify,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PolkadotXcm",
						"force_unsubscribe_version_notify",
						types::ForceUnsubscribeVersionNotify {
							location: ::subxt::ext::subxt_core::alloc::boxed::Box::new(location),
						},
						[
							205u8, 143u8, 230u8, 143u8, 166u8, 184u8, 53u8, 252u8, 118u8, 184u8,
							209u8, 227u8, 225u8, 184u8, 254u8, 244u8, 101u8, 56u8, 27u8, 128u8,
							40u8, 159u8, 178u8, 62u8, 63u8, 164u8, 59u8, 236u8, 1u8, 168u8, 202u8,
							42u8,
						],
					)
				}
				#[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
				#[doc = "chain and forward a notification XCM."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
				#[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
				#[doc = "at risk."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
				#[doc = "  `dest` side."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				#[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
				pub fn limited_reserve_transfer_assets(
					&self,
					dest: types::limited_reserve_transfer_assets::Dest,
					beneficiary: types::limited_reserve_transfer_assets::Beneficiary,
					assets: types::limited_reserve_transfer_assets::Assets,
					fee_asset_item: types::limited_reserve_transfer_assets::FeeAssetItem,
					weight_limit: types::limited_reserve_transfer_assets::WeightLimit,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::LimitedReserveTransferAssets,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PolkadotXcm",
						"limited_reserve_transfer_assets",
						types::LimitedReserveTransferAssets {
							dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
							beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
								beneficiary,
							),
							assets: ::subxt::ext::subxt_core::alloc::boxed::Box::new(assets),
							fee_asset_item,
							weight_limit,
						},
						[
							10u8, 139u8, 165u8, 239u8, 92u8, 178u8, 169u8, 62u8, 166u8, 236u8,
							50u8, 12u8, 196u8, 3u8, 233u8, 209u8, 3u8, 159u8, 184u8, 234u8, 171u8,
							46u8, 145u8, 134u8, 241u8, 155u8, 221u8, 173u8, 166u8, 94u8, 147u8,
							88u8,
						],
					)
				}
				#[doc = "Teleport some assets from the local chain to some destination chain."]
				#[doc = ""]
				#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
				#[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
				#[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
				#[doc = "at risk."]
				#[doc = ""]
				#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
				#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
				#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
				#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
				#[doc = "  an `AccountId32` value."]
				#[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
				#[doc = "  `dest` side. May not be empty."]
				#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
				#[doc = "  fees."]
				#[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
				pub fn limited_teleport_assets(
					&self,
					dest: types::limited_teleport_assets::Dest,
					beneficiary: types::limited_teleport_assets::Beneficiary,
					assets: types::limited_teleport_assets::Assets,
					fee_asset_item: types::limited_teleport_assets::FeeAssetItem,
					weight_limit: types::limited_teleport_assets::WeightLimit,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::LimitedTeleportAssets,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PolkadotXcm",
						"limited_teleport_assets",
						types::LimitedTeleportAssets {
							dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
							beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
								beneficiary,
							),
							assets: ::subxt::ext::subxt_core::alloc::boxed::Box::new(assets),
							fee_asset_item,
							weight_limit,
						},
						[
							156u8, 205u8, 105u8, 18u8, 120u8, 130u8, 144u8, 67u8, 152u8, 188u8,
							109u8, 121u8, 4u8, 240u8, 123u8, 112u8, 72u8, 153u8, 2u8, 111u8, 183u8,
							170u8, 199u8, 82u8, 33u8, 117u8, 43u8, 133u8, 208u8, 44u8, 118u8,
							107u8,
						],
					)
				}
				#[doc = "Set or unset the global suspension state of the XCM executor."]
				#[doc = ""]
				#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
				#[doc = "- `suspended`: `true` to suspend, `false` to resume."]
				pub fn force_suspension(
					&self,
					suspended: types::force_suspension::Suspended,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceSuspension>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PolkadotXcm",
						"force_suspension",
						types::ForceSuspension { suspended },
						[
							78u8, 125u8, 93u8, 55u8, 129u8, 44u8, 36u8, 227u8, 75u8, 46u8, 68u8,
							202u8, 81u8, 127u8, 111u8, 92u8, 149u8, 38u8, 225u8, 185u8, 183u8,
							154u8, 89u8, 159u8, 79u8, 10u8, 229u8, 1u8, 226u8, 243u8, 65u8, 238u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_xcm::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Execution of an XCM message was attempted."]
			#[doc = ""]
			#[doc = "\\[ outcome \\]"]
			pub struct Attempted(pub attempted::Field0);
			pub mod attempted {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::traits::Outcome;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Attempted {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "Attempted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A XCM message was sent."]
			#[doc = ""]
			#[doc = "\\[ origin, destination, message \\]"]
			pub struct Sent(pub sent::Field0, pub sent::Field1, pub sent::Field2);
			pub mod sent {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field1 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field2 = runtime_types::xcm::v3::Xcm;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Sent {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "Sent";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Query response received which does not match a registered query. This may be because a"]
			#[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
			#[doc = "because the query timed out."]
			#[doc = ""]
			#[doc = "\\[ origin location, id \\]"]
			pub struct UnexpectedResponse(
				pub unexpected_response::Field0,
				pub unexpected_response::Field1,
			);
			pub mod unexpected_response {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field1 = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for UnexpectedResponse {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "UnexpectedResponse";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
			#[doc = "no registered notification call."]
			#[doc = ""]
			#[doc = "\\[ id, response \\]"]
			pub struct ResponseReady(pub response_ready::Field0, pub response_ready::Field1);
			pub mod response_ready {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u64;
				pub type Field1 = runtime_types::xcm::v3::Response;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ResponseReady {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "ResponseReady";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Query response has been received and query is removed. The registered notification has"]
			#[doc = "been dispatched and executed successfully."]
			#[doc = ""]
			#[doc = "\\[ id, pallet index, call index \\]"]
			pub struct Notified(pub notified::Field0, pub notified::Field1, pub notified::Field2);
			pub mod notified {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u64;
				pub type Field1 = ::core::primitive::u8;
				pub type Field2 = ::core::primitive::u8;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Notified {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "Notified";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Query response has been received and query is removed. The registered notification could"]
			#[doc = "not be dispatched because the dispatch weight is greater than the maximum weight"]
			#[doc = "originally budgeted by this runtime for the query result."]
			#[doc = ""]
			#[doc = "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"]
			pub struct NotifyOverweight(
				pub notify_overweight::Field0,
				pub notify_overweight::Field1,
				pub notify_overweight::Field2,
				pub notify_overweight::Field3,
				pub notify_overweight::Field4,
			);
			pub mod notify_overweight {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u64;
				pub type Field1 = ::core::primitive::u8;
				pub type Field2 = ::core::primitive::u8;
				pub type Field3 = runtime_types::sp_weights::weight_v2::Weight;
				pub type Field4 = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NotifyOverweight {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "NotifyOverweight";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Query response has been received and query is removed. There was a general error with"]
			#[doc = "dispatching the notification call."]
			#[doc = ""]
			#[doc = "\\[ id, pallet index, call index \\]"]
			pub struct NotifyDispatchError(
				pub notify_dispatch_error::Field0,
				pub notify_dispatch_error::Field1,
				pub notify_dispatch_error::Field2,
			);
			pub mod notify_dispatch_error {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u64;
				pub type Field1 = ::core::primitive::u8;
				pub type Field2 = ::core::primitive::u8;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NotifyDispatchError {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "NotifyDispatchError";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
			#[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
			#[doc = "is not `(origin, QueryId, Response)`."]
			#[doc = ""]
			#[doc = "\\[ id, pallet index, call index \\]"]
			pub struct NotifyDecodeFailed(
				pub notify_decode_failed::Field0,
				pub notify_decode_failed::Field1,
				pub notify_decode_failed::Field2,
			);
			pub mod notify_decode_failed {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u64;
				pub type Field1 = ::core::primitive::u8;
				pub type Field2 = ::core::primitive::u8;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NotifyDecodeFailed {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "NotifyDecodeFailed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Expected query response has been received but the origin location of the response does"]
			#[doc = "not match that expected. The query remains registered for a later, valid, response to"]
			#[doc = "be received and acted upon."]
			#[doc = ""]
			#[doc = "\\[ origin location, id, expected location \\]"]
			pub struct InvalidResponder(
				pub invalid_responder::Field0,
				pub invalid_responder::Field1,
				pub invalid_responder::Field2,
			);
			pub mod invalid_responder {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field1 = ::core::primitive::u64;
				pub type Field2 =
					::core::option::Option<runtime_types::xcm::v3::multilocation::MultiLocation>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for InvalidResponder {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "InvalidResponder";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Expected query response has been received but the expected origin location placed in"]
			#[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
			#[doc = ""]
			#[doc = "This is unexpected (since a location placed in storage in a previously executing"]
			#[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
			#[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
			#[doc = "needed."]
			#[doc = ""]
			#[doc = "\\[ origin location, id \\]"]
			pub struct InvalidResponderVersion(
				pub invalid_responder_version::Field0,
				pub invalid_responder_version::Field1,
			);
			pub mod invalid_responder_version {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field1 = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for InvalidResponderVersion {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "InvalidResponderVersion";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Received query response has been read and removed."]
			#[doc = ""]
			#[doc = "\\[ id \\]"]
			pub struct ResponseTaken(pub response_taken::Field0);
			pub mod response_taken {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ResponseTaken {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "ResponseTaken";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some assets have been placed in an asset trap."]
			#[doc = ""]
			#[doc = "\\[ hash, origin, assets \\]"]
			pub struct AssetsTrapped(
				pub assets_trapped::Field0,
				pub assets_trapped::Field1,
				pub assets_trapped::Field2,
			);
			pub mod assets_trapped {
				use super::runtime_types;
				pub type Field0 = ::subxt::ext::subxt_core::utils::H256;
				pub type Field1 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field2 = runtime_types::xcm::VersionedMultiAssets;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for AssetsTrapped {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "AssetsTrapped";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An XCM version change notification message has been attempted to be sent."]
			#[doc = ""]
			#[doc = "The cost of sending it (borne by the chain) is included."]
			#[doc = ""]
			#[doc = "\\[ destination, result, cost \\]"]
			pub struct VersionChangeNotified(
				pub version_change_notified::Field0,
				pub version_change_notified::Field1,
				pub version_change_notified::Field2,
			);
			pub mod version_change_notified {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field1 = ::core::primitive::u32;
				pub type Field2 = runtime_types::xcm::v3::multiasset::MultiAssets;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for VersionChangeNotified {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "VersionChangeNotified";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The supported version of a location has been changed. This might be through an"]
			#[doc = "automatic notification or a manual intervention."]
			#[doc = ""]
			#[doc = "\\[ location, XCM version \\]"]
			pub struct SupportedVersionChanged(
				pub supported_version_changed::Field0,
				pub supported_version_changed::Field1,
			);
			pub mod supported_version_changed {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field1 = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for SupportedVersionChanged {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "SupportedVersionChanged";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A given location which had a version change subscription was dropped owing to an error"]
			#[doc = "sending the notification to it."]
			#[doc = ""]
			#[doc = "\\[ location, query ID, error \\]"]
			pub struct NotifyTargetSendFail(
				pub notify_target_send_fail::Field0,
				pub notify_target_send_fail::Field1,
				pub notify_target_send_fail::Field2,
			);
			pub mod notify_target_send_fail {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field1 = ::core::primitive::u64;
				pub type Field2 = runtime_types::xcm::v3::traits::Error;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NotifyTargetSendFail {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "NotifyTargetSendFail";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A given location which had a version change subscription was dropped owing to an error"]
			#[doc = "migrating the location to our new XCM format."]
			#[doc = ""]
			#[doc = "\\[ location, query ID \\]"]
			pub struct NotifyTargetMigrationFail(
				pub notify_target_migration_fail::Field0,
				pub notify_target_migration_fail::Field1,
			);
			pub mod notify_target_migration_fail {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::VersionedMultiLocation;
				pub type Field1 = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NotifyTargetMigrationFail {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "NotifyTargetMigrationFail";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Expected query response has been received but the expected querier location placed in"]
			#[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
			#[doc = ""]
			#[doc = "This is unexpected (since a location placed in storage in a previously executing"]
			#[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
			#[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
			#[doc = "needed."]
			#[doc = ""]
			#[doc = "\\[ origin location, id \\]"]
			pub struct InvalidQuerierVersion(
				pub invalid_querier_version::Field0,
				pub invalid_querier_version::Field1,
			);
			pub mod invalid_querier_version {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field1 = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for InvalidQuerierVersion {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "InvalidQuerierVersion";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Expected query response has been received but the querier location of the response does"]
			#[doc = "not match the expected. The query remains registered for a later, valid, response to"]
			#[doc = "be received and acted upon."]
			#[doc = ""]
			#[doc = "\\[ origin location, id, expected querier, maybe actual querier \\]"]
			pub struct InvalidQuerier(
				pub invalid_querier::Field0,
				pub invalid_querier::Field1,
				pub invalid_querier::Field2,
				pub invalid_querier::Field3,
			);
			pub mod invalid_querier {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field1 = ::core::primitive::u64;
				pub type Field2 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field3 =
					::core::option::Option<runtime_types::xcm::v3::multilocation::MultiLocation>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for InvalidQuerier {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "InvalidQuerier";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A remote has requested XCM version change notification from us and we have honored it."]
			#[doc = "A version information message is sent to them and its cost is included."]
			#[doc = ""]
			#[doc = "\\[ destination location, cost \\]"]
			pub struct VersionNotifyStarted(
				pub version_notify_started::Field0,
				pub version_notify_started::Field1,
			);
			pub mod version_notify_started {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field1 = runtime_types::xcm::v3::multiasset::MultiAssets;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for VersionNotifyStarted {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "VersionNotifyStarted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "We have requested that a remote chain sends us XCM version change notifications."]
			#[doc = ""]
			#[doc = "\\[ destination location, cost \\]"]
			pub struct VersionNotifyRequested(
				pub version_notify_requested::Field0,
				pub version_notify_requested::Field1,
			);
			pub mod version_notify_requested {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field1 = runtime_types::xcm::v3::multiasset::MultiAssets;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for VersionNotifyRequested {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "VersionNotifyRequested";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "We have requested that a remote chain stops sending us XCM version change notifications."]
			#[doc = ""]
			#[doc = "\\[ destination location, cost \\]"]
			pub struct VersionNotifyUnrequested(
				pub version_notify_unrequested::Field0,
				pub version_notify_unrequested::Field1,
			);
			pub mod version_notify_unrequested {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field1 = runtime_types::xcm::v3::multiasset::MultiAssets;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for VersionNotifyUnrequested {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "VersionNotifyUnrequested";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Fees were paid from a location for an operation (often for using `SendXcm`)."]
			#[doc = ""]
			#[doc = "\\[ paying location, fees \\]"]
			pub struct FeesPaid(pub fees_paid::Field0, pub fees_paid::Field1);
			pub mod fees_paid {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field1 = runtime_types::xcm::v3::multiasset::MultiAssets;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for FeesPaid {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "FeesPaid";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some assets have been claimed from an asset trap"]
			#[doc = ""]
			#[doc = "\\[ hash, origin, assets \\]"]
			pub struct AssetsClaimed(
				pub assets_claimed::Field0,
				pub assets_claimed::Field1,
				pub assets_claimed::Field2,
			);
			pub mod assets_claimed {
				use super::runtime_types;
				pub type Field0 = ::subxt::ext::subxt_core::utils::H256;
				pub type Field1 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field2 = runtime_types::xcm::VersionedMultiAssets;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for AssetsClaimed {
				const PALLET: &'static str = "PolkadotXcm";
				const EVENT: &'static str = "AssetsClaimed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod query_counter {
					use super::runtime_types;
					pub type QueryCounter = ::core::primitive::u64;
				}
				pub mod queries {
					use super::runtime_types;
					pub type Queries =
						runtime_types::pallet_xcm::pallet::QueryStatus<::core::primitive::u32>;
					pub type Param0 = ::core::primitive::u64;
				}
				pub mod asset_traps {
					use super::runtime_types;
					pub type AssetTraps = ::core::primitive::u32;
					pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
				}
				pub mod safe_xcm_version {
					use super::runtime_types;
					pub type SafeXcmVersion = ::core::primitive::u32;
				}
				pub mod supported_version {
					use super::runtime_types;
					pub type SupportedVersion = ::core::primitive::u32;
					pub type Param0 = ::core::primitive::u32;
					pub type Param1 = runtime_types::xcm::VersionedMultiLocation;
				}
				pub mod version_notifiers {
					use super::runtime_types;
					pub type VersionNotifiers = ::core::primitive::u64;
					pub type Param0 = ::core::primitive::u32;
					pub type Param1 = runtime_types::xcm::VersionedMultiLocation;
				}
				pub mod version_notify_targets {
					use super::runtime_types;
					pub type VersionNotifyTargets = (
						::core::primitive::u64,
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u32,
					);
					pub type Param0 = ::core::primitive::u32;
					pub type Param1 = runtime_types::xcm::VersionedMultiLocation;
				}
				pub mod version_discovery_queue {
					use super::runtime_types;
					pub type VersionDiscoveryQueue =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							runtime_types::xcm::VersionedMultiLocation,
							::core::primitive::u32,
						)>;
				}
				pub mod current_migration {
					use super::runtime_types;
					pub type CurrentMigration =
						runtime_types::pallet_xcm::pallet::VersionMigrationStage;
				}
				pub mod remote_locked_fungibles {
					use super::runtime_types;
					pub type RemoteLockedFungibles =
						runtime_types::pallet_xcm::pallet::RemoteLockedFungibleRecord<
							[::core::primitive::u8; 8usize],
						>;
					pub type Param0 = ::core::primitive::u32;
					pub type Param1 = ::subxt::ext::subxt_core::utils::AccountId32;
					pub type Param2 = runtime_types::xcm::VersionedAssetId;
				}
				pub mod locked_fungibles {
					use super::runtime_types;
					pub type LockedFungibles =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							::core::primitive::u128,
							runtime_types::xcm::VersionedMultiLocation,
						)>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod xcm_execution_suspended {
					use super::runtime_types;
					pub type XcmExecutionSuspended = ::core::primitive::bool;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The latest available query index."]
				pub fn query_counter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::query_counter::QueryCounter,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"QueryCounter",
						(),
						[
							216u8, 73u8, 160u8, 232u8, 60u8, 245u8, 218u8, 219u8, 152u8, 68u8,
							146u8, 219u8, 255u8, 7u8, 86u8, 112u8, 83u8, 49u8, 94u8, 173u8, 64u8,
							203u8, 147u8, 226u8, 236u8, 39u8, 129u8, 106u8, 209u8, 113u8, 150u8,
							50u8,
						],
					)
				}
				#[doc = " The ongoing queries."]
				pub fn queries_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::queries::Queries,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"Queries",
						(),
						[
							119u8, 5u8, 12u8, 91u8, 117u8, 240u8, 52u8, 192u8, 135u8, 139u8, 220u8,
							78u8, 207u8, 199u8, 71u8, 163u8, 100u8, 17u8, 6u8, 65u8, 200u8, 245u8,
							191u8, 82u8, 232u8, 128u8, 126u8, 70u8, 39u8, 63u8, 148u8, 219u8,
						],
					)
				}
				#[doc = " The ongoing queries."]
				pub fn queries(
					&self,
					_0: impl ::core::borrow::Borrow<types::queries::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::queries::Param0,
					>,
					types::queries::Queries,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"Queries",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							119u8, 5u8, 12u8, 91u8, 117u8, 240u8, 52u8, 192u8, 135u8, 139u8, 220u8,
							78u8, 207u8, 199u8, 71u8, 163u8, 100u8, 17u8, 6u8, 65u8, 200u8, 245u8,
							191u8, 82u8, 232u8, 128u8, 126u8, 70u8, 39u8, 63u8, 148u8, 219u8,
						],
					)
				}
				#[doc = " The existing asset traps."]
				#[doc = ""]
				#[doc = " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of"]
				#[doc = " times this pair has been trapped (usually just 1 if it exists at all)."]
				pub fn asset_traps_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::asset_traps::AssetTraps,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"AssetTraps",
						(),
						[
							148u8, 41u8, 254u8, 134u8, 61u8, 172u8, 126u8, 146u8, 78u8, 178u8,
							50u8, 77u8, 226u8, 8u8, 200u8, 78u8, 77u8, 91u8, 26u8, 133u8, 104u8,
							126u8, 28u8, 28u8, 202u8, 62u8, 87u8, 183u8, 231u8, 191u8, 5u8, 181u8,
						],
					)
				}
				#[doc = " The existing asset traps."]
				#[doc = ""]
				#[doc = " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of"]
				#[doc = " times this pair has been trapped (usually just 1 if it exists at all)."]
				pub fn asset_traps(
					&self,
					_0: impl ::core::borrow::Borrow<types::asset_traps::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::asset_traps::Param0,
					>,
					types::asset_traps::AssetTraps,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"AssetTraps",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							148u8, 41u8, 254u8, 134u8, 61u8, 172u8, 126u8, 146u8, 78u8, 178u8,
							50u8, 77u8, 226u8, 8u8, 200u8, 78u8, 77u8, 91u8, 26u8, 133u8, 104u8,
							126u8, 28u8, 28u8, 202u8, 62u8, 87u8, 183u8, 231u8, 191u8, 5u8, 181u8,
						],
					)
				}
				#[doc = " Default version to encode XCM when latest version of destination is unknown. If `None`,"]
				#[doc = " then the destinations whose XCM version is unknown are considered unreachable."]
				pub fn safe_xcm_version(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::safe_xcm_version::SafeXcmVersion,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"SafeXcmVersion",
						(),
						[
							187u8, 8u8, 74u8, 126u8, 80u8, 215u8, 177u8, 60u8, 223u8, 123u8, 196u8,
							155u8, 166u8, 66u8, 25u8, 164u8, 191u8, 66u8, 116u8, 131u8, 116u8,
							188u8, 224u8, 122u8, 75u8, 195u8, 246u8, 188u8, 83u8, 134u8, 49u8,
							143u8,
						],
					)
				}
				#[doc = " The Latest versions that we know various locations support."]
				pub fn supported_version_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::supported_version::SupportedVersion,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"SupportedVersion",
						(),
						[
							144u8, 22u8, 91u8, 30u8, 139u8, 164u8, 95u8, 149u8, 97u8, 247u8, 12u8,
							212u8, 96u8, 16u8, 134u8, 236u8, 74u8, 57u8, 244u8, 169u8, 68u8, 63u8,
							111u8, 86u8, 65u8, 229u8, 104u8, 51u8, 44u8, 100u8, 47u8, 191u8,
						],
					)
				}
				#[doc = " The Latest versions that we know various locations support."]
				pub fn supported_version_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::supported_version::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::supported_version::Param0,
					>,
					types::supported_version::SupportedVersion,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"SupportedVersion",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							144u8, 22u8, 91u8, 30u8, 139u8, 164u8, 95u8, 149u8, 97u8, 247u8, 12u8,
							212u8, 96u8, 16u8, 134u8, 236u8, 74u8, 57u8, 244u8, 169u8, 68u8, 63u8,
							111u8, 86u8, 65u8, 229u8, 104u8, 51u8, 44u8, 100u8, 47u8, 191u8,
						],
					)
				}
				#[doc = " The Latest versions that we know various locations support."]
				pub fn supported_version(
					&self,
					_0: impl ::core::borrow::Borrow<types::supported_version::Param0>,
					_1: impl ::core::borrow::Borrow<types::supported_version::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::supported_version::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::supported_version::Param1,
						>,
					),
					types::supported_version::SupportedVersion,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"SupportedVersion",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							144u8, 22u8, 91u8, 30u8, 139u8, 164u8, 95u8, 149u8, 97u8, 247u8, 12u8,
							212u8, 96u8, 16u8, 134u8, 236u8, 74u8, 57u8, 244u8, 169u8, 68u8, 63u8,
							111u8, 86u8, 65u8, 229u8, 104u8, 51u8, 44u8, 100u8, 47u8, 191u8,
						],
					)
				}
				#[doc = " All locations that we have requested version notifications from."]
				pub fn version_notifiers_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::version_notifiers::VersionNotifiers,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"VersionNotifiers",
						(),
						[
							49u8, 190u8, 73u8, 67u8, 91u8, 69u8, 121u8, 206u8, 25u8, 82u8, 29u8,
							170u8, 157u8, 201u8, 168u8, 93u8, 181u8, 55u8, 226u8, 142u8, 136u8,
							46u8, 117u8, 208u8, 130u8, 90u8, 129u8, 39u8, 151u8, 92u8, 118u8, 75u8,
						],
					)
				}
				#[doc = " All locations that we have requested version notifications from."]
				pub fn version_notifiers_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::version_notifiers::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::version_notifiers::Param0,
					>,
					types::version_notifiers::VersionNotifiers,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"VersionNotifiers",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							49u8, 190u8, 73u8, 67u8, 91u8, 69u8, 121u8, 206u8, 25u8, 82u8, 29u8,
							170u8, 157u8, 201u8, 168u8, 93u8, 181u8, 55u8, 226u8, 142u8, 136u8,
							46u8, 117u8, 208u8, 130u8, 90u8, 129u8, 39u8, 151u8, 92u8, 118u8, 75u8,
						],
					)
				}
				#[doc = " All locations that we have requested version notifications from."]
				pub fn version_notifiers(
					&self,
					_0: impl ::core::borrow::Borrow<types::version_notifiers::Param0>,
					_1: impl ::core::borrow::Borrow<types::version_notifiers::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::version_notifiers::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::version_notifiers::Param1,
						>,
					),
					types::version_notifiers::VersionNotifiers,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"VersionNotifiers",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							49u8, 190u8, 73u8, 67u8, 91u8, 69u8, 121u8, 206u8, 25u8, 82u8, 29u8,
							170u8, 157u8, 201u8, 168u8, 93u8, 181u8, 55u8, 226u8, 142u8, 136u8,
							46u8, 117u8, 208u8, 130u8, 90u8, 129u8, 39u8, 151u8, 92u8, 118u8, 75u8,
						],
					)
				}
				#[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
				#[doc = " of our versions we informed them of."]
				pub fn version_notify_targets_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::version_notify_targets::VersionNotifyTargets,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"VersionNotifyTargets",
						(),
						[
							1u8, 195u8, 40u8, 83u8, 216u8, 175u8, 241u8, 95u8, 42u8, 7u8, 85u8,
							253u8, 223u8, 241u8, 195u8, 41u8, 41u8, 21u8, 17u8, 171u8, 216u8,
							150u8, 39u8, 165u8, 215u8, 194u8, 201u8, 225u8, 179u8, 12u8, 52u8,
							173u8,
						],
					)
				}
				#[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
				#[doc = " of our versions we informed them of."]
				pub fn version_notify_targets_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::version_notify_targets::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::version_notify_targets::Param0,
					>,
					types::version_notify_targets::VersionNotifyTargets,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"VersionNotifyTargets",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							1u8, 195u8, 40u8, 83u8, 216u8, 175u8, 241u8, 95u8, 42u8, 7u8, 85u8,
							253u8, 223u8, 241u8, 195u8, 41u8, 41u8, 21u8, 17u8, 171u8, 216u8,
							150u8, 39u8, 165u8, 215u8, 194u8, 201u8, 225u8, 179u8, 12u8, 52u8,
							173u8,
						],
					)
				}
				#[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
				#[doc = " of our versions we informed them of."]
				pub fn version_notify_targets(
					&self,
					_0: impl ::core::borrow::Borrow<types::version_notify_targets::Param0>,
					_1: impl ::core::borrow::Borrow<types::version_notify_targets::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::version_notify_targets::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::version_notify_targets::Param1,
						>,
					),
					types::version_notify_targets::VersionNotifyTargets,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"VersionNotifyTargets",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							1u8, 195u8, 40u8, 83u8, 216u8, 175u8, 241u8, 95u8, 42u8, 7u8, 85u8,
							253u8, 223u8, 241u8, 195u8, 41u8, 41u8, 21u8, 17u8, 171u8, 216u8,
							150u8, 39u8, 165u8, 215u8, 194u8, 201u8, 225u8, 179u8, 12u8, 52u8,
							173u8,
						],
					)
				}
				#[doc = " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and"]
				#[doc = " the `u32` counter is the number of times that a send to the destination has been attempted,"]
				#[doc = " which is used as a prioritization."]
				pub fn version_discovery_queue(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::version_discovery_queue::VersionDiscoveryQueue,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"VersionDiscoveryQueue",
						(),
						[
							110u8, 87u8, 102u8, 193u8, 125u8, 129u8, 0u8, 221u8, 218u8, 229u8,
							101u8, 94u8, 74u8, 229u8, 246u8, 180u8, 113u8, 11u8, 15u8, 159u8, 98u8,
							90u8, 30u8, 112u8, 164u8, 236u8, 151u8, 220u8, 19u8, 83u8, 67u8, 248u8,
						],
					)
				}
				#[doc = " The current migration's stage, if any."]
				pub fn current_migration(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::current_migration::CurrentMigration,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"CurrentMigration",
						(),
						[
							74u8, 138u8, 181u8, 162u8, 59u8, 251u8, 37u8, 28u8, 232u8, 51u8, 30u8,
							152u8, 252u8, 133u8, 95u8, 195u8, 47u8, 127u8, 21u8, 44u8, 62u8, 143u8,
							170u8, 234u8, 160u8, 37u8, 131u8, 179u8, 57u8, 241u8, 140u8, 124u8,
						],
					)
				}
				#[doc = " Fungible assets which we know are locked on a remote chain."]
				pub fn remote_locked_fungibles_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::remote_locked_fungibles::RemoteLockedFungibles,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"RemoteLockedFungibles",
						(),
						[
							186u8, 45u8, 118u8, 160u8, 26u8, 66u8, 223u8, 68u8, 164u8, 41u8, 243u8,
							216u8, 248u8, 157u8, 27u8, 202u8, 3u8, 118u8, 80u8, 91u8, 72u8, 178u8,
							162u8, 8u8, 100u8, 125u8, 40u8, 194u8, 174u8, 179u8, 96u8, 184u8,
						],
					)
				}
				#[doc = " Fungible assets which we know are locked on a remote chain."]
				pub fn remote_locked_fungibles_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::remote_locked_fungibles::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::remote_locked_fungibles::Param0,
					>,
					types::remote_locked_fungibles::RemoteLockedFungibles,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"RemoteLockedFungibles",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							186u8, 45u8, 118u8, 160u8, 26u8, 66u8, 223u8, 68u8, 164u8, 41u8, 243u8,
							216u8, 248u8, 157u8, 27u8, 202u8, 3u8, 118u8, 80u8, 91u8, 72u8, 178u8,
							162u8, 8u8, 100u8, 125u8, 40u8, 194u8, 174u8, 179u8, 96u8, 184u8,
						],
					)
				}
				#[doc = " Fungible assets which we know are locked on a remote chain."]
				pub fn remote_locked_fungibles_iter2(
					&self,
					_0: impl ::core::borrow::Borrow<types::remote_locked_fungibles::Param0>,
					_1: impl ::core::borrow::Borrow<types::remote_locked_fungibles::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::remote_locked_fungibles::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::remote_locked_fungibles::Param1,
						>,
					),
					types::remote_locked_fungibles::RemoteLockedFungibles,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"RemoteLockedFungibles",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							186u8, 45u8, 118u8, 160u8, 26u8, 66u8, 223u8, 68u8, 164u8, 41u8, 243u8,
							216u8, 248u8, 157u8, 27u8, 202u8, 3u8, 118u8, 80u8, 91u8, 72u8, 178u8,
							162u8, 8u8, 100u8, 125u8, 40u8, 194u8, 174u8, 179u8, 96u8, 184u8,
						],
					)
				}
				#[doc = " Fungible assets which we know are locked on a remote chain."]
				pub fn remote_locked_fungibles(
					&self,
					_0: impl ::core::borrow::Borrow<types::remote_locked_fungibles::Param0>,
					_1: impl ::core::borrow::Borrow<types::remote_locked_fungibles::Param1>,
					_2: impl ::core::borrow::Borrow<types::remote_locked_fungibles::Param2>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::remote_locked_fungibles::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::remote_locked_fungibles::Param1,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::remote_locked_fungibles::Param2,
						>,
					),
					types::remote_locked_fungibles::RemoteLockedFungibles,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"RemoteLockedFungibles",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_2.borrow(),
							),
						),
						[
							186u8, 45u8, 118u8, 160u8, 26u8, 66u8, 223u8, 68u8, 164u8, 41u8, 243u8,
							216u8, 248u8, 157u8, 27u8, 202u8, 3u8, 118u8, 80u8, 91u8, 72u8, 178u8,
							162u8, 8u8, 100u8, 125u8, 40u8, 194u8, 174u8, 179u8, 96u8, 184u8,
						],
					)
				}
				#[doc = " Fungible assets which we know are locked on this chain."]
				pub fn locked_fungibles_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::locked_fungibles::LockedFungibles,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"LockedFungibles",
						(),
						[
							110u8, 220u8, 127u8, 176u8, 219u8, 23u8, 132u8, 36u8, 224u8, 187u8,
							25u8, 103u8, 126u8, 99u8, 34u8, 105u8, 57u8, 182u8, 162u8, 69u8, 24u8,
							67u8, 221u8, 103u8, 79u8, 139u8, 187u8, 162u8, 113u8, 109u8, 163u8,
							35u8,
						],
					)
				}
				#[doc = " Fungible assets which we know are locked on this chain."]
				pub fn locked_fungibles(
					&self,
					_0: impl ::core::borrow::Borrow<types::locked_fungibles::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::locked_fungibles::Param0,
					>,
					types::locked_fungibles::LockedFungibles,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"LockedFungibles",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							110u8, 220u8, 127u8, 176u8, 219u8, 23u8, 132u8, 36u8, 224u8, 187u8,
							25u8, 103u8, 126u8, 99u8, 34u8, 105u8, 57u8, 182u8, 162u8, 69u8, 24u8,
							67u8, 221u8, 103u8, 79u8, 139u8, 187u8, 162u8, 113u8, 109u8, 163u8,
							35u8,
						],
					)
				}
				#[doc = " Global suspension state of the XCM executor."]
				pub fn xcm_execution_suspended(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::xcm_execution_suspended::XcmExecutionSuspended,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PolkadotXcm",
						"XcmExecutionSuspended",
						(),
						[
							182u8, 54u8, 69u8, 68u8, 78u8, 76u8, 103u8, 79u8, 47u8, 136u8, 99u8,
							104u8, 128u8, 129u8, 249u8, 54u8, 214u8, 136u8, 97u8, 48u8, 178u8,
							42u8, 26u8, 27u8, 82u8, 24u8, 33u8, 77u8, 33u8, 27u8, 20u8, 127u8,
						],
					)
				}
			}
		}
	}
	pub mod cumulus_xcm {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::cumulus_pallet_xcm::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::cumulus_pallet_xcm::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
			}
			pub struct TransactionApi;
			impl TransactionApi {}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::cumulus_pallet_xcm::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Downward message is invalid XCM."]
			#[doc = "\\[ id \\]"]
			pub struct InvalidFormat(pub invalid_format::Field0);
			pub mod invalid_format {
				use super::runtime_types;
				pub type Field0 = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for InvalidFormat {
				const PALLET: &'static str = "CumulusXcm";
				const EVENT: &'static str = "InvalidFormat";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Downward message is unsupported version of XCM."]
			#[doc = "\\[ id \\]"]
			pub struct UnsupportedVersion(pub unsupported_version::Field0);
			pub mod unsupported_version {
				use super::runtime_types;
				pub type Field0 = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for UnsupportedVersion {
				const PALLET: &'static str = "CumulusXcm";
				const EVENT: &'static str = "UnsupportedVersion";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Downward message executed with the given outcome."]
			#[doc = "\\[ id, outcome \\]"]
			pub struct ExecutedDownward(
				pub executed_downward::Field0,
				pub executed_downward::Field1,
			);
			pub mod executed_downward {
				use super::runtime_types;
				pub type Field0 = [::core::primitive::u8; 32usize];
				pub type Field1 = runtime_types::xcm::v3::traits::Outcome;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ExecutedDownward {
				const PALLET: &'static str = "CumulusXcm";
				const EVENT: &'static str = "ExecutedDownward";
			}
		}
	}
	pub mod dmp_queue {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::cumulus_pallet_dmp_queue::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::cumulus_pallet_dmp_queue::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Service a single overweight message."]
				pub struct ServiceOverweight {
					pub index: service_overweight::Index,
					pub weight_limit: service_overweight::WeightLimit,
				}
				pub mod service_overweight {
					use super::runtime_types;
					pub type Index = ::core::primitive::u64;
					pub type WeightLimit = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ServiceOverweight {
					const PALLET: &'static str = "DmpQueue";
					const CALL: &'static str = "service_overweight";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Service a single overweight message."]
				pub fn service_overweight(
					&self,
					index: types::service_overweight::Index,
					weight_limit: types::service_overweight::WeightLimit,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ServiceOverweight>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"DmpQueue",
						"service_overweight",
						types::ServiceOverweight { index, weight_limit },
						[
							235u8, 203u8, 220u8, 162u8, 173u8, 117u8, 224u8, 194u8, 176u8, 125u8,
							50u8, 74u8, 180u8, 37u8, 126u8, 227u8, 138u8, 213u8, 227u8, 35u8,
							247u8, 18u8, 160u8, 231u8, 97u8, 149u8, 144u8, 49u8, 34u8, 146u8, 32u8,
							7u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::cumulus_pallet_dmp_queue::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Downward message is invalid XCM."]
			pub struct InvalidFormat {
				pub message_id: invalid_format::MessageId,
			}
			pub mod invalid_format {
				use super::runtime_types;
				pub type MessageId = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for InvalidFormat {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "InvalidFormat";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Downward message is unsupported version of XCM."]
			pub struct UnsupportedVersion {
				pub message_id: unsupported_version::MessageId,
			}
			pub mod unsupported_version {
				use super::runtime_types;
				pub type MessageId = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for UnsupportedVersion {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "UnsupportedVersion";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Downward message executed with the given outcome."]
			pub struct ExecutedDownward {
				pub message_id: executed_downward::MessageId,
				pub outcome: executed_downward::Outcome,
			}
			pub mod executed_downward {
				use super::runtime_types;
				pub type MessageId = [::core::primitive::u8; 32usize];
				pub type Outcome = runtime_types::xcm::v3::traits::Outcome;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ExecutedDownward {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "ExecutedDownward";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The weight limit for handling downward messages was reached."]
			pub struct WeightExhausted {
				pub message_id: weight_exhausted::MessageId,
				pub remaining_weight: weight_exhausted::RemainingWeight,
				pub required_weight: weight_exhausted::RequiredWeight,
			}
			pub mod weight_exhausted {
				use super::runtime_types;
				pub type MessageId = [::core::primitive::u8; 32usize];
				pub type RemainingWeight = runtime_types::sp_weights::weight_v2::Weight;
				pub type RequiredWeight = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for WeightExhausted {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "WeightExhausted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Downward message is overweight and was placed in the overweight queue."]
			pub struct OverweightEnqueued {
				pub message_id: overweight_enqueued::MessageId,
				pub overweight_index: overweight_enqueued::OverweightIndex,
				pub required_weight: overweight_enqueued::RequiredWeight,
			}
			pub mod overweight_enqueued {
				use super::runtime_types;
				pub type MessageId = [::core::primitive::u8; 32usize];
				pub type OverweightIndex = ::core::primitive::u64;
				pub type RequiredWeight = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for OverweightEnqueued {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "OverweightEnqueued";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Downward message from the overweight queue was executed."]
			pub struct OverweightServiced {
				pub overweight_index: overweight_serviced::OverweightIndex,
				pub weight_used: overweight_serviced::WeightUsed,
			}
			pub mod overweight_serviced {
				use super::runtime_types;
				pub type OverweightIndex = ::core::primitive::u64;
				pub type WeightUsed = runtime_types::sp_weights::weight_v2::Weight;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for OverweightServiced {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "OverweightServiced";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The maximum number of downward messages was."]
			pub struct MaxMessagesExhausted {
				pub message_id: max_messages_exhausted::MessageId,
			}
			pub mod max_messages_exhausted {
				use super::runtime_types;
				pub type MessageId = [::core::primitive::u8; 32usize];
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for MaxMessagesExhausted {
				const PALLET: &'static str = "DmpQueue";
				const EVENT: &'static str = "MaxMessagesExhausted";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod configuration {
					use super::runtime_types;
					pub type Configuration = runtime_types::cumulus_pallet_dmp_queue::ConfigData;
				}
				pub mod page_index {
					use super::runtime_types;
					pub type PageIndex = runtime_types::cumulus_pallet_dmp_queue::PageIndexData;
				}
				pub mod pages {
					use super::runtime_types;
					pub type Pages = ::subxt::ext::subxt_core::alloc::vec::Vec<(
						::core::primitive::u32,
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					)>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod overweight {
					use super::runtime_types;
					pub type Overweight = (
						::core::primitive::u32,
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					);
					pub type Param0 = ::core::primitive::u64;
				}
				pub mod counter_for_overweight {
					use super::runtime_types;
					pub type CounterForOverweight = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The configuration."]
				pub fn configuration(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::configuration::Configuration,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"DmpQueue",
						"Configuration",
						(),
						[
							28u8, 58u8, 57u8, 84u8, 115u8, 69u8, 158u8, 234u8, 180u8, 37u8, 138u8,
							120u8, 182u8, 145u8, 109u8, 203u8, 62u8, 102u8, 168u8, 56u8, 236u8,
							10u8, 236u8, 104u8, 232u8, 245u8, 107u8, 143u8, 247u8, 232u8, 135u8,
							131u8,
						],
					)
				}
				#[doc = " The page index."]
				pub fn page_index(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::page_index::PageIndex,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"DmpQueue",
						"PageIndex",
						(),
						[
							246u8, 129u8, 111u8, 255u8, 168u8, 54u8, 121u8, 21u8, 159u8, 142u8,
							252u8, 173u8, 3u8, 191u8, 202u8, 158u8, 86u8, 26u8, 76u8, 134u8, 201u8,
							138u8, 103u8, 75u8, 223u8, 57u8, 36u8, 45u8, 171u8, 190u8, 21u8, 60u8,
						],
					)
				}
				#[doc = " The queue pages."]
				pub fn pages_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::pages::Pages,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"DmpQueue",
						"Pages",
						(),
						[
							24u8, 215u8, 210u8, 131u8, 23u8, 56u8, 71u8, 143u8, 35u8, 151u8, 223u8,
							133u8, 42u8, 32u8, 180u8, 85u8, 146u8, 166u8, 6u8, 168u8, 227u8, 128u8,
							30u8, 108u8, 103u8, 16u8, 169u8, 235u8, 238u8, 224u8, 247u8, 233u8,
						],
					)
				}
				#[doc = " The queue pages."]
				pub fn pages(
					&self,
					_0: impl ::core::borrow::Borrow<types::pages::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::pages::Param0,
					>,
					types::pages::Pages,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"DmpQueue",
						"Pages",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							24u8, 215u8, 210u8, 131u8, 23u8, 56u8, 71u8, 143u8, 35u8, 151u8, 223u8,
							133u8, 42u8, 32u8, 180u8, 85u8, 146u8, 166u8, 6u8, 168u8, 227u8, 128u8,
							30u8, 108u8, 103u8, 16u8, 169u8, 235u8, 238u8, 224u8, 247u8, 233u8,
						],
					)
				}
				#[doc = " The overweight messages."]
				pub fn overweight_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::overweight::Overweight,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"DmpQueue",
						"Overweight",
						(),
						[
							86u8, 97u8, 243u8, 7u8, 134u8, 189u8, 7u8, 126u8, 8u8, 108u8, 152u8,
							48u8, 230u8, 8u8, 71u8, 83u8, 151u8, 125u8, 18u8, 168u8, 38u8, 38u8,
							117u8, 85u8, 143u8, 187u8, 122u8, 13u8, 104u8, 52u8, 198u8, 138u8,
						],
					)
				}
				#[doc = " The overweight messages."]
				pub fn overweight(
					&self,
					_0: impl ::core::borrow::Borrow<types::overweight::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::overweight::Param0,
					>,
					types::overweight::Overweight,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"DmpQueue",
						"Overweight",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							86u8, 97u8, 243u8, 7u8, 134u8, 189u8, 7u8, 126u8, 8u8, 108u8, 152u8,
							48u8, 230u8, 8u8, 71u8, 83u8, 151u8, 125u8, 18u8, 168u8, 38u8, 38u8,
							117u8, 85u8, 143u8, 187u8, 122u8, 13u8, 104u8, 52u8, 198u8, 138u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_overweight(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::counter_for_overweight::CounterForOverweight,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"DmpQueue",
						"CounterForOverweight",
						(),
						[
							44u8, 249u8, 133u8, 204u8, 169u8, 253u8, 23u8, 157u8, 132u8, 193u8,
							28u8, 178u8, 156u8, 176u8, 206u8, 46u8, 79u8, 254u8, 174u8, 236u8,
							143u8, 219u8, 59u8, 43u8, 36u8, 109u8, 244u8, 206u8, 48u8, 126u8,
							247u8, 0u8,
						],
					)
				}
			}
		}
	}
	pub mod x_tokens {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::orml_xtokens::module::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::orml_xtokens::module::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer native currencies."]
				#[doc = ""]
				#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
				#[doc = "chain, and it would be charged from the transferred assets. If set"]
				#[doc = "below requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub struct Transfer {
					pub currency_id: transfer::CurrencyId,
					pub amount: transfer::Amount,
					pub dest: ::subxt::ext::subxt_core::alloc::boxed::Box<transfer::Dest>,
					pub dest_weight_limit: transfer::DestWeightLimit,
				}
				pub mod transfer {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Transfer {
					const PALLET: &'static str = "XTokens";
					const CALL: &'static str = "transfer";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer `MultiAsset`."]
				#[doc = ""]
				#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
				#[doc = "chain, and it would be charged from the transferred assets. If set"]
				#[doc = "below requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub struct TransferMultiasset {
					pub asset:
						::subxt::ext::subxt_core::alloc::boxed::Box<transfer_multiasset::Asset>,
					pub dest:
						::subxt::ext::subxt_core::alloc::boxed::Box<transfer_multiasset::Dest>,
					pub dest_weight_limit: transfer_multiasset::DestWeightLimit,
				}
				pub mod transfer_multiasset {
					use super::runtime_types;
					pub type Asset = runtime_types::xcm::VersionedMultiAsset;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferMultiasset {
					const PALLET: &'static str = "XTokens";
					const CALL: &'static str = "transfer_multiasset";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer native currencies specifying the fee and amount as"]
				#[doc = "separate."]
				#[doc = ""]
				#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
				#[doc = "chain, and it would be charged from the transferred assets. If set"]
				#[doc = "below requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "`fee` is the amount to be spent to pay for execution in destination"]
				#[doc = "chain. Both fee and amount will be subtracted form the callers"]
				#[doc = "balance."]
				#[doc = ""]
				#[doc = "If `fee` is not high enough to cover for the execution costs in the"]
				#[doc = "destination chain, then the assets will be trapped in the"]
				#[doc = "destination chain"]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub struct TransferWithFee {
					pub currency_id: transfer_with_fee::CurrencyId,
					pub amount: transfer_with_fee::Amount,
					pub fee: transfer_with_fee::Fee,
					pub dest: ::subxt::ext::subxt_core::alloc::boxed::Box<transfer_with_fee::Dest>,
					pub dest_weight_limit: transfer_with_fee::DestWeightLimit,
				}
				pub mod transfer_with_fee {
					use super::runtime_types;
					pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
					pub type Fee = ::core::primitive::u128;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferWithFee {
					const PALLET: &'static str = "XTokens";
					const CALL: &'static str = "transfer_with_fee";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer `MultiAsset` specifying the fee and amount as separate."]
				#[doc = ""]
				#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
				#[doc = "chain, and it would be charged from the transferred assets. If set"]
				#[doc = "below requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "`fee` is the multiasset to be spent to pay for execution in"]
				#[doc = "destination chain. Both fee and amount will be subtracted form the"]
				#[doc = "callers balance For now we only accept fee and asset having the same"]
				#[doc = "`MultiLocation` id."]
				#[doc = ""]
				#[doc = "If `fee` is not high enough to cover for the execution costs in the"]
				#[doc = "destination chain, then the assets will be trapped in the"]
				#[doc = "destination chain"]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub struct TransferMultiassetWithFee {
					pub asset: ::subxt::ext::subxt_core::alloc::boxed::Box<
						transfer_multiasset_with_fee::Asset,
					>,
					pub fee: ::subxt::ext::subxt_core::alloc::boxed::Box<
						transfer_multiasset_with_fee::Fee,
					>,
					pub dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
						transfer_multiasset_with_fee::Dest,
					>,
					pub dest_weight_limit: transfer_multiasset_with_fee::DestWeightLimit,
				}
				pub mod transfer_multiasset_with_fee {
					use super::runtime_types;
					pub type Asset = runtime_types::xcm::VersionedMultiAsset;
					pub type Fee = runtime_types::xcm::VersionedMultiAsset;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferMultiassetWithFee {
					const PALLET: &'static str = "XTokens";
					const CALL: &'static str = "transfer_multiasset_with_fee";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer several currencies specifying the item to be used as fee"]
				#[doc = ""]
				#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
				#[doc = "chain, and it would be charged from the transferred assets. If set"]
				#[doc = "below requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "`fee_item` is index of the currencies tuple that we want to use for"]
				#[doc = "payment"]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub struct TransferMulticurrencies {
					pub currencies: transfer_multicurrencies::Currencies,
					pub fee_item: transfer_multicurrencies::FeeItem,
					pub dest:
						::subxt::ext::subxt_core::alloc::boxed::Box<transfer_multicurrencies::Dest>,
					pub dest_weight_limit: transfer_multicurrencies::DestWeightLimit,
				}
				pub mod transfer_multicurrencies {
					use super::runtime_types;
					pub type Currencies = ::subxt::ext::subxt_core::alloc::vec::Vec<(
						runtime_types::primitives::currency::CurrencyId,
						::core::primitive::u128,
					)>;
					pub type FeeItem = ::core::primitive::u32;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferMulticurrencies {
					const PALLET: &'static str = "XTokens";
					const CALL: &'static str = "transfer_multicurrencies";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer several `MultiAsset` specifying the item to be used as fee"]
				#[doc = ""]
				#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
				#[doc = "chain, and it would be charged from the transferred assets. If set"]
				#[doc = "below requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "`fee_item` is index of the MultiAssets that we want to use for"]
				#[doc = "payment"]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub struct TransferMultiassets {
					pub assets:
						::subxt::ext::subxt_core::alloc::boxed::Box<transfer_multiassets::Assets>,
					pub fee_item: transfer_multiassets::FeeItem,
					pub dest:
						::subxt::ext::subxt_core::alloc::boxed::Box<transfer_multiassets::Dest>,
					pub dest_weight_limit: transfer_multiassets::DestWeightLimit,
				}
				pub mod transfer_multiassets {
					use super::runtime_types;
					pub type Assets = runtime_types::xcm::VersionedMultiAssets;
					pub type FeeItem = ::core::primitive::u32;
					pub type Dest = runtime_types::xcm::VersionedMultiLocation;
					pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferMultiassets {
					const PALLET: &'static str = "XTokens";
					const CALL: &'static str = "transfer_multiassets";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Transfer native currencies."]
				#[doc = ""]
				#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
				#[doc = "chain, and it would be charged from the transferred assets. If set"]
				#[doc = "below requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub fn transfer(
					&self,
					currency_id: types::transfer::CurrencyId,
					amount: types::transfer::Amount,
					dest: types::transfer::Dest,
					dest_weight_limit: types::transfer::DestWeightLimit,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Transfer> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XTokens",
						"transfer",
						types::Transfer {
							currency_id,
							amount,
							dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
							dest_weight_limit,
						},
						[
							248u8, 69u8, 26u8, 125u8, 60u8, 0u8, 39u8, 2u8, 226u8, 250u8, 36u8,
							101u8, 101u8, 44u8, 58u8, 31u8, 247u8, 190u8, 103u8, 99u8, 84u8, 246u8,
							147u8, 115u8, 22u8, 166u8, 137u8, 27u8, 97u8, 136u8, 15u8, 109u8,
						],
					)
				}
				#[doc = "Transfer `MultiAsset`."]
				#[doc = ""]
				#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
				#[doc = "chain, and it would be charged from the transferred assets. If set"]
				#[doc = "below requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub fn transfer_multiasset(
					&self,
					asset: types::transfer_multiasset::Asset,
					dest: types::transfer_multiasset::Dest,
					dest_weight_limit: types::transfer_multiasset::DestWeightLimit,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferMultiasset>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XTokens",
						"transfer_multiasset",
						types::TransferMultiasset {
							asset: ::subxt::ext::subxt_core::alloc::boxed::Box::new(asset),
							dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
							dest_weight_limit,
						},
						[
							41u8, 136u8, 12u8, 95u8, 87u8, 89u8, 79u8, 94u8, 22u8, 194u8, 186u8,
							131u8, 93u8, 130u8, 219u8, 51u8, 45u8, 231u8, 203u8, 58u8, 230u8, 43u8,
							165u8, 117u8, 141u8, 64u8, 99u8, 128u8, 62u8, 30u8, 122u8, 27u8,
						],
					)
				}
				#[doc = "Transfer native currencies specifying the fee and amount as"]
				#[doc = "separate."]
				#[doc = ""]
				#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
				#[doc = "chain, and it would be charged from the transferred assets. If set"]
				#[doc = "below requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "`fee` is the amount to be spent to pay for execution in destination"]
				#[doc = "chain. Both fee and amount will be subtracted form the callers"]
				#[doc = "balance."]
				#[doc = ""]
				#[doc = "If `fee` is not high enough to cover for the execution costs in the"]
				#[doc = "destination chain, then the assets will be trapped in the"]
				#[doc = "destination chain"]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub fn transfer_with_fee(
					&self,
					currency_id: types::transfer_with_fee::CurrencyId,
					amount: types::transfer_with_fee::Amount,
					fee: types::transfer_with_fee::Fee,
					dest: types::transfer_with_fee::Dest,
					dest_weight_limit: types::transfer_with_fee::DestWeightLimit,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferWithFee>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XTokens",
						"transfer_with_fee",
						types::TransferWithFee {
							currency_id,
							amount,
							fee,
							dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
							dest_weight_limit,
						},
						[
							151u8, 61u8, 25u8, 253u8, 31u8, 74u8, 113u8, 94u8, 126u8, 247u8, 127u8,
							7u8, 194u8, 180u8, 217u8, 1u8, 228u8, 116u8, 196u8, 22u8, 182u8, 84u8,
							157u8, 52u8, 156u8, 0u8, 240u8, 161u8, 93u8, 167u8, 88u8, 167u8,
						],
					)
				}
				#[doc = "Transfer `MultiAsset` specifying the fee and amount as separate."]
				#[doc = ""]
				#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
				#[doc = "chain, and it would be charged from the transferred assets. If set"]
				#[doc = "below requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "`fee` is the multiasset to be spent to pay for execution in"]
				#[doc = "destination chain. Both fee and amount will be subtracted form the"]
				#[doc = "callers balance For now we only accept fee and asset having the same"]
				#[doc = "`MultiLocation` id."]
				#[doc = ""]
				#[doc = "If `fee` is not high enough to cover for the execution costs in the"]
				#[doc = "destination chain, then the assets will be trapped in the"]
				#[doc = "destination chain"]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub fn transfer_multiasset_with_fee(
					&self,
					asset: types::transfer_multiasset_with_fee::Asset,
					fee: types::transfer_multiasset_with_fee::Fee,
					dest: types::transfer_multiasset_with_fee::Dest,
					dest_weight_limit: types::transfer_multiasset_with_fee::DestWeightLimit,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::TransferMultiassetWithFee,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XTokens",
						"transfer_multiasset_with_fee",
						types::TransferMultiassetWithFee {
							asset: ::subxt::ext::subxt_core::alloc::boxed::Box::new(asset),
							fee: ::subxt::ext::subxt_core::alloc::boxed::Box::new(fee),
							dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
							dest_weight_limit,
						},
						[
							255u8, 67u8, 191u8, 126u8, 174u8, 56u8, 54u8, 112u8, 9u8, 247u8, 225u8,
							96u8, 118u8, 107u8, 27u8, 185u8, 42u8, 217u8, 21u8, 26u8, 139u8, 78u8,
							82u8, 179u8, 143u8, 209u8, 122u8, 145u8, 157u8, 209u8, 219u8, 211u8,
						],
					)
				}
				#[doc = "Transfer several currencies specifying the item to be used as fee"]
				#[doc = ""]
				#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
				#[doc = "chain, and it would be charged from the transferred assets. If set"]
				#[doc = "below requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "`fee_item` is index of the currencies tuple that we want to use for"]
				#[doc = "payment"]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub fn transfer_multicurrencies(
					&self,
					currencies: types::transfer_multicurrencies::Currencies,
					fee_item: types::transfer_multicurrencies::FeeItem,
					dest: types::transfer_multicurrencies::Dest,
					dest_weight_limit: types::transfer_multicurrencies::DestWeightLimit,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::TransferMulticurrencies,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XTokens",
						"transfer_multicurrencies",
						types::TransferMulticurrencies {
							currencies,
							fee_item,
							dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
							dest_weight_limit,
						},
						[
							224u8, 138u8, 30u8, 41u8, 165u8, 207u8, 86u8, 128u8, 72u8, 191u8,
							170u8, 81u8, 231u8, 225u8, 68u8, 111u8, 66u8, 21u8, 172u8, 210u8,
							251u8, 2u8, 98u8, 135u8, 108u8, 13u8, 226u8, 63u8, 188u8, 213u8, 146u8,
							92u8,
						],
					)
				}
				#[doc = "Transfer several `MultiAsset` specifying the item to be used as fee"]
				#[doc = ""]
				#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
				#[doc = "chain, and it would be charged from the transferred assets. If set"]
				#[doc = "below requirements, the execution may fail and assets wouldn't be"]
				#[doc = "received."]
				#[doc = ""]
				#[doc = "`fee_item` is index of the MultiAssets that we want to use for"]
				#[doc = "payment"]
				#[doc = ""]
				#[doc = "It's a no-op if any error on local XCM execution or message sending."]
				#[doc = "Note sending assets out per se doesn't guarantee they would be"]
				#[doc = "received. Receiving depends on if the XCM message could be delivered"]
				#[doc = "by the network, and if the receiving chain would handle"]
				#[doc = "messages correctly."]
				pub fn transfer_multiassets(
					&self,
					assets: types::transfer_multiassets::Assets,
					fee_item: types::transfer_multiassets::FeeItem,
					dest: types::transfer_multiassets::Dest,
					dest_weight_limit: types::transfer_multiassets::DestWeightLimit,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferMultiassets>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"XTokens",
						"transfer_multiassets",
						types::TransferMultiassets {
							assets: ::subxt::ext::subxt_core::alloc::boxed::Box::new(assets),
							fee_item,
							dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
							dest_weight_limit,
						},
						[
							62u8, 97u8, 148u8, 111u8, 216u8, 123u8, 216u8, 191u8, 196u8, 99u8,
							227u8, 31u8, 20u8, 178u8, 202u8, 25u8, 48u8, 132u8, 186u8, 196u8,
							150u8, 69u8, 51u8, 252u8, 250u8, 237u8, 177u8, 214u8, 246u8, 85u8,
							239u8, 137u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::orml_xtokens::module::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Transferred `MultiAsset` with fee."]
			pub struct TransferredMultiAssets {
				pub sender: transferred_multi_assets::Sender,
				pub assets: transferred_multi_assets::Assets,
				pub fee: transferred_multi_assets::Fee,
				pub dest: transferred_multi_assets::Dest,
			}
			pub mod transferred_multi_assets {
				use super::runtime_types;
				pub type Sender = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Assets = runtime_types::xcm::v3::multiasset::MultiAssets;
				pub type Fee = runtime_types::xcm::v3::multiasset::MultiAsset;
				pub type Dest = runtime_types::xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for TransferredMultiAssets {
				const PALLET: &'static str = "XTokens";
				const EVENT: &'static str = "TransferredMultiAssets";
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Self chain location."]
				pub fn self_location(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::xcm::v3::multilocation::MultiLocation,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"XTokens",
						"SelfLocation",
						[
							111u8, 216u8, 110u8, 49u8, 228u8, 60u8, 105u8, 227u8, 141u8, 11u8,
							125u8, 36u8, 252u8, 184u8, 156u8, 242u8, 146u8, 64u8, 244u8, 7u8, 70u8,
							186u8, 11u8, 235u8, 13u8, 254u8, 132u8, 2u8, 154u8, 117u8, 85u8, 154u8,
						],
					)
				}
				#[doc = " Base XCM weight."]
				#[doc = ""]
				#[doc = " The actually weight for an XCM message is `T::BaseXcmWeight +"]
				#[doc = " T::Weigher::weight(&msg)`."]
				pub fn base_xcm_weight(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::sp_weights::weight_v2::Weight,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"XTokens",
						"BaseXcmWeight",
						[
							149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
							56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
							128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
							112u8,
						],
					)
				}
			}
		}
	}
	pub mod unknown_tokens {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::orml_unknown_tokens::module::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::orml_unknown_tokens::module::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
			}
			pub struct TransactionApi;
			impl TransactionApi {}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::orml_unknown_tokens::module::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Deposit success."]
			pub struct Deposited {
				pub asset: deposited::Asset,
				pub who: deposited::Who,
			}
			pub mod deposited {
				use super::runtime_types;
				pub type Asset = runtime_types::xcm::v3::multiasset::MultiAsset;
				pub type Who = runtime_types::xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Deposited {
				const PALLET: &'static str = "UnknownTokens";
				const EVENT: &'static str = "Deposited";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Withdraw success."]
			pub struct Withdrawn {
				pub asset: withdrawn::Asset,
				pub who: withdrawn::Who,
			}
			pub mod withdrawn {
				use super::runtime_types;
				pub type Asset = runtime_types::xcm::v3::multiasset::MultiAsset;
				pub type Who = runtime_types::xcm::v3::multilocation::MultiLocation;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Withdrawn {
				const PALLET: &'static str = "UnknownTokens";
				const EVENT: &'static str = "Withdrawn";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod concrete_fungible_balances {
					use super::runtime_types;
					pub type ConcreteFungibleBalances = ::core::primitive::u128;
					pub type Param0 = runtime_types::xcm::v3::multilocation::MultiLocation;
					pub type Param1 = runtime_types::xcm::v3::multilocation::MultiLocation;
				}
				pub mod abstract_fungible_balances {
					use super::runtime_types;
					pub type AbstractFungibleBalances = ::core::primitive::u128;
					pub type Param0 = runtime_types::xcm::v3::multilocation::MultiLocation;
					pub type Param1 = [::core::primitive::u8];
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Concrete fungible balances under a given location and a concrete"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn concrete_fungible_balances_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::concrete_fungible_balances::ConcreteFungibleBalances,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"UnknownTokens",
						"ConcreteFungibleBalances",
						(),
						[
							228u8, 155u8, 200u8, 118u8, 186u8, 86u8, 50u8, 35u8, 240u8, 17u8, 69u8,
							4u8, 146u8, 149u8, 215u8, 144u8, 23u8, 163u8, 5u8, 69u8, 229u8, 60u8,
							93u8, 236u8, 213u8, 78u8, 199u8, 4u8, 80u8, 57u8, 112u8, 170u8,
						],
					)
				}
				#[doc = " Concrete fungible balances under a given location and a concrete"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn concrete_fungible_balances_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::concrete_fungible_balances::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::concrete_fungible_balances::Param0,
					>,
					types::concrete_fungible_balances::ConcreteFungibleBalances,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"UnknownTokens",
						"ConcreteFungibleBalances",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							228u8, 155u8, 200u8, 118u8, 186u8, 86u8, 50u8, 35u8, 240u8, 17u8, 69u8,
							4u8, 146u8, 149u8, 215u8, 144u8, 23u8, 163u8, 5u8, 69u8, 229u8, 60u8,
							93u8, 236u8, 213u8, 78u8, 199u8, 4u8, 80u8, 57u8, 112u8, 170u8,
						],
					)
				}
				#[doc = " Concrete fungible balances under a given location and a concrete"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn concrete_fungible_balances(
					&self,
					_0: impl ::core::borrow::Borrow<types::concrete_fungible_balances::Param0>,
					_1: impl ::core::borrow::Borrow<types::concrete_fungible_balances::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::concrete_fungible_balances::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::concrete_fungible_balances::Param1,
						>,
					),
					types::concrete_fungible_balances::ConcreteFungibleBalances,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"UnknownTokens",
						"ConcreteFungibleBalances",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							228u8, 155u8, 200u8, 118u8, 186u8, 86u8, 50u8, 35u8, 240u8, 17u8, 69u8,
							4u8, 146u8, 149u8, 215u8, 144u8, 23u8, 163u8, 5u8, 69u8, 229u8, 60u8,
							93u8, 236u8, 213u8, 78u8, 199u8, 4u8, 80u8, 57u8, 112u8, 170u8,
						],
					)
				}
				#[doc = " Abstract fungible balances under a given location and a abstract"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn abstract_fungible_balances_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::abstract_fungible_balances::AbstractFungibleBalances,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"UnknownTokens",
						"AbstractFungibleBalances",
						(),
						[
							222u8, 175u8, 193u8, 209u8, 199u8, 214u8, 193u8, 232u8, 181u8, 205u8,
							127u8, 184u8, 127u8, 50u8, 238u8, 14u8, 93u8, 84u8, 28u8, 99u8, 255u8,
							186u8, 22u8, 105u8, 86u8, 42u8, 253u8, 42u8, 119u8, 91u8, 170u8, 89u8,
						],
					)
				}
				#[doc = " Abstract fungible balances under a given location and a abstract"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn abstract_fungible_balances_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::abstract_fungible_balances::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::abstract_fungible_balances::Param0,
					>,
					types::abstract_fungible_balances::AbstractFungibleBalances,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"UnknownTokens",
						"AbstractFungibleBalances",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							222u8, 175u8, 193u8, 209u8, 199u8, 214u8, 193u8, 232u8, 181u8, 205u8,
							127u8, 184u8, 127u8, 50u8, 238u8, 14u8, 93u8, 84u8, 28u8, 99u8, 255u8,
							186u8, 22u8, 105u8, 86u8, 42u8, 253u8, 42u8, 119u8, 91u8, 170u8, 89u8,
						],
					)
				}
				#[doc = " Abstract fungible balances under a given location and a abstract"]
				#[doc = " fungible id."]
				#[doc = ""]
				#[doc = " double_map: who, asset_id => u128"]
				pub fn abstract_fungible_balances(
					&self,
					_0: impl ::core::borrow::Borrow<types::abstract_fungible_balances::Param0>,
					_1: impl ::core::borrow::Borrow<types::abstract_fungible_balances::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::abstract_fungible_balances::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::abstract_fungible_balances::Param1,
						>,
					),
					types::abstract_fungible_balances::AbstractFungibleBalances,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"UnknownTokens",
						"AbstractFungibleBalances",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							222u8, 175u8, 193u8, 209u8, 199u8, 214u8, 193u8, 232u8, 181u8, 205u8,
							127u8, 184u8, 127u8, 50u8, 238u8, 14u8, 93u8, 84u8, 28u8, 99u8, 255u8,
							186u8, 22u8, 105u8, 86u8, 42u8, 253u8, 42u8, 119u8, 91u8, 170u8, 89u8,
						],
					)
				}
			}
		}
	}
	pub mod tokens {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::orml_tokens::module::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::orml_tokens::module::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer some liquid free balance to another account."]
				#[doc = ""]
				#[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
				#[doc = "It will decrease the total issuance of the system by the"]
				#[doc = "`TransferFee`. If the sender's account is below the existential"]
				#[doc = "deposit as a result of the transfer, the account will be reaped."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the"]
				#[doc = "transactor."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `currency_id`: currency type."]
				#[doc = "- `amount`: free balance amount to tranfer."]
				pub struct Transfer {
					pub dest: transfer::Dest,
					pub currency_id: transfer::CurrencyId,
					#[codec(compact)]
					pub amount: transfer::Amount,
				}
				pub mod transfer {
					use super::runtime_types;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Transfer {
					const PALLET: &'static str = "Tokens";
					const CALL: &'static str = "transfer";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer all remaining balance to the given account."]
				#[doc = ""]
				#[doc = "NOTE: This function only attempts to transfer _transferable_"]
				#[doc = "balances. This means that any locked, reserved, or existential"]
				#[doc = "deposits (when `keep_alive` is `true`), will not be transferred by"]
				#[doc = "this function. To ensure that this function results in a killed"]
				#[doc = "account, you might need to prepare the account by removing any"]
				#[doc = "reference counters, storage deposits, etc..."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the"]
				#[doc = "transactor."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `currency_id`: currency type."]
				#[doc = "- `keep_alive`: A boolean to determine if the `transfer_all`"]
				#[doc = "  operation should send all of the funds the account has, causing"]
				#[doc = "  the sender account to be killed (false), or transfer everything"]
				#[doc = "  except at least the existential deposit, which will guarantee to"]
				#[doc = "  keep the sender account alive (true)."]
				pub struct TransferAll {
					pub dest: transfer_all::Dest,
					pub currency_id: transfer_all::CurrencyId,
					pub keep_alive: transfer_all::KeepAlive,
				}
				pub mod transfer_all {
					use super::runtime_types;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
					pub type KeepAlive = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferAll {
					const PALLET: &'static str = "Tokens";
					const CALL: &'static str = "transfer_all";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Same as the [`transfer`] call, but with a check that the transfer"]
				#[doc = "will not kill the origin account."]
				#[doc = ""]
				#[doc = "99% of the time you want [`transfer`] instead."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the"]
				#[doc = "transactor."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `currency_id`: currency type."]
				#[doc = "- `amount`: free balance amount to tranfer."]
				pub struct TransferKeepAlive {
					pub dest: transfer_keep_alive::Dest,
					pub currency_id: transfer_keep_alive::CurrencyId,
					#[codec(compact)]
					pub amount: transfer_keep_alive::Amount,
				}
				pub mod transfer_keep_alive {
					use super::runtime_types;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferKeepAlive {
					const PALLET: &'static str = "Tokens";
					const CALL: &'static str = "transfer_keep_alive";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Exactly as `transfer`, except the origin must be root and the source"]
				#[doc = "account may be specified."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				#[doc = ""]
				#[doc = "- `source`: The sender of the transfer."]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `currency_id`: currency type."]
				#[doc = "- `amount`: free balance amount to tranfer."]
				pub struct ForceTransfer {
					pub source: force_transfer::Source,
					pub dest: force_transfer::Dest,
					pub currency_id: force_transfer::CurrencyId,
					#[codec(compact)]
					pub amount: force_transfer::Amount,
				}
				pub mod force_transfer {
					use super::runtime_types;
					pub type Source = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceTransfer {
					const PALLET: &'static str = "Tokens";
					const CALL: &'static str = "force_transfer";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the balances of a given account."]
				#[doc = ""]
				#[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it"]
				#[doc = "will also decrease the total issuance of the system"]
				#[doc = "(`TotalIssuance`). If the new free or reserved balance is below the"]
				#[doc = "existential deposit, it will reap the `AccountInfo`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call is `root`."]
				pub struct SetBalance {
					pub who: set_balance::Who,
					pub currency_id: set_balance::CurrencyId,
					#[codec(compact)]
					pub new_free: set_balance::NewFree,
					#[codec(compact)]
					pub new_reserved: set_balance::NewReserved,
				}
				pub mod set_balance {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
					pub type NewFree = ::core::primitive::u128;
					pub type NewReserved = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetBalance {
					const PALLET: &'static str = "Tokens";
					const CALL: &'static str = "set_balance";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Transfer some liquid free balance to another account."]
				#[doc = ""]
				#[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
				#[doc = "It will decrease the total issuance of the system by the"]
				#[doc = "`TransferFee`. If the sender's account is below the existential"]
				#[doc = "deposit as a result of the transfer, the account will be reaped."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the"]
				#[doc = "transactor."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `currency_id`: currency type."]
				#[doc = "- `amount`: free balance amount to tranfer."]
				pub fn transfer(
					&self,
					dest: types::transfer::Dest,
					currency_id: types::transfer::CurrencyId,
					amount: types::transfer::Amount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Transfer> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Tokens",
						"transfer",
						types::Transfer { dest, currency_id, amount },
						[
							155u8, 164u8, 35u8, 37u8, 234u8, 147u8, 149u8, 51u8, 30u8, 5u8, 130u8,
							70u8, 182u8, 87u8, 84u8, 100u8, 170u8, 164u8, 145u8, 159u8, 100u8,
							157u8, 151u8, 233u8, 245u8, 68u8, 228u8, 160u8, 101u8, 206u8, 237u8,
							221u8,
						],
					)
				}
				#[doc = "Transfer all remaining balance to the given account."]
				#[doc = ""]
				#[doc = "NOTE: This function only attempts to transfer _transferable_"]
				#[doc = "balances. This means that any locked, reserved, or existential"]
				#[doc = "deposits (when `keep_alive` is `true`), will not be transferred by"]
				#[doc = "this function. To ensure that this function results in a killed"]
				#[doc = "account, you might need to prepare the account by removing any"]
				#[doc = "reference counters, storage deposits, etc..."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the"]
				#[doc = "transactor."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `currency_id`: currency type."]
				#[doc = "- `keep_alive`: A boolean to determine if the `transfer_all`"]
				#[doc = "  operation should send all of the funds the account has, causing"]
				#[doc = "  the sender account to be killed (false), or transfer everything"]
				#[doc = "  except at least the existential deposit, which will guarantee to"]
				#[doc = "  keep the sender account alive (true)."]
				pub fn transfer_all(
					&self,
					dest: types::transfer_all::Dest,
					currency_id: types::transfer_all::CurrencyId,
					keep_alive: types::transfer_all::KeepAlive,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferAll> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Tokens",
						"transfer_all",
						types::TransferAll { dest, currency_id, keep_alive },
						[
							150u8, 176u8, 20u8, 65u8, 222u8, 26u8, 159u8, 5u8, 137u8, 70u8, 2u8,
							35u8, 16u8, 20u8, 114u8, 87u8, 161u8, 116u8, 115u8, 42u8, 19u8, 86u8,
							2u8, 25u8, 162u8, 69u8, 154u8, 103u8, 181u8, 213u8, 231u8, 231u8,
						],
					)
				}
				#[doc = "Same as the [`transfer`] call, but with a check that the transfer"]
				#[doc = "will not kill the origin account."]
				#[doc = ""]
				#[doc = "99% of the time you want [`transfer`] instead."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the"]
				#[doc = "transactor."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `currency_id`: currency type."]
				#[doc = "- `amount`: free balance amount to tranfer."]
				pub fn transfer_keep_alive(
					&self,
					dest: types::transfer_keep_alive::Dest,
					currency_id: types::transfer_keep_alive::CurrencyId,
					amount: types::transfer_keep_alive::Amount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferKeepAlive>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Tokens",
						"transfer_keep_alive",
						types::TransferKeepAlive { dest, currency_id, amount },
						[
							28u8, 165u8, 96u8, 101u8, 126u8, 53u8, 40u8, 115u8, 42u8, 190u8, 0u8,
							140u8, 249u8, 11u8, 156u8, 31u8, 124u8, 251u8, 210u8, 93u8, 201u8,
							30u8, 162u8, 253u8, 163u8, 244u8, 85u8, 229u8, 209u8, 110u8, 197u8,
							214u8,
						],
					)
				}
				#[doc = "Exactly as `transfer`, except the origin must be root and the source"]
				#[doc = "account may be specified."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Root_."]
				#[doc = ""]
				#[doc = "- `source`: The sender of the transfer."]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `currency_id`: currency type."]
				#[doc = "- `amount`: free balance amount to tranfer."]
				pub fn force_transfer(
					&self,
					source: types::force_transfer::Source,
					dest: types::force_transfer::Dest,
					currency_id: types::force_transfer::CurrencyId,
					amount: types::force_transfer::Amount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceTransfer>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Tokens",
						"force_transfer",
						types::ForceTransfer { source, dest, currency_id, amount },
						[
							238u8, 69u8, 119u8, 98u8, 183u8, 196u8, 3u8, 233u8, 171u8, 236u8,
							163u8, 252u8, 88u8, 184u8, 156u8, 32u8, 15u8, 247u8, 102u8, 156u8,
							24u8, 171u8, 244u8, 75u8, 198u8, 50u8, 180u8, 247u8, 4u8, 104u8, 94u8,
							198u8,
						],
					)
				}
				#[doc = "Set the balances of a given account."]
				#[doc = ""]
				#[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it"]
				#[doc = "will also decrease the total issuance of the system"]
				#[doc = "(`TotalIssuance`). If the new free or reserved balance is below the"]
				#[doc = "existential deposit, it will reap the `AccountInfo`."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call is `root`."]
				pub fn set_balance(
					&self,
					who: types::set_balance::Who,
					currency_id: types::set_balance::CurrencyId,
					new_free: types::set_balance::NewFree,
					new_reserved: types::set_balance::NewReserved,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetBalance> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Tokens",
						"set_balance",
						types::SetBalance { who, currency_id, new_free, new_reserved },
						[
							92u8, 154u8, 179u8, 188u8, 197u8, 93u8, 178u8, 196u8, 87u8, 215u8,
							40u8, 57u8, 102u8, 76u8, 140u8, 242u8, 11u8, 128u8, 32u8, 16u8, 153u8,
							205u8, 201u8, 130u8, 57u8, 218u8, 81u8, 118u8, 164u8, 78u8, 238u8,
							157u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::orml_tokens::module::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An account was created with some free balance."]
			pub struct Endowed {
				pub currency_id: endowed::CurrencyId,
				pub who: endowed::Who,
				pub amount: endowed::Amount,
			}
			pub mod endowed {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Endowed {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Endowed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An account was removed whose balance was non-zero but below"]
			#[doc = "ExistentialDeposit, resulting in an outright loss."]
			pub struct DustLost {
				pub currency_id: dust_lost::CurrencyId,
				pub who: dust_lost::Who,
				pub amount: dust_lost::Amount,
			}
			pub mod dust_lost {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for DustLost {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "DustLost";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Transfer succeeded."]
			pub struct Transfer {
				pub currency_id: transfer::CurrencyId,
				pub from: transfer::From,
				pub to: transfer::To,
				pub amount: transfer::Amount,
			}
			pub mod transfer {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type From = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type To = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Transfer {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Transfer";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was reserved (moved from free to reserved)."]
			pub struct Reserved {
				pub currency_id: reserved::CurrencyId,
				pub who: reserved::Who,
				pub amount: reserved::Amount,
			}
			pub mod reserved {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Reserved {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Reserved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was unreserved (moved from reserved to free)."]
			pub struct Unreserved {
				pub currency_id: unreserved::CurrencyId,
				pub who: unreserved::Who,
				pub amount: unreserved::Amount,
			}
			pub mod unreserved {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Unreserved {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Unreserved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some reserved balance was repatriated (moved from reserved to"]
			#[doc = "another account)."]
			pub struct ReserveRepatriated {
				pub currency_id: reserve_repatriated::CurrencyId,
				pub from: reserve_repatriated::From,
				pub to: reserve_repatriated::To,
				pub amount: reserve_repatriated::Amount,
				pub status: reserve_repatriated::Status,
			}
			pub mod reserve_repatriated {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type From = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type To = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
				pub type Status = runtime_types::frame_support::traits::tokens::misc::BalanceStatus;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ReserveRepatriated {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "ReserveRepatriated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A balance was set by root."]
			pub struct BalanceSet {
				pub currency_id: balance_set::CurrencyId,
				pub who: balance_set::Who,
				pub free: balance_set::Free,
				pub reserved: balance_set::Reserved,
			}
			pub mod balance_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Free = ::core::primitive::u128;
				pub type Reserved = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for BalanceSet {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "BalanceSet";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The total issuance of an currency has been set"]
			pub struct TotalIssuanceSet {
				pub currency_id: total_issuance_set::CurrencyId,
				pub amount: total_issuance_set::Amount,
			}
			pub mod total_issuance_set {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for TotalIssuanceSet {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "TotalIssuanceSet";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balances were withdrawn (e.g. pay for transaction fee)"]
			pub struct Withdrawn {
				pub currency_id: withdrawn::CurrencyId,
				pub who: withdrawn::Who,
				pub amount: withdrawn::Amount,
			}
			pub mod withdrawn {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Withdrawn {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Withdrawn";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balances were slashed (e.g. due to mis-behavior)"]
			pub struct Slashed {
				pub currency_id: slashed::CurrencyId,
				pub who: slashed::Who,
				pub free_amount: slashed::FreeAmount,
				pub reserved_amount: slashed::ReservedAmount,
			}
			pub mod slashed {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type FreeAmount = ::core::primitive::u128;
				pub type ReservedAmount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Slashed {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Slashed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Deposited some balance into an account"]
			pub struct Deposited {
				pub currency_id: deposited::CurrencyId,
				pub who: deposited::Who,
				pub amount: deposited::Amount,
			}
			pub mod deposited {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Deposited {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Deposited";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some funds are locked"]
			pub struct LockSet {
				pub lock_id: lock_set::LockId,
				pub currency_id: lock_set::CurrencyId,
				pub who: lock_set::Who,
				pub amount: lock_set::Amount,
			}
			pub mod lock_set {
				use super::runtime_types;
				pub type LockId = [::core::primitive::u8; 8usize];
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for LockSet {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "LockSet";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some locked funds were unlocked"]
			pub struct LockRemoved {
				pub lock_id: lock_removed::LockId,
				pub currency_id: lock_removed::CurrencyId,
				pub who: lock_removed::Who,
			}
			pub mod lock_removed {
				use super::runtime_types;
				pub type LockId = [::core::primitive::u8; 8usize];
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for LockRemoved {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "LockRemoved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some free balance was locked."]
			pub struct Locked {
				pub currency_id: locked::CurrencyId,
				pub who: locked::Who,
				pub amount: locked::Amount,
			}
			pub mod locked {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Locked {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Locked";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some locked balance was freed."]
			pub struct Unlocked {
				pub currency_id: unlocked::CurrencyId,
				pub who: unlocked::Who,
				pub amount: unlocked::Amount,
			}
			pub mod unlocked {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Unlocked {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Unlocked";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct Issued {
				pub currency_id: issued::CurrencyId,
				pub amount: issued::Amount,
			}
			pub mod issued {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Issued {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Issued";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct Rescinded {
				pub currency_id: rescinded::CurrencyId,
				pub amount: rescinded::Amount,
			}
			pub mod rescinded {
				use super::runtime_types;
				pub type CurrencyId = runtime_types::primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Rescinded {
				const PALLET: &'static str = "Tokens";
				const EVENT: &'static str = "Rescinded";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod total_issuance {
					use super::runtime_types;
					pub type TotalIssuance = ::core::primitive::u128;
					pub type Param0 = runtime_types::primitives::currency::CurrencyId;
				}
				pub mod locks {
					use super::runtime_types;
					pub type Locks = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::orml_tokens::BalanceLock<::core::primitive::u128>,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
					pub type Param1 = runtime_types::primitives::currency::CurrencyId;
				}
				pub mod accounts {
					use super::runtime_types;
					pub type Accounts =
						runtime_types::orml_tokens::AccountData<::core::primitive::u128>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
					pub type Param1 = runtime_types::primitives::currency::CurrencyId;
				}
				pub mod reserves {
					use super::runtime_types;
					pub type Reserves = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::orml_tokens::ReserveData<
							[::core::primitive::u8; 8usize],
							::core::primitive::u128,
						>,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
					pub type Param1 = runtime_types::primitives::currency::CurrencyId;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The total issuance of a token type."]
				pub fn total_issuance_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::total_issuance::TotalIssuance,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Tokens",
						"TotalIssuance",
						(),
						[
							188u8, 142u8, 153u8, 118u8, 124u8, 144u8, 106u8, 2u8, 123u8, 63u8,
							211u8, 111u8, 79u8, 238u8, 10u8, 162u8, 112u8, 19u8, 226u8, 251u8,
							152u8, 53u8, 220u8, 208u8, 9u8, 214u8, 50u8, 30u8, 226u8, 65u8, 142u8,
							173u8,
						],
					)
				}
				#[doc = " The total issuance of a token type."]
				pub fn total_issuance(
					&self,
					_0: impl ::core::borrow::Borrow<types::total_issuance::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::total_issuance::Param0,
					>,
					types::total_issuance::TotalIssuance,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Tokens",
						"TotalIssuance",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							188u8, 142u8, 153u8, 118u8, 124u8, 144u8, 106u8, 2u8, 123u8, 63u8,
							211u8, 111u8, 79u8, 238u8, 10u8, 162u8, 112u8, 19u8, 226u8, 251u8,
							152u8, 53u8, 220u8, 208u8, 9u8, 214u8, 50u8, 30u8, 226u8, 65u8, 142u8,
							173u8,
						],
					)
				}
				#[doc = " Any liquidity locks of a token type under an account."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::locks::Locks,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Tokens",
						"Locks",
						(),
						[
							104u8, 10u8, 162u8, 168u8, 35u8, 44u8, 14u8, 140u8, 188u8, 93u8, 195u8,
							216u8, 65u8, 154u8, 153u8, 86u8, 140u8, 234u8, 235u8, 203u8, 112u8,
							236u8, 152u8, 5u8, 146u8, 233u8, 240u8, 177u8, 25u8, 161u8, 253u8,
							20u8,
						],
					)
				}
				#[doc = " Any liquidity locks of a token type under an account."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::locks::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::locks::Param0,
					>,
					types::locks::Locks,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Tokens",
						"Locks",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							104u8, 10u8, 162u8, 168u8, 35u8, 44u8, 14u8, 140u8, 188u8, 93u8, 195u8,
							216u8, 65u8, 154u8, 153u8, 86u8, 140u8, 234u8, 235u8, 203u8, 112u8,
							236u8, 152u8, 5u8, 146u8, 233u8, 240u8, 177u8, 25u8, 161u8, 253u8,
							20u8,
						],
					)
				}
				#[doc = " Any liquidity locks of a token type under an account."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks(
					&self,
					_0: impl ::core::borrow::Borrow<types::locks::Param0>,
					_1: impl ::core::borrow::Borrow<types::locks::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::locks::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::locks::Param1,
						>,
					),
					types::locks::Locks,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Tokens",
						"Locks",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							104u8, 10u8, 162u8, 168u8, 35u8, 44u8, 14u8, 140u8, 188u8, 93u8, 195u8,
							216u8, 65u8, 154u8, 153u8, 86u8, 140u8, 234u8, 235u8, 203u8, 112u8,
							236u8, 152u8, 5u8, 146u8, 233u8, 240u8, 177u8, 25u8, 161u8, 253u8,
							20u8,
						],
					)
				}
				#[doc = " The balance of a token type under an account."]
				#[doc = ""]
				#[doc = " NOTE: If the total is ever zero, decrease account ref account."]
				#[doc = ""]
				#[doc = " NOTE: This is only used in the case that this module is used to store"]
				#[doc = " balances."]
				pub fn accounts_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::accounts::Accounts,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Tokens",
						"Accounts",
						(),
						[
							130u8, 6u8, 59u8, 156u8, 189u8, 242u8, 152u8, 83u8, 130u8, 192u8,
							134u8, 235u8, 119u8, 180u8, 227u8, 230u8, 121u8, 220u8, 196u8, 105u8,
							7u8, 153u8, 24u8, 199u8, 112u8, 239u8, 206u8, 29u8, 237u8, 255u8, 72u8,
							225u8,
						],
					)
				}
				#[doc = " The balance of a token type under an account."]
				#[doc = ""]
				#[doc = " NOTE: If the total is ever zero, decrease account ref account."]
				#[doc = ""]
				#[doc = " NOTE: This is only used in the case that this module is used to store"]
				#[doc = " balances."]
				pub fn accounts_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::accounts::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::accounts::Param0,
					>,
					types::accounts::Accounts,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Tokens",
						"Accounts",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							130u8, 6u8, 59u8, 156u8, 189u8, 242u8, 152u8, 83u8, 130u8, 192u8,
							134u8, 235u8, 119u8, 180u8, 227u8, 230u8, 121u8, 220u8, 196u8, 105u8,
							7u8, 153u8, 24u8, 199u8, 112u8, 239u8, 206u8, 29u8, 237u8, 255u8, 72u8,
							225u8,
						],
					)
				}
				#[doc = " The balance of a token type under an account."]
				#[doc = ""]
				#[doc = " NOTE: If the total is ever zero, decrease account ref account."]
				#[doc = ""]
				#[doc = " NOTE: This is only used in the case that this module is used to store"]
				#[doc = " balances."]
				pub fn accounts(
					&self,
					_0: impl ::core::borrow::Borrow<types::accounts::Param0>,
					_1: impl ::core::borrow::Borrow<types::accounts::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::accounts::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::accounts::Param1,
						>,
					),
					types::accounts::Accounts,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Tokens",
						"Accounts",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							130u8, 6u8, 59u8, 156u8, 189u8, 242u8, 152u8, 83u8, 130u8, 192u8,
							134u8, 235u8, 119u8, 180u8, 227u8, 230u8, 121u8, 220u8, 196u8, 105u8,
							7u8, 153u8, 24u8, 199u8, 112u8, 239u8, 206u8, 29u8, 237u8, 255u8, 72u8,
							225u8,
						],
					)
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::reserves::Reserves,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Tokens",
						"Reserves",
						(),
						[
							240u8, 151u8, 89u8, 215u8, 145u8, 52u8, 106u8, 217u8, 62u8, 12u8,
							253u8, 94u8, 13u8, 190u8, 62u8, 231u8, 218u8, 254u8, 55u8, 68u8, 197u8,
							112u8, 153u8, 113u8, 22u8, 130u8, 194u8, 207u8, 69u8, 242u8, 70u8,
							20u8,
						],
					)
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::reserves::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::reserves::Param0,
					>,
					types::reserves::Reserves,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Tokens",
						"Reserves",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							240u8, 151u8, 89u8, 215u8, 145u8, 52u8, 106u8, 217u8, 62u8, 12u8,
							253u8, 94u8, 13u8, 190u8, 62u8, 231u8, 218u8, 254u8, 55u8, 68u8, 197u8,
							112u8, 153u8, 113u8, 22u8, 130u8, 194u8, 207u8, 69u8, 242u8, 70u8,
							20u8,
						],
					)
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves(
					&self,
					_0: impl ::core::borrow::Borrow<types::reserves::Param0>,
					_1: impl ::core::borrow::Borrow<types::reserves::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::reserves::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::reserves::Param1,
						>,
					),
					types::reserves::Reserves,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Tokens",
						"Reserves",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							240u8, 151u8, 89u8, 215u8, 145u8, 52u8, 106u8, 217u8, 62u8, 12u8,
							253u8, 94u8, 13u8, 190u8, 62u8, 231u8, 218u8, 254u8, 55u8, 68u8, 197u8,
							112u8, 153u8, 113u8, 22u8, 130u8, 194u8, 207u8, 69u8, 242u8, 70u8,
							20u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				pub fn max_locks(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Tokens",
						"MaxLocks",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of named reserves that can exist on an account."]
				pub fn max_reserves(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Tokens",
						"MaxReserves",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod crowdloan_rewards {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_crowdloan_rewards::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_crowdloan_rewards::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Initialize the pallet at the current timestamp."]
				pub struct Initialize;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Initialize {
					const PALLET: &'static str = "CrowdloanRewards";
					const CALL: &'static str = "initialize";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Initialize the pallet at the given timestamp."]
				pub struct InitializeAt {
					pub at: initialize_at::At,
				}
				pub mod initialize_at {
					use super::runtime_types;
					pub type At = ::core::primitive::u64;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for InitializeAt {
					const PALLET: &'static str = "CrowdloanRewards";
					const CALL: &'static str = "initialize_at";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Populate pallet by adding more rewards."]
				#[doc = ""]
				#[doc = "Each index in the rewards vector should contain: `remote_account`, `reward_account`,"]
				#[doc = "`vesting_period`."]
				#[doc = ""]
				#[doc = "Can be called multiple times. If an remote account"]
				#[doc = "already has a reward, it will be replaced by the new reward value."]
				#[doc = ""]
				#[doc = "Can only be called before `initialize`."]
				pub struct Populate {
					pub rewards: populate::Rewards,
				}
				pub mod populate {
					use super::runtime_types;
					pub type Rewards = ::subxt::ext::subxt_core::alloc::vec::Vec<(
						runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
							[::core::primitive::u8; 32usize],
						>,
						::core::primitive::u128,
						::core::primitive::u64,
					)>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Populate {
					const PALLET: &'static str = "CrowdloanRewards";
					const CALL: &'static str = "populate";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Associate a reward account. A valid proof has to be provided."]
				#[doc = "This call also claim the first reward (a.k.a. the first payment, which is a % of the"]
				#[doc = "vested reward)."]
				#[doc = "If logic gate pass, no fees are applied."]
				#[doc = ""]
				#[doc = "The proof should be:"]
				#[doc = "```haskell"]
				#[doc = "proof = sign (concat prefix (hex reward_account))"]
				#[doc = "```"]
				pub struct Associate {
					pub reward_account: associate::RewardAccount,
					pub proof: associate::Proof,
				}
				pub mod associate {
					use super::runtime_types;
					pub type RewardAccount = ::subxt::ext::subxt_core::utils::AccountId32;
					pub type Proof = runtime_types::pallet_crowdloan_rewards::models::Proof<
						[::core::primitive::u8; 32usize],
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Associate {
					const PALLET: &'static str = "CrowdloanRewards";
					const CALL: &'static str = "associate";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Claim a reward from the associated reward account."]
				#[doc = "A previous call to `associate` should have been made."]
				#[doc = "If logic gate pass, no fees are applied."]
				pub struct Claim;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Claim {
					const PALLET: &'static str = "CrowdloanRewards";
					const CALL: &'static str = "claim";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct UnlockRewardsFor {
					pub reward_accounts: unlock_rewards_for::RewardAccounts,
				}
				pub mod unlock_rewards_for {
					use super::runtime_types;
					pub type RewardAccounts = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UnlockRewardsFor {
					const PALLET: &'static str = "CrowdloanRewards";
					const CALL: &'static str = "unlock_rewards_for";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Adds all accounts in the `additions` vector. Add may be called even if the pallet has"]
				#[doc = "been initialized."]
				pub struct Add {
					pub additions: add::Additions,
				}
				pub mod add {
					use super::runtime_types;
					pub type Additions = ::subxt::ext::subxt_core::alloc::vec::Vec<(
						runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
							[::core::primitive::u8; 32usize],
						>,
						::core::primitive::u128,
						::core::primitive::u64,
					)>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Add {
					const PALLET: &'static str = "CrowdloanRewards";
					const CALL: &'static str = "add";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Initialize the pallet at the current timestamp."]
				pub fn initialize(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Initialize> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CrowdloanRewards",
						"initialize",
						types::Initialize {},
						[
							189u8, 34u8, 252u8, 48u8, 174u8, 108u8, 147u8, 165u8, 11u8, 115u8,
							31u8, 224u8, 186u8, 218u8, 34u8, 98u8, 5u8, 143u8, 91u8, 54u8, 142u8,
							160u8, 71u8, 28u8, 159u8, 241u8, 16u8, 134u8, 205u8, 98u8, 63u8, 131u8,
						],
					)
				}
				#[doc = "Initialize the pallet at the given timestamp."]
				pub fn initialize_at(
					&self,
					at: types::initialize_at::At,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::InitializeAt> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CrowdloanRewards",
						"initialize_at",
						types::InitializeAt { at },
						[
							158u8, 95u8, 219u8, 224u8, 226u8, 63u8, 74u8, 161u8, 129u8, 81u8, 85u8,
							168u8, 117u8, 204u8, 137u8, 91u8, 117u8, 198u8, 81u8, 128u8, 98u8,
							161u8, 16u8, 181u8, 82u8, 230u8, 180u8, 101u8, 110u8, 78u8, 30u8, 65u8,
						],
					)
				}
				#[doc = "Populate pallet by adding more rewards."]
				#[doc = ""]
				#[doc = "Each index in the rewards vector should contain: `remote_account`, `reward_account`,"]
				#[doc = "`vesting_period`."]
				#[doc = ""]
				#[doc = "Can be called multiple times. If an remote account"]
				#[doc = "already has a reward, it will be replaced by the new reward value."]
				#[doc = ""]
				#[doc = "Can only be called before `initialize`."]
				pub fn populate(
					&self,
					rewards: types::populate::Rewards,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Populate> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CrowdloanRewards",
						"populate",
						types::Populate { rewards },
						[
							39u8, 45u8, 133u8, 106u8, 88u8, 25u8, 109u8, 135u8, 161u8, 115u8,
							237u8, 94u8, 55u8, 175u8, 66u8, 184u8, 180u8, 77u8, 136u8, 136u8,
							222u8, 72u8, 216u8, 34u8, 224u8, 163u8, 146u8, 68u8, 98u8, 164u8,
							230u8, 86u8,
						],
					)
				}
				#[doc = "Associate a reward account. A valid proof has to be provided."]
				#[doc = "This call also claim the first reward (a.k.a. the first payment, which is a % of the"]
				#[doc = "vested reward)."]
				#[doc = "If logic gate pass, no fees are applied."]
				#[doc = ""]
				#[doc = "The proof should be:"]
				#[doc = "```haskell"]
				#[doc = "proof = sign (concat prefix (hex reward_account))"]
				#[doc = "```"]
				pub fn associate(
					&self,
					reward_account: types::associate::RewardAccount,
					proof: types::associate::Proof,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Associate> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CrowdloanRewards",
						"associate",
						types::Associate { reward_account, proof },
						[
							213u8, 212u8, 82u8, 216u8, 200u8, 238u8, 98u8, 20u8, 246u8, 24u8,
							131u8, 18u8, 89u8, 74u8, 153u8, 21u8, 249u8, 211u8, 93u8, 159u8, 200u8,
							108u8, 47u8, 21u8, 160u8, 158u8, 185u8, 165u8, 78u8, 207u8, 185u8,
							182u8,
						],
					)
				}
				#[doc = "Claim a reward from the associated reward account."]
				#[doc = "A previous call to `associate` should have been made."]
				#[doc = "If logic gate pass, no fees are applied."]
				pub fn claim(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Claim> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CrowdloanRewards",
						"claim",
						types::Claim {},
						[
							190u8, 235u8, 250u8, 234u8, 67u8, 158u8, 3u8, 42u8, 214u8, 76u8, 33u8,
							240u8, 24u8, 129u8, 206u8, 143u8, 161u8, 126u8, 135u8, 66u8, 242u8,
							137u8, 95u8, 1u8, 242u8, 86u8, 156u8, 142u8, 121u8, 110u8, 178u8, 0u8,
						],
					)
				}
				pub fn unlock_rewards_for(
					&self,
					reward_accounts: types::unlock_rewards_for::RewardAccounts,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UnlockRewardsFor>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CrowdloanRewards",
						"unlock_rewards_for",
						types::UnlockRewardsFor { reward_accounts },
						[
							97u8, 124u8, 229u8, 162u8, 82u8, 230u8, 144u8, 8u8, 83u8, 168u8, 219u8,
							151u8, 134u8, 43u8, 247u8, 244u8, 46u8, 129u8, 103u8, 51u8, 56u8,
							158u8, 181u8, 129u8, 29u8, 52u8, 16u8, 239u8, 48u8, 67u8, 75u8, 55u8,
						],
					)
				}
				#[doc = "Adds all accounts in the `additions` vector. Add may be called even if the pallet has"]
				#[doc = "been initialized."]
				pub fn add(
					&self,
					additions: types::add::Additions,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Add> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CrowdloanRewards",
						"add",
						types::Add { additions },
						[
							26u8, 66u8, 214u8, 110u8, 24u8, 102u8, 30u8, 135u8, 16u8, 41u8, 51u8,
							245u8, 236u8, 134u8, 30u8, 134u8, 172u8, 215u8, 58u8, 166u8, 72u8,
							88u8, 4u8, 89u8, 157u8, 97u8, 176u8, 55u8, 72u8, 54u8, 47u8, 56u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_crowdloan_rewards::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The crowdloan has been initialized or set to initialize at some time."]
			pub struct Initialized {
				pub at: initialized::At,
			}
			pub mod initialized {
				use super::runtime_types;
				pub type At = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Initialized {
				const PALLET: &'static str = "CrowdloanRewards";
				const EVENT: &'static str = "Initialized";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A claim has been made."]
			pub struct Claimed {
				pub remote_account: claimed::RemoteAccount,
				pub reward_account: claimed::RewardAccount,
				pub amount: claimed::Amount,
			}
			pub mod claimed {
				use super::runtime_types;
				pub type RemoteAccount =
					runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
						[::core::primitive::u8; 32usize],
					>;
				pub type RewardAccount = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Claimed {
				const PALLET: &'static str = "CrowdloanRewards";
				const EVENT: &'static str = "Claimed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A remote account has been associated with a reward account."]
			pub struct Associated {
				pub remote_account: associated::RemoteAccount,
				pub reward_account: associated::RewardAccount,
			}
			pub mod associated {
				use super::runtime_types;
				pub type RemoteAccount =
					runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
						[::core::primitive::u8; 32usize],
					>;
				pub type RewardAccount = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Associated {
				const PALLET: &'static str = "CrowdloanRewards";
				const EVENT: &'static str = "Associated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The crowdloan was successfully initialized, but with excess funds that won't be"]
			#[doc = "claimed."]
			pub struct OverFunded {
				pub excess_funds: over_funded::ExcessFunds,
			}
			pub mod over_funded {
				use super::runtime_types;
				pub type ExcessFunds = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for OverFunded {
				const PALLET: &'static str = "CrowdloanRewards";
				const EVENT: &'static str = "OverFunded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A portion of rewards have been unlocked and future claims will not have locks"]
			pub struct RewardsUnlocked {
				pub at: rewards_unlocked::At,
			}
			pub mod rewards_unlocked {
				use super::runtime_types;
				pub type At = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for RewardsUnlocked {
				const PALLET: &'static str = "CrowdloanRewards";
				const EVENT: &'static str = "RewardsUnlocked";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Called after rewards have been added through the `add` extrinsic."]
			pub struct RewardsAdded {
				pub additions: rewards_added::Additions,
			}
			pub mod rewards_added {
				use super::runtime_types;
				pub type Additions = ::subxt::ext::subxt_core::alloc::vec::Vec<(
					runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
						[::core::primitive::u8; 32usize],
					>,
					::core::primitive::u128,
					::core::primitive::u64,
				)>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for RewardsAdded {
				const PALLET: &'static str = "CrowdloanRewards";
				const EVENT: &'static str = "RewardsAdded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Called after rewards have been deleted through the `delete` extrinsic."]
			pub struct RewardsDeleted {
				pub deletions: rewards_deleted::Deletions,
			}
			pub mod rewards_deleted {
				use super::runtime_types;
				pub type Deletions = ::subxt::ext::subxt_core::alloc::vec::Vec<
					runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
						[::core::primitive::u8; 32usize],
					>,
				>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for RewardsDeleted {
				const PALLET: &'static str = "CrowdloanRewards";
				const EVENT: &'static str = "RewardsDeleted";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod rewards {
					use super::runtime_types;
					pub type Rewards = runtime_types::pallet_crowdloan_rewards::models::Reward<
						::core::primitive::u128,
						::core::primitive::u64,
					>;
					pub type Param0 =
						runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
							[::core::primitive::u8; 32usize],
						>;
				}
				pub mod total_rewards {
					use super::runtime_types;
					pub type TotalRewards = ::core::primitive::u128;
				}
				pub mod claimed_rewards {
					use super::runtime_types;
					pub type ClaimedRewards = ::core::primitive::u128;
				}
				pub mod total_contributors {
					use super::runtime_types;
					pub type TotalContributors = ::core::primitive::u32;
				}
				pub mod vesting_time_start {
					use super::runtime_types;
					pub type VestingTimeStart = ::core::primitive::u64;
				}
				pub mod associations {
					use super::runtime_types;
					pub type Associations =
						runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
							[::core::primitive::u8; 32usize],
						>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod remove_reward_locks {
					use super::runtime_types;
					pub type RemoveRewardLocks = ();
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn rewards_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::rewards::Rewards,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"Rewards",
						(),
						[
							109u8, 15u8, 238u8, 156u8, 26u8, 202u8, 149u8, 190u8, 73u8, 101u8,
							27u8, 77u8, 147u8, 138u8, 195u8, 225u8, 231u8, 138u8, 183u8, 24u8,
							19u8, 58u8, 49u8, 111u8, 97u8, 76u8, 0u8, 84u8, 183u8, 116u8, 42u8,
							228u8,
						],
					)
				}
				pub fn rewards(
					&self,
					_0: impl ::core::borrow::Borrow<types::rewards::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::rewards::Param0,
					>,
					types::rewards::Rewards,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"Rewards",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							109u8, 15u8, 238u8, 156u8, 26u8, 202u8, 149u8, 190u8, 73u8, 101u8,
							27u8, 77u8, 147u8, 138u8, 195u8, 225u8, 231u8, 138u8, 183u8, 24u8,
							19u8, 58u8, 49u8, 111u8, 97u8, 76u8, 0u8, 84u8, 183u8, 116u8, 42u8,
							228u8,
						],
					)
				}
				#[doc = " The total amount of rewards to be claimed."]
				pub fn total_rewards(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::total_rewards::TotalRewards,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"TotalRewards",
						(),
						[
							8u8, 98u8, 70u8, 113u8, 254u8, 107u8, 181u8, 27u8, 5u8, 142u8, 36u8,
							95u8, 3u8, 24u8, 58u8, 61u8, 45u8, 125u8, 69u8, 68u8, 230u8, 95u8,
							41u8, 131u8, 50u8, 242u8, 200u8, 58u8, 13u8, 189u8, 139u8, 137u8,
						],
					)
				}
				#[doc = " The rewards claimed so far."]
				pub fn claimed_rewards(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::claimed_rewards::ClaimedRewards,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"ClaimedRewards",
						(),
						[
							219u8, 227u8, 173u8, 110u8, 4u8, 133u8, 223u8, 85u8, 47u8, 199u8, 29u8,
							248u8, 226u8, 116u8, 82u8, 160u8, 22u8, 21u8, 137u8, 144u8, 255u8,
							131u8, 53u8, 84u8, 121u8, 115u8, 47u8, 91u8, 178u8, 195u8, 183u8, 6u8,
						],
					)
				}
				#[doc = " The total number of contributors."]
				pub fn total_contributors(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::total_contributors::TotalContributors,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"TotalContributors",
						(),
						[
							182u8, 128u8, 61u8, 169u8, 43u8, 194u8, 117u8, 112u8, 214u8, 202u8,
							73u8, 1u8, 2u8, 194u8, 212u8, 5u8, 70u8, 45u8, 50u8, 62u8, 97u8, 205u8,
							199u8, 200u8, 103u8, 181u8, 205u8, 6u8, 217u8, 109u8, 47u8, 227u8,
						],
					)
				}
				#[doc = " The timestamp at which the users are able to claim their rewards."]
				pub fn vesting_time_start(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::vesting_time_start::VestingTimeStart,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"VestingTimeStart",
						(),
						[
							144u8, 64u8, 171u8, 124u8, 170u8, 28u8, 168u8, 148u8, 246u8, 71u8,
							79u8, 213u8, 61u8, 85u8, 137u8, 236u8, 87u8, 141u8, 127u8, 96u8, 54u8,
							117u8, 179u8, 103u8, 253u8, 242u8, 253u8, 47u8, 91u8, 149u8, 212u8,
							12u8,
						],
					)
				}
				#[doc = " Associations of reward accounts to remote accounts."]
				pub fn associations_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::associations::Associations,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"Associations",
						(),
						[
							49u8, 177u8, 125u8, 4u8, 187u8, 110u8, 155u8, 254u8, 198u8, 114u8,
							93u8, 203u8, 4u8, 12u8, 153u8, 133u8, 19u8, 149u8, 179u8, 88u8, 71u8,
							61u8, 79u8, 245u8, 47u8, 220u8, 57u8, 41u8, 150u8, 228u8, 69u8, 24u8,
						],
					)
				}
				#[doc = " Associations of reward accounts to remote accounts."]
				pub fn associations(
					&self,
					_0: impl ::core::borrow::Borrow<types::associations::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::associations::Param0,
					>,
					types::associations::Associations,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"Associations",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							49u8, 177u8, 125u8, 4u8, 187u8, 110u8, 155u8, 254u8, 198u8, 114u8,
							93u8, 203u8, 4u8, 12u8, 153u8, 133u8, 19u8, 149u8, 179u8, 88u8, 71u8,
							61u8, 79u8, 245u8, 47u8, 220u8, 57u8, 41u8, 150u8, 228u8, 69u8, 24u8,
						],
					)
				}
				#[doc = " If set, new locks will not be added to claims"]
				pub fn remove_reward_locks(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::remove_reward_locks::RemoveRewardLocks,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"RemoveRewardLocks",
						(),
						[
							112u8, 97u8, 1u8, 2u8, 35u8, 35u8, 201u8, 82u8, 166u8, 23u8, 48u8,
							28u8, 204u8, 220u8, 47u8, 51u8, 128u8, 248u8, 50u8, 215u8, 46u8, 131u8,
							6u8, 132u8, 154u8, 174u8, 65u8, 84u8, 131u8, 55u8, 147u8, 189u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The upfront liquidity unlocked at first claim."]
				pub fn initial_payment(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::sp_arithmetic::per_things::Perbill,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"InitialPayment",
						[
							65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
							114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
							200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
						],
					)
				}
				#[doc = " The percentage of excess funds required to trigger the `OverFunded` event."]
				pub fn over_funded_threshold(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::sp_arithmetic::per_things::Perbill,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"OverFundedThreshold",
						[
							65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
							114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
							200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
						],
					)
				}
				#[doc = " The time you have to wait to unlock another part of your reward."]
				pub fn vesting_step(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u64,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"VestingStep",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
				#[doc = " The arbitrary prefix used for the proof."]
				pub fn prefix(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"Prefix",
						[
							64u8, 190u8, 244u8, 122u8, 87u8, 182u8, 217u8, 16u8, 55u8, 223u8,
							128u8, 6u8, 112u8, 30u8, 236u8, 222u8, 153u8, 53u8, 247u8, 102u8,
							196u8, 31u8, 6u8, 186u8, 251u8, 209u8, 114u8, 125u8, 213u8, 222u8,
							240u8, 8u8,
						],
					)
				}
				#[doc = " The unique identifier of this pallet."]
				pub fn pallet_id(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::frame_support::PalletId,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"PalletId",
						[
							56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
							161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
							129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
						],
					)
				}
				#[doc = " The unique identifier for locks maintained by this pallet."]
				pub fn lock_id(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					[::core::primitive::u8; 8usize],
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"LockId",
						[
							157u8, 118u8, 79u8, 88u8, 241u8, 22u8, 185u8, 37u8, 42u8, 20u8, 133u8,
							240u8, 11u8, 25u8, 66u8, 154u8, 84u8, 163u8, 78u8, 92u8, 171u8, 82u8,
							248u8, 76u8, 189u8, 70u8, 142u8, 249u8, 153u8, 84u8, 180u8, 60u8,
						],
					)
				}
				#[doc = " If claimed amounts should be locked by the pallet"]
				pub fn lock_by_default(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::bool,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"LockByDefault",
						[
							165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
							252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
							100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
						],
					)
				}
				#[doc = " The AccountId of this pallet."]
				pub fn account_id(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::subxt::ext::subxt_core::utils::AccountId32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"CrowdloanRewards",
						"account_id",
						[
							115u8, 233u8, 13u8, 223u8, 88u8, 20u8, 202u8, 139u8, 153u8, 28u8,
							155u8, 157u8, 224u8, 66u8, 3u8, 250u8, 23u8, 53u8, 88u8, 168u8, 211u8,
							204u8, 122u8, 166u8, 248u8, 23u8, 174u8, 225u8, 99u8, 108u8, 89u8,
							135u8,
						],
					)
				}
			}
		}
	}
	pub mod assets {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_assets::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_assets::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer `amount` of `asset` from `origin` to `dest`."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
				#[doc = "   cannot be respected."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub struct Transfer {
					pub asset: transfer::Asset,
					pub dest: transfer::Dest,
					#[codec(compact)]
					pub amount: transfer::Amount,
					pub keep_alive: transfer::KeepAlive,
				}
				pub mod transfer {
					use super::runtime_types;
					pub type Asset = runtime_types::primitives::currency::CurrencyId;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Amount = ::core::primitive::u128;
					pub type KeepAlive = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Transfer {
					const PALLET: &'static str = "Assets";
					const CALL: &'static str = "transfer";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer `amount` of the native asset from `origin` to `dest`. This is slightly"]
				#[doc = "cheaper to call, as it avoids an asset lookup."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
				#[doc = "   cannot be respected."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub struct TransferNative {
					pub dest: transfer_native::Dest,
					#[codec(compact)]
					pub value: transfer_native::Value,
					pub keep_alive: transfer_native::KeepAlive,
				}
				pub mod transfer_native {
					use super::runtime_types;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Value = ::core::primitive::u128;
					pub type KeepAlive = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferNative {
					const PALLET: &'static str = "Assets";
					const CALL: &'static str = "transfer_native";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer `amount` of the `asset` from `origin` to `dest`. This requires root."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not root."]
				#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
				#[doc = "   cannot be respected."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub struct ForceTransfer {
					pub asset: force_transfer::Asset,
					pub source: force_transfer::Source,
					pub dest: force_transfer::Dest,
					#[codec(compact)]
					pub value: force_transfer::Value,
					pub keep_alive: force_transfer::KeepAlive,
				}
				pub mod force_transfer {
					use super::runtime_types;
					pub type Asset = runtime_types::primitives::currency::CurrencyId;
					pub type Source = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Value = ::core::primitive::u128;
					pub type KeepAlive = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceTransfer {
					const PALLET: &'static str = "Assets";
					const CALL: &'static str = "force_transfer";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer `amount` of the the native asset from `origin` to `dest`. This requires root."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not root."]
				#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
				#[doc = "   cannot be respected."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub struct ForceTransferNative {
					pub source: force_transfer_native::Source,
					pub dest: force_transfer_native::Dest,
					#[codec(compact)]
					pub value: force_transfer_native::Value,
					pub keep_alive: force_transfer_native::KeepAlive,
				}
				pub mod force_transfer_native {
					use super::runtime_types;
					pub type Source = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Value = ::core::primitive::u128;
					pub type KeepAlive = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceTransferNative {
					const PALLET: &'static str = "Assets";
					const CALL: &'static str = "force_transfer_native";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer all free balance of the `asset` from `origin` to `dest`."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub struct TransferAll {
					pub asset: transfer_all::Asset,
					pub dest: transfer_all::Dest,
					pub keep_alive: transfer_all::KeepAlive,
				}
				pub mod transfer_all {
					use super::runtime_types;
					pub type Asset = runtime_types::primitives::currency::CurrencyId;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type KeepAlive = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferAll {
					const PALLET: &'static str = "Assets";
					const CALL: &'static str = "transfer_all";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer all free balance of the native asset from `origin` to `dest`."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub struct TransferAllNative {
					pub dest: transfer_all_native::Dest,
					pub keep_alive: transfer_all_native::KeepAlive,
				}
				pub mod transfer_all_native {
					use super::runtime_types;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type KeepAlive = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferAllNative {
					const PALLET: &'static str = "Assets";
					const CALL: &'static str = "transfer_all_native";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Creates a new asset, minting `amount` of funds into the `dest` account. Intended to be"]
				#[doc = "used for creating wrapped assets, not associated with any project."]
				pub struct MintInitialize {
					#[codec(compact)]
					pub amount: mint_initialize::Amount,
					pub dest: mint_initialize::Dest,
				}
				pub mod mint_initialize {
					use super::runtime_types;
					pub type Amount = ::core::primitive::u128;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for MintInitialize {
					const PALLET: &'static str = "Assets";
					const CALL: &'static str = "mint_initialize";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Creates a new asset, minting `amount` of funds into the `dest` account. The `dest`"]
				#[doc = "account can use the democracy pallet to mint further assets, or if the governance_origin"]
				#[doc = "is set to an owned account, using signed transactions. In general the"]
				#[doc = "`governance_origin` should be generated from the pallet id."]
				pub struct MintInitializeWithGovernance {
					#[codec(compact)]
					pub amount: mint_initialize_with_governance::Amount,
					pub governance_origin: mint_initialize_with_governance::GovernanceOrigin,
					pub dest: mint_initialize_with_governance::Dest,
				}
				pub mod mint_initialize_with_governance {
					use super::runtime_types;
					pub type Amount = ::core::primitive::u128;
					pub type GovernanceOrigin = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for MintInitializeWithGovernance {
					const PALLET: &'static str = "Assets";
					const CALL: &'static str = "mint_initialize_with_governance";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Mints `amount` of `asset_id` into the `dest` account."]
				pub struct MintInto {
					pub asset_id: mint_into::AssetId,
					pub dest: mint_into::Dest,
					#[codec(compact)]
					pub amount: mint_into::Amount,
				}
				pub mod mint_into {
					use super::runtime_types;
					pub type AssetId = runtime_types::primitives::currency::CurrencyId;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for MintInto {
					const PALLET: &'static str = "Assets";
					const CALL: &'static str = "mint_into";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Burns `amount` of `asset_id` into the `dest` account."]
				pub struct BurnFrom {
					pub asset_id: burn_from::AssetId,
					pub dest: burn_from::Dest,
					#[codec(compact)]
					pub amount: burn_from::Amount,
				}
				pub mod burn_from {
					use super::runtime_types;
					pub type AssetId = runtime_types::primitives::currency::CurrencyId;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for BurnFrom {
					const PALLET: &'static str = "Assets";
					const CALL: &'static str = "burn_from";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer all free balance of the `asset` from `source` to `dest`."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub struct ForceTransferAll {
					pub asset: force_transfer_all::Asset,
					pub source: force_transfer_all::Source,
					pub dest: force_transfer_all::Dest,
					pub keep_alive: force_transfer_all::KeepAlive,
				}
				pub mod force_transfer_all {
					use super::runtime_types;
					pub type Asset = runtime_types::primitives::currency::CurrencyId;
					pub type Source = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type KeepAlive = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceTransferAll {
					const PALLET: &'static str = "Assets";
					const CALL: &'static str = "force_transfer_all";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer all free balance of the native asset from `source` to `dest`."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub struct ForceTransferAllNative {
					pub source: force_transfer_all_native::Source,
					pub dest: force_transfer_all_native::Dest,
					pub keep_alive: force_transfer_all_native::KeepAlive,
				}
				pub mod force_transfer_all_native {
					use super::runtime_types;
					pub type Source = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type KeepAlive = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceTransferAllNative {
					const PALLET: &'static str = "Assets";
					const CALL: &'static str = "force_transfer_all_native";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Transfer `amount` of `asset` from `origin` to `dest`."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
				#[doc = "   cannot be respected."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub fn transfer(
					&self,
					asset: types::transfer::Asset,
					dest: types::transfer::Dest,
					amount: types::transfer::Amount,
					keep_alive: types::transfer::KeepAlive,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Transfer> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Assets",
						"transfer",
						types::Transfer { asset, dest, amount, keep_alive },
						[
							181u8, 233u8, 187u8, 219u8, 151u8, 85u8, 111u8, 6u8, 150u8, 57u8, 38u8,
							252u8, 118u8, 200u8, 188u8, 8u8, 158u8, 192u8, 95u8, 57u8, 116u8, 66u8,
							61u8, 56u8, 140u8, 249u8, 45u8, 80u8, 184u8, 166u8, 175u8, 75u8,
						],
					)
				}
				#[doc = "Transfer `amount` of the native asset from `origin` to `dest`. This is slightly"]
				#[doc = "cheaper to call, as it avoids an asset lookup."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
				#[doc = "   cannot be respected."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub fn transfer_native(
					&self,
					dest: types::transfer_native::Dest,
					value: types::transfer_native::Value,
					keep_alive: types::transfer_native::KeepAlive,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferNative>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Assets",
						"transfer_native",
						types::TransferNative { dest, value, keep_alive },
						[
							120u8, 76u8, 203u8, 2u8, 1u8, 103u8, 115u8, 64u8, 129u8, 190u8, 134u8,
							120u8, 190u8, 160u8, 162u8, 186u8, 147u8, 107u8, 121u8, 132u8, 80u8,
							105u8, 128u8, 183u8, 131u8, 7u8, 204u8, 211u8, 109u8, 176u8, 73u8,
							132u8,
						],
					)
				}
				#[doc = "Transfer `amount` of the `asset` from `origin` to `dest`. This requires root."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not root."]
				#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
				#[doc = "   cannot be respected."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub fn force_transfer(
					&self,
					asset: types::force_transfer::Asset,
					source: types::force_transfer::Source,
					dest: types::force_transfer::Dest,
					value: types::force_transfer::Value,
					keep_alive: types::force_transfer::KeepAlive,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceTransfer>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Assets",
						"force_transfer",
						types::ForceTransfer { asset, source, dest, value, keep_alive },
						[
							235u8, 48u8, 185u8, 110u8, 175u8, 83u8, 188u8, 248u8, 244u8, 233u8,
							188u8, 210u8, 210u8, 249u8, 60u8, 192u8, 49u8, 109u8, 245u8, 106u8,
							51u8, 6u8, 127u8, 113u8, 224u8, 224u8, 138u8, 129u8, 74u8, 204u8,
							186u8, 137u8,
						],
					)
				}
				#[doc = "Transfer `amount` of the the native asset from `origin` to `dest`. This requires root."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not root."]
				#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
				#[doc = "   cannot be respected."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub fn force_transfer_native(
					&self,
					source: types::force_transfer_native::Source,
					dest: types::force_transfer_native::Dest,
					value: types::force_transfer_native::Value,
					keep_alive: types::force_transfer_native::KeepAlive,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceTransferNative>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Assets",
						"force_transfer_native",
						types::ForceTransferNative { source, dest, value, keep_alive },
						[
							102u8, 42u8, 164u8, 2u8, 116u8, 249u8, 140u8, 151u8, 237u8, 145u8,
							78u8, 96u8, 208u8, 66u8, 228u8, 243u8, 64u8, 90u8, 35u8, 54u8, 144u8,
							230u8, 2u8, 71u8, 22u8, 216u8, 197u8, 1u8, 50u8, 228u8, 52u8, 21u8,
						],
					)
				}
				#[doc = "Transfer all free balance of the `asset` from `origin` to `dest`."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub fn transfer_all(
					&self,
					asset: types::transfer_all::Asset,
					dest: types::transfer_all::Dest,
					keep_alive: types::transfer_all::KeepAlive,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferAll> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Assets",
						"transfer_all",
						types::TransferAll { asset, dest, keep_alive },
						[
							138u8, 73u8, 135u8, 11u8, 146u8, 69u8, 73u8, 148u8, 153u8, 218u8,
							184u8, 228u8, 138u8, 195u8, 154u8, 16u8, 181u8, 80u8, 133u8, 38u8,
							27u8, 47u8, 35u8, 40u8, 49u8, 89u8, 239u8, 179u8, 244u8, 7u8, 169u8,
							7u8,
						],
					)
				}
				#[doc = "Transfer all free balance of the native asset from `origin` to `dest`."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub fn transfer_all_native(
					&self,
					dest: types::transfer_all_native::Dest,
					keep_alive: types::transfer_all_native::KeepAlive,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferAllNative>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Assets",
						"transfer_all_native",
						types::TransferAllNative { dest, keep_alive },
						[
							41u8, 133u8, 254u8, 200u8, 107u8, 184u8, 50u8, 154u8, 214u8, 251u8,
							82u8, 153u8, 123u8, 67u8, 197u8, 87u8, 95u8, 221u8, 245u8, 54u8, 255u8,
							143u8, 63u8, 6u8, 219u8, 246u8, 181u8, 238u8, 54u8, 74u8, 245u8, 225u8,
						],
					)
				}
				#[doc = "Creates a new asset, minting `amount` of funds into the `dest` account. Intended to be"]
				#[doc = "used for creating wrapped assets, not associated with any project."]
				pub fn mint_initialize(
					&self,
					amount: types::mint_initialize::Amount,
					dest: types::mint_initialize::Dest,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::MintInitialize>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Assets",
						"mint_initialize",
						types::MintInitialize { amount, dest },
						[
							32u8, 64u8, 150u8, 138u8, 91u8, 171u8, 11u8, 203u8, 196u8, 248u8, 94u8,
							74u8, 196u8, 162u8, 255u8, 110u8, 118u8, 107u8, 65u8, 9u8, 137u8,
							178u8, 187u8, 6u8, 169u8, 62u8, 207u8, 187u8, 97u8, 21u8, 154u8, 49u8,
						],
					)
				}
				#[doc = "Creates a new asset, minting `amount` of funds into the `dest` account. The `dest`"]
				#[doc = "account can use the democracy pallet to mint further assets, or if the governance_origin"]
				#[doc = "is set to an owned account, using signed transactions. In general the"]
				#[doc = "`governance_origin` should be generated from the pallet id."]
				pub fn mint_initialize_with_governance(
					&self,
					amount: types::mint_initialize_with_governance::Amount,
					governance_origin: types::mint_initialize_with_governance::GovernanceOrigin,
					dest: types::mint_initialize_with_governance::Dest,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::MintInitializeWithGovernance,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Assets",
						"mint_initialize_with_governance",
						types::MintInitializeWithGovernance { amount, governance_origin, dest },
						[
							103u8, 7u8, 9u8, 177u8, 11u8, 88u8, 22u8, 50u8, 93u8, 16u8, 110u8,
							119u8, 116u8, 197u8, 80u8, 135u8, 2u8, 54u8, 216u8, 164u8, 119u8, 5u8,
							86u8, 42u8, 169u8, 155u8, 8u8, 130u8, 41u8, 164u8, 229u8, 218u8,
						],
					)
				}
				#[doc = "Mints `amount` of `asset_id` into the `dest` account."]
				pub fn mint_into(
					&self,
					asset_id: types::mint_into::AssetId,
					dest: types::mint_into::Dest,
					amount: types::mint_into::Amount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::MintInto> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Assets",
						"mint_into",
						types::MintInto { asset_id, dest, amount },
						[
							144u8, 240u8, 123u8, 176u8, 222u8, 161u8, 199u8, 64u8, 76u8, 242u8,
							19u8, 63u8, 15u8, 29u8, 74u8, 121u8, 92u8, 20u8, 207u8, 83u8, 218u8,
							68u8, 163u8, 184u8, 168u8, 98u8, 42u8, 127u8, 84u8, 125u8, 7u8, 190u8,
						],
					)
				}
				#[doc = "Burns `amount` of `asset_id` into the `dest` account."]
				pub fn burn_from(
					&self,
					asset_id: types::burn_from::AssetId,
					dest: types::burn_from::Dest,
					amount: types::burn_from::Amount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::BurnFrom> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Assets",
						"burn_from",
						types::BurnFrom { asset_id, dest, amount },
						[
							179u8, 97u8, 212u8, 17u8, 253u8, 8u8, 39u8, 2u8, 174u8, 19u8, 204u8,
							13u8, 4u8, 87u8, 190u8, 224u8, 255u8, 28u8, 144u8, 91u8, 54u8, 44u8,
							79u8, 39u8, 35u8, 173u8, 121u8, 144u8, 223u8, 154u8, 97u8, 53u8,
						],
					)
				}
				#[doc = "Transfer all free balance of the `asset` from `source` to `dest`."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub fn force_transfer_all(
					&self,
					asset: types::force_transfer_all::Asset,
					source: types::force_transfer_all::Source,
					dest: types::force_transfer_all::Dest,
					keep_alive: types::force_transfer_all::KeepAlive,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceTransferAll>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Assets",
						"force_transfer_all",
						types::ForceTransferAll { asset, source, dest, keep_alive },
						[
							4u8, 255u8, 87u8, 103u8, 219u8, 227u8, 243u8, 212u8, 251u8, 59u8, 8u8,
							36u8, 29u8, 69u8, 171u8, 11u8, 57u8, 120u8, 145u8, 209u8, 122u8, 100u8,
							182u8, 104u8, 252u8, 66u8, 30u8, 242u8, 33u8, 150u8, 53u8, 232u8,
						],
					)
				}
				#[doc = "Transfer all free balance of the native asset from `source` to `dest`."]
				#[doc = ""]
				#[doc = "# Errors"]
				#[doc = " - When `origin` is not signed."]
				#[doc = " - If the `dest` cannot be looked up."]
				pub fn force_transfer_all_native(
					&self,
					source: types::force_transfer_all_native::Source,
					dest: types::force_transfer_all_native::Dest,
					keep_alive: types::force_transfer_all_native::KeepAlive,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::ForceTransferAllNative,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Assets",
						"force_transfer_all_native",
						types::ForceTransferAllNative { source, dest, keep_alive },
						[
							61u8, 154u8, 4u8, 164u8, 13u8, 44u8, 223u8, 197u8, 31u8, 42u8, 214u8,
							65u8, 224u8, 226u8, 64u8, 247u8, 60u8, 104u8, 87u8, 4u8, 128u8, 162u8,
							242u8, 31u8, 7u8, 92u8, 186u8, 58u8, 93u8, 89u8, 246u8, 54u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				pub fn native_asset_id(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::primitives::currency::CurrencyId,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Assets",
						"NativeAssetId",
						[
							62u8, 145u8, 102u8, 227u8, 159u8, 92u8, 27u8, 54u8, 159u8, 228u8,
							193u8, 99u8, 75u8, 196u8, 26u8, 250u8, 229u8, 230u8, 88u8, 109u8,
							246u8, 100u8, 152u8, 158u8, 14u8, 25u8, 224u8, 173u8, 224u8, 41u8,
							105u8, 231u8,
						],
					)
				}
			}
		}
	}
	pub mod assets_registry {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_assets_registry::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_assets_registry::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Creates an asset."]
				#[doc = ""]
				#[doc = "# Parameters:"]
				#[doc = ""]
				#[doc = "* `local_or_foreign` - Foreign asset location or unused local asset ID"]
				#[doc = ""]
				#[doc = "* `asset_info` - Information to register the asset with, see [`AssetInfo`]"]
				#[doc = ""]
				#[doc = "# Emits"]
				#[doc = "* `AssetRegistered`"]
				pub struct RegisterAsset {
					pub protocol_id: register_asset::ProtocolId,
					pub nonce: register_asset::Nonce,
					pub location: register_asset::Location,
					pub asset_info: register_asset::AssetInfo,
				}
				pub mod register_asset {
					use super::runtime_types;
					pub type ProtocolId = [::core::primitive::u8; 4usize];
					pub type Nonce = ::core::primitive::u64;
					pub type Location =
						::core::option::Option<runtime_types::primitives::currency::ForeignAssetId>;
					pub type AssetInfo = runtime_types::composable_traits::assets::AssetInfo<
						::core::primitive::u128,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RegisterAsset {
					const PALLET: &'static str = "AssetsRegistry";
					const CALL: &'static str = "register_asset";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Update stored asset information."]
				#[doc = ""]
				#[doc = "Emits:"]
				#[doc = "* `AssetUpdated`"]
				pub struct UpdateAsset {
					pub asset_id: update_asset::AssetId,
					pub asset_info: update_asset::AssetInfo,
				}
				pub mod update_asset {
					use super::runtime_types;
					pub type AssetId = runtime_types::primitives::currency::CurrencyId;
					pub type AssetInfo = runtime_types::composable_traits::assets::AssetInfoUpdate<
						::core::primitive::u128,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateAsset {
					const PALLET: &'static str = "AssetsRegistry";
					const CALL: &'static str = "update_asset";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Minimal amount of `foreign_asset_id` required to send message to other network."]
				#[doc = "Target network may or may not accept payment `amount`."]
				#[doc = "Assumed this is maintained up to date by technical team."]
				#[doc = "Mostly UI hint and fail fast solution."]
				#[doc = "Messages sending smaller fee will not be sent."]
				#[doc = "In theory can be updated by parachain sovereign account too."]
				#[doc = "If None, than it is well known cannot pay with that asset on target_parachain_id."]
				#[doc = "If Some(0), than price can be anything greater or equal to zero."]
				#[doc = "If Some(MAX), than actually it forbids transfers."]
				pub struct SetMinFee {
					pub target_parachain_id: set_min_fee::TargetParachainId,
					pub foreign_asset_id: set_min_fee::ForeignAssetId,
					pub amount: set_min_fee::Amount,
				}
				pub mod set_min_fee {
					use super::runtime_types;
					pub type TargetParachainId = ::core::primitive::u32;
					pub type ForeignAssetId = runtime_types::primitives::currency::ForeignAssetId;
					pub type Amount = ::core::option::Option<::core::primitive::u128>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetMinFee {
					const PALLET: &'static str = "AssetsRegistry";
					const CALL: &'static str = "set_min_fee";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct UpdateAssetLocation {
					pub asset_id: update_asset_location::AssetId,
					pub location: update_asset_location::Location,
				}
				pub mod update_asset_location {
					use super::runtime_types;
					pub type AssetId = runtime_types::primitives::currency::CurrencyId;
					pub type Location =
						::core::option::Option<runtime_types::primitives::currency::ForeignAssetId>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateAssetLocation {
					const PALLET: &'static str = "AssetsRegistry";
					const CALL: &'static str = "update_asset_location";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Creates an asset."]
				#[doc = ""]
				#[doc = "# Parameters:"]
				#[doc = ""]
				#[doc = "* `local_or_foreign` - Foreign asset location or unused local asset ID"]
				#[doc = ""]
				#[doc = "* `asset_info` - Information to register the asset with, see [`AssetInfo`]"]
				#[doc = ""]
				#[doc = "# Emits"]
				#[doc = "* `AssetRegistered`"]
				pub fn register_asset(
					&self,
					protocol_id: types::register_asset::ProtocolId,
					nonce: types::register_asset::Nonce,
					location: types::register_asset::Location,
					asset_info: types::register_asset::AssetInfo,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RegisterAsset>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"AssetsRegistry",
						"register_asset",
						types::RegisterAsset { protocol_id, nonce, location, asset_info },
						[
							223u8, 245u8, 195u8, 109u8, 59u8, 115u8, 171u8, 90u8, 106u8, 6u8,
							208u8, 226u8, 159u8, 216u8, 120u8, 140u8, 27u8, 225u8, 168u8, 127u8,
							73u8, 184u8, 87u8, 235u8, 109u8, 98u8, 61u8, 148u8, 107u8, 92u8, 60u8,
							52u8,
						],
					)
				}
				#[doc = "Update stored asset information."]
				#[doc = ""]
				#[doc = "Emits:"]
				#[doc = "* `AssetUpdated`"]
				pub fn update_asset(
					&self,
					asset_id: types::update_asset::AssetId,
					asset_info: types::update_asset::AssetInfo,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateAsset> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"AssetsRegistry",
						"update_asset",
						types::UpdateAsset { asset_id, asset_info },
						[
							119u8, 129u8, 188u8, 154u8, 49u8, 221u8, 121u8, 222u8, 227u8, 236u8,
							238u8, 114u8, 241u8, 16u8, 13u8, 116u8, 186u8, 9u8, 171u8, 8u8, 31u8,
							26u8, 136u8, 151u8, 166u8, 171u8, 13u8, 12u8, 7u8, 71u8, 167u8, 244u8,
						],
					)
				}
				#[doc = "Minimal amount of `foreign_asset_id` required to send message to other network."]
				#[doc = "Target network may or may not accept payment `amount`."]
				#[doc = "Assumed this is maintained up to date by technical team."]
				#[doc = "Mostly UI hint and fail fast solution."]
				#[doc = "Messages sending smaller fee will not be sent."]
				#[doc = "In theory can be updated by parachain sovereign account too."]
				#[doc = "If None, than it is well known cannot pay with that asset on target_parachain_id."]
				#[doc = "If Some(0), than price can be anything greater or equal to zero."]
				#[doc = "If Some(MAX), than actually it forbids transfers."]
				pub fn set_min_fee(
					&self,
					target_parachain_id: types::set_min_fee::TargetParachainId,
					foreign_asset_id: types::set_min_fee::ForeignAssetId,
					amount: types::set_min_fee::Amount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetMinFee> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"AssetsRegistry",
						"set_min_fee",
						types::SetMinFee { target_parachain_id, foreign_asset_id, amount },
						[
							24u8, 248u8, 48u8, 136u8, 76u8, 75u8, 90u8, 99u8, 200u8, 124u8, 190u8,
							39u8, 214u8, 35u8, 72u8, 191u8, 153u8, 169u8, 49u8, 164u8, 3u8, 116u8,
							209u8, 243u8, 211u8, 217u8, 47u8, 110u8, 228u8, 253u8, 245u8, 194u8,
						],
					)
				}
				pub fn update_asset_location(
					&self,
					asset_id: types::update_asset_location::AssetId,
					location: types::update_asset_location::Location,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateAssetLocation>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"AssetsRegistry",
						"update_asset_location",
						types::UpdateAssetLocation { asset_id, location },
						[
							43u8, 7u8, 23u8, 153u8, 40u8, 25u8, 238u8, 58u8, 87u8, 204u8, 191u8,
							86u8, 104u8, 227u8, 188u8, 127u8, 213u8, 163u8, 75u8, 218u8, 60u8,
							174u8, 51u8, 80u8, 38u8, 107u8, 90u8, 12u8, 193u8, 66u8, 113u8, 241u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_assets_registry::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct AssetRegistered {
				pub asset_id: asset_registered::AssetId,
				pub location: asset_registered::Location,
				pub asset_info: asset_registered::AssetInfo,
			}
			pub mod asset_registered {
				use super::runtime_types;
				pub type AssetId = runtime_types::primitives::currency::CurrencyId;
				pub type Location =
					::core::option::Option<runtime_types::primitives::currency::ForeignAssetId>;
				pub type AssetInfo =
					runtime_types::composable_traits::assets::AssetInfo<::core::primitive::u128>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for AssetRegistered {
				const PALLET: &'static str = "AssetsRegistry";
				const EVENT: &'static str = "AssetRegistered";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct AssetUpdated {
				pub asset_id: asset_updated::AssetId,
				pub asset_info: asset_updated::AssetInfo,
			}
			pub mod asset_updated {
				use super::runtime_types;
				pub type AssetId = runtime_types::primitives::currency::CurrencyId;
				pub type AssetInfo = runtime_types::composable_traits::assets::AssetInfoUpdate<
					::core::primitive::u128,
				>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for AssetUpdated {
				const PALLET: &'static str = "AssetsRegistry";
				const EVENT: &'static str = "AssetUpdated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct AssetLocationUpdated {
				pub asset_id: asset_location_updated::AssetId,
				pub location: asset_location_updated::Location,
			}
			pub mod asset_location_updated {
				use super::runtime_types;
				pub type AssetId = runtime_types::primitives::currency::CurrencyId;
				pub type Location = runtime_types::primitives::currency::ForeignAssetId;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for AssetLocationUpdated {
				const PALLET: &'static str = "AssetsRegistry";
				const EVENT: &'static str = "AssetLocationUpdated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct AssetLocationRemoved {
				pub asset_id: asset_location_removed::AssetId,
			}
			pub mod asset_location_removed {
				use super::runtime_types;
				pub type AssetId = runtime_types::primitives::currency::CurrencyId;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for AssetLocationRemoved {
				const PALLET: &'static str = "AssetsRegistry";
				const EVENT: &'static str = "AssetLocationRemoved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct MinFeeUpdated {
				pub target_parachain_id: min_fee_updated::TargetParachainId,
				pub foreign_asset_id: min_fee_updated::ForeignAssetId,
				pub amount: min_fee_updated::Amount,
			}
			pub mod min_fee_updated {
				use super::runtime_types;
				pub type TargetParachainId = ::core::primitive::u32;
				pub type ForeignAssetId = runtime_types::primitives::currency::ForeignAssetId;
				pub type Amount = ::core::option::Option<::core::primitive::u128>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for MinFeeUpdated {
				const PALLET: &'static str = "AssetsRegistry";
				const EVENT: &'static str = "MinFeeUpdated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod local_to_foreign {
					use super::runtime_types;
					pub type LocalToForeign = runtime_types::primitives::currency::ForeignAssetId;
					pub type Param0 = runtime_types::primitives::currency::CurrencyId;
				}
				pub mod foreign_to_local {
					use super::runtime_types;
					pub type ForeignToLocal = runtime_types::primitives::currency::CurrencyId;
					pub type Param0 = runtime_types::primitives::currency::ForeignAssetId;
				}
				pub mod min_fee_amounts {
					use super::runtime_types;
					pub type MinFeeAmounts = ::core::primitive::u128;
					pub type Param0 = ::core::primitive::u32;
					pub type Param1 = runtime_types::primitives::currency::ForeignAssetId;
				}
				pub mod asset_ratio {
					use super::runtime_types;
					pub type AssetRatio = runtime_types::composable_traits::currency::Rational64;
					pub type Param0 = runtime_types::primitives::currency::CurrencyId;
				}
				pub mod existential_deposit {
					use super::runtime_types;
					pub type ExistentialDeposit = ::core::primitive::u128;
					pub type Param0 = runtime_types::primitives::currency::CurrencyId;
				}
				pub mod asset_name {
					use super::runtime_types;
					pub type AssetName = runtime_types :: composable_support :: collections :: vec :: bounded :: bi_bounded_vec :: BiBoundedVec < :: core :: primitive :: u8 > ;
					pub type Param0 = runtime_types::primitives::currency::CurrencyId;
				}
				pub mod asset_symbol {
					use super::runtime_types;
					pub type AssetSymbol = runtime_types :: composable_support :: collections :: vec :: bounded :: bi_bounded_vec :: BiBoundedVec < :: core :: primitive :: u8 > ;
					pub type Param0 = runtime_types::primitives::currency::CurrencyId;
				}
				pub mod asset_decimals {
					use super::runtime_types;
					pub type AssetDecimals = ::core::primitive::u8;
					pub type Param0 = runtime_types::primitives::currency::CurrencyId;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " Mapping local asset to foreign asset."]
				pub fn local_to_foreign_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::local_to_foreign::LocalToForeign,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"LocalToForeign",
						(),
						[
							255u8, 55u8, 181u8, 82u8, 206u8, 165u8, 209u8, 196u8, 157u8, 99u8,
							214u8, 194u8, 76u8, 62u8, 151u8, 44u8, 126u8, 197u8, 176u8, 59u8, 27u8,
							105u8, 40u8, 147u8, 185u8, 122u8, 35u8, 41u8, 40u8, 177u8, 5u8, 73u8,
						],
					)
				}
				#[doc = " Mapping local asset to foreign asset."]
				pub fn local_to_foreign(
					&self,
					_0: impl ::core::borrow::Borrow<types::local_to_foreign::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::local_to_foreign::Param0,
					>,
					types::local_to_foreign::LocalToForeign,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"LocalToForeign",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							255u8, 55u8, 181u8, 82u8, 206u8, 165u8, 209u8, 196u8, 157u8, 99u8,
							214u8, 194u8, 76u8, 62u8, 151u8, 44u8, 126u8, 197u8, 176u8, 59u8, 27u8,
							105u8, 40u8, 147u8, 185u8, 122u8, 35u8, 41u8, 40u8, 177u8, 5u8, 73u8,
						],
					)
				}
				#[doc = " Mapping foreign asset to local asset."]
				pub fn foreign_to_local_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::foreign_to_local::ForeignToLocal,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"ForeignToLocal",
						(),
						[
							13u8, 117u8, 167u8, 112u8, 37u8, 125u8, 245u8, 200u8, 50u8, 89u8,
							175u8, 0u8, 183u8, 223u8, 32u8, 109u8, 16u8, 174u8, 156u8, 210u8, 43u8,
							177u8, 79u8, 20u8, 10u8, 70u8, 148u8, 100u8, 127u8, 54u8, 134u8, 75u8,
						],
					)
				}
				#[doc = " Mapping foreign asset to local asset."]
				pub fn foreign_to_local(
					&self,
					_0: impl ::core::borrow::Borrow<types::foreign_to_local::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::foreign_to_local::Param0,
					>,
					types::foreign_to_local::ForeignToLocal,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"ForeignToLocal",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							13u8, 117u8, 167u8, 112u8, 37u8, 125u8, 245u8, 200u8, 50u8, 89u8,
							175u8, 0u8, 183u8, 223u8, 32u8, 109u8, 16u8, 174u8, 156u8, 210u8, 43u8,
							177u8, 79u8, 20u8, 10u8, 70u8, 148u8, 100u8, 127u8, 54u8, 134u8, 75u8,
						],
					)
				}
				pub fn min_fee_amounts_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::min_fee_amounts::MinFeeAmounts,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"MinFeeAmounts",
						(),
						[
							54u8, 156u8, 61u8, 65u8, 197u8, 46u8, 185u8, 54u8, 52u8, 2u8, 4u8,
							94u8, 64u8, 114u8, 78u8, 189u8, 144u8, 236u8, 189u8, 149u8, 33u8,
							100u8, 129u8, 44u8, 120u8, 16u8, 241u8, 196u8, 59u8, 226u8, 37u8, 92u8,
						],
					)
				}
				pub fn min_fee_amounts_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::min_fee_amounts::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::min_fee_amounts::Param0,
					>,
					types::min_fee_amounts::MinFeeAmounts,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"MinFeeAmounts",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							54u8, 156u8, 61u8, 65u8, 197u8, 46u8, 185u8, 54u8, 52u8, 2u8, 4u8,
							94u8, 64u8, 114u8, 78u8, 189u8, 144u8, 236u8, 189u8, 149u8, 33u8,
							100u8, 129u8, 44u8, 120u8, 16u8, 241u8, 196u8, 59u8, 226u8, 37u8, 92u8,
						],
					)
				}
				pub fn min_fee_amounts(
					&self,
					_0: impl ::core::borrow::Borrow<types::min_fee_amounts::Param0>,
					_1: impl ::core::borrow::Borrow<types::min_fee_amounts::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::min_fee_amounts::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::min_fee_amounts::Param1,
						>,
					),
					types::min_fee_amounts::MinFeeAmounts,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"MinFeeAmounts",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							54u8, 156u8, 61u8, 65u8, 197u8, 46u8, 185u8, 54u8, 52u8, 2u8, 4u8,
							94u8, 64u8, 114u8, 78u8, 189u8, 144u8, 236u8, 189u8, 149u8, 33u8,
							100u8, 129u8, 44u8, 120u8, 16u8, 241u8, 196u8, 59u8, 226u8, 37u8, 92u8,
						],
					)
				}
				#[doc = " How much of asset amount is needed to pay for one unit of native token."]
				pub fn asset_ratio_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::asset_ratio::AssetRatio,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"AssetRatio",
						(),
						[
							189u8, 179u8, 117u8, 254u8, 184u8, 121u8, 42u8, 61u8, 182u8, 152u8,
							190u8, 110u8, 25u8, 192u8, 23u8, 200u8, 113u8, 132u8, 112u8, 227u8,
							100u8, 58u8, 162u8, 106u8, 18u8, 241u8, 34u8, 125u8, 67u8, 200u8, 5u8,
							12u8,
						],
					)
				}
				#[doc = " How much of asset amount is needed to pay for one unit of native token."]
				pub fn asset_ratio(
					&self,
					_0: impl ::core::borrow::Borrow<types::asset_ratio::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::asset_ratio::Param0,
					>,
					types::asset_ratio::AssetRatio,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"AssetRatio",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							189u8, 179u8, 117u8, 254u8, 184u8, 121u8, 42u8, 61u8, 182u8, 152u8,
							190u8, 110u8, 25u8, 192u8, 23u8, 200u8, 113u8, 132u8, 112u8, 227u8,
							100u8, 58u8, 162u8, 106u8, 18u8, 241u8, 34u8, 125u8, 67u8, 200u8, 5u8,
							12u8,
						],
					)
				}
				#[doc = " The minimum balance of an asset required for the balance to be stored on chain"]
				pub fn existential_deposit_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::existential_deposit::ExistentialDeposit,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"ExistentialDeposit",
						(),
						[
							94u8, 2u8, 113u8, 66u8, 13u8, 196u8, 23u8, 139u8, 225u8, 186u8, 126u8,
							171u8, 85u8, 131u8, 65u8, 222u8, 113u8, 168u8, 248u8, 38u8, 37u8,
							158u8, 191u8, 98u8, 71u8, 32u8, 109u8, 205u8, 198u8, 240u8, 118u8,
							224u8,
						],
					)
				}
				#[doc = " The minimum balance of an asset required for the balance to be stored on chain"]
				pub fn existential_deposit(
					&self,
					_0: impl ::core::borrow::Borrow<types::existential_deposit::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::existential_deposit::Param0,
					>,
					types::existential_deposit::ExistentialDeposit,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"ExistentialDeposit",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							94u8, 2u8, 113u8, 66u8, 13u8, 196u8, 23u8, 139u8, 225u8, 186u8, 126u8,
							171u8, 85u8, 131u8, 65u8, 222u8, 113u8, 168u8, 248u8, 38u8, 37u8,
							158u8, 191u8, 98u8, 71u8, 32u8, 109u8, 205u8, 198u8, 240u8, 118u8,
							224u8,
						],
					)
				}
				#[doc = " Name of an asset"]
				pub fn asset_name_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::asset_name::AssetName,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"AssetName",
						(),
						[
							95u8, 88u8, 136u8, 170u8, 255u8, 243u8, 237u8, 186u8, 161u8, 95u8,
							187u8, 138u8, 249u8, 255u8, 190u8, 106u8, 179u8, 97u8, 124u8, 46u8,
							150u8, 171u8, 218u8, 92u8, 156u8, 34u8, 224u8, 36u8, 38u8, 223u8, 87u8,
							131u8,
						],
					)
				}
				#[doc = " Name of an asset"]
				pub fn asset_name(
					&self,
					_0: impl ::core::borrow::Borrow<types::asset_name::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::asset_name::Param0,
					>,
					types::asset_name::AssetName,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"AssetName",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							95u8, 88u8, 136u8, 170u8, 255u8, 243u8, 237u8, 186u8, 161u8, 95u8,
							187u8, 138u8, 249u8, 255u8, 190u8, 106u8, 179u8, 97u8, 124u8, 46u8,
							150u8, 171u8, 218u8, 92u8, 156u8, 34u8, 224u8, 36u8, 38u8, 223u8, 87u8,
							131u8,
						],
					)
				}
				#[doc = " Symbol of an asset"]
				pub fn asset_symbol_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::asset_symbol::AssetSymbol,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"AssetSymbol",
						(),
						[
							165u8, 55u8, 83u8, 22u8, 52u8, 121u8, 209u8, 233u8, 41u8, 204u8, 195u8,
							110u8, 255u8, 236u8, 21u8, 247u8, 159u8, 239u8, 79u8, 240u8, 178u8,
							144u8, 175u8, 26u8, 109u8, 235u8, 239u8, 15u8, 44u8, 137u8, 35u8,
							121u8,
						],
					)
				}
				#[doc = " Symbol of an asset"]
				pub fn asset_symbol(
					&self,
					_0: impl ::core::borrow::Borrow<types::asset_symbol::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::asset_symbol::Param0,
					>,
					types::asset_symbol::AssetSymbol,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"AssetSymbol",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							165u8, 55u8, 83u8, 22u8, 52u8, 121u8, 209u8, 233u8, 41u8, 204u8, 195u8,
							110u8, 255u8, 236u8, 21u8, 247u8, 159u8, 239u8, 79u8, 240u8, 178u8,
							144u8, 175u8, 26u8, 109u8, 235u8, 239u8, 15u8, 44u8, 137u8, 35u8,
							121u8,
						],
					)
				}
				#[doc = " Decimals of an asset"]
				pub fn asset_decimals_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::asset_decimals::AssetDecimals,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"AssetDecimals",
						(),
						[
							147u8, 209u8, 44u8, 78u8, 198u8, 145u8, 143u8, 65u8, 136u8, 127u8,
							54u8, 200u8, 84u8, 240u8, 179u8, 138u8, 86u8, 230u8, 218u8, 225u8,
							182u8, 100u8, 26u8, 226u8, 48u8, 65u8, 61u8, 102u8, 127u8, 68u8, 11u8,
							249u8,
						],
					)
				}
				#[doc = " Decimals of an asset"]
				pub fn asset_decimals(
					&self,
					_0: impl ::core::borrow::Borrow<types::asset_decimals::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::asset_decimals::Param0,
					>,
					types::asset_decimals::AssetDecimals,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"AssetsRegistry",
						"AssetDecimals",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							147u8, 209u8, 44u8, 78u8, 198u8, 145u8, 143u8, 65u8, 136u8, 127u8,
							54u8, 200u8, 84u8, 240u8, 179u8, 138u8, 86u8, 230u8, 218u8, 225u8,
							182u8, 100u8, 26u8, 226u8, 48u8, 65u8, 61u8, 102u8, 127u8, 68u8, 11u8,
							249u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Network id, unique per chain"]
				pub fn network_id(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"AssetsRegistry",
						"NetworkId",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod referenda {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_referenda::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_referenda::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Propose a referendum on a privileged action."]
				#[doc = ""]
				#[doc = "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds"]
				#[doc = "  available."]
				#[doc = "- `proposal_origin`: The origin from which the proposal should be executed."]
				#[doc = "- `proposal`: The proposal."]
				#[doc = "- `enactment_moment`: The moment that the proposal should be enacted."]
				#[doc = ""]
				#[doc = "Emits `Submitted`."]
				pub struct Submit {
					pub proposal_origin:
						::subxt::ext::subxt_core::alloc::boxed::Box<submit::ProposalOrigin>,
					pub proposal: submit::Proposal,
					pub enactment_moment: submit::EnactmentMoment,
				}
				pub mod submit {
					use super::runtime_types;
					pub type ProposalOrigin = runtime_types::composable_runtime::OriginCaller;
					pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
						runtime_types::composable_runtime::RuntimeCall,
					>;
					pub type EnactmentMoment =
						runtime_types::frame_support::traits::schedule::DispatchTime<
							::core::primitive::u32,
						>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Submit {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "submit";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Post the Decision Deposit for a referendum."]
				#[doc = ""]
				#[doc = "- `origin`: must be `Signed` and the account must have funds available for the"]
				#[doc = "  referendum's track's Decision Deposit."]
				#[doc = "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be"]
				#[doc = "  posted."]
				#[doc = ""]
				#[doc = "Emits `DecisionDepositPlaced`."]
				pub struct PlaceDecisionDeposit {
					pub index: place_decision_deposit::Index,
				}
				pub mod place_decision_deposit {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for PlaceDecisionDeposit {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "place_decision_deposit";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Refund the Decision Deposit for a closed referendum back to the depositor."]
				#[doc = ""]
				#[doc = "- `origin`: must be `Signed` or `Root`."]
				#[doc = "- `index`: The index of a closed referendum whose Decision Deposit has not yet been"]
				#[doc = "  refunded."]
				#[doc = ""]
				#[doc = "Emits `DecisionDepositRefunded`."]
				pub struct RefundDecisionDeposit {
					pub index: refund_decision_deposit::Index,
				}
				pub mod refund_decision_deposit {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RefundDecisionDeposit {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "refund_decision_deposit";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Cancel an ongoing referendum."]
				#[doc = ""]
				#[doc = "- `origin`: must be the `CancelOrigin`."]
				#[doc = "- `index`: The index of the referendum to be cancelled."]
				#[doc = ""]
				#[doc = "Emits `Cancelled`."]
				pub struct Cancel {
					pub index: cancel::Index,
				}
				pub mod cancel {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Cancel {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "cancel";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Cancel an ongoing referendum and slash the deposits."]
				#[doc = ""]
				#[doc = "- `origin`: must be the `KillOrigin`."]
				#[doc = "- `index`: The index of the referendum to be cancelled."]
				#[doc = ""]
				#[doc = "Emits `Killed` and `DepositSlashed`."]
				pub struct Kill {
					pub index: kill::Index,
				}
				pub mod kill {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Kill {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "kill";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Advance a referendum onto its next logical state. Only used internally."]
				#[doc = ""]
				#[doc = "- `origin`: must be `Root`."]
				#[doc = "- `index`: the referendum to be advanced."]
				pub struct NudgeReferendum {
					pub index: nudge_referendum::Index,
				}
				pub mod nudge_referendum {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for NudgeReferendum {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "nudge_referendum";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Advance a track onto its next logical state. Only used internally."]
				#[doc = ""]
				#[doc = "- `origin`: must be `Root`."]
				#[doc = "- `track`: the track to be advanced."]
				#[doc = ""]
				#[doc = "Action item for when there is now one fewer referendum in the deciding phase and the"]
				#[doc = "`DecidingCount` is not yet updated. This means that we should either:"]
				#[doc = "- begin deciding another referendum (and leave `DecidingCount` alone); or"]
				#[doc = "- decrement `DecidingCount`."]
				pub struct OneFewerDeciding {
					pub track: one_fewer_deciding::Track,
				}
				pub mod one_fewer_deciding {
					use super::runtime_types;
					pub type Track = ::core::primitive::u16;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for OneFewerDeciding {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "one_fewer_deciding";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Refund the Submission Deposit for a closed referendum back to the depositor."]
				#[doc = ""]
				#[doc = "- `origin`: must be `Signed` or `Root`."]
				#[doc = "- `index`: The index of a closed referendum whose Submission Deposit has not yet been"]
				#[doc = "  refunded."]
				#[doc = ""]
				#[doc = "Emits `SubmissionDepositRefunded`."]
				pub struct RefundSubmissionDeposit {
					pub index: refund_submission_deposit::Index,
				}
				pub mod refund_submission_deposit {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RefundSubmissionDeposit {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "refund_submission_deposit";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set or clear metadata of a referendum."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a"]
				#[doc = "  metadata of a finished referendum."]
				#[doc = "- `index`:  The index of a referendum to set or clear metadata for."]
				#[doc = "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."]
				pub struct SetMetadata {
					pub index: set_metadata::Index,
					pub maybe_hash: set_metadata::MaybeHash,
				}
				pub mod set_metadata {
					use super::runtime_types;
					pub type Index = ::core::primitive::u32;
					pub type MaybeHash =
						::core::option::Option<::subxt::ext::subxt_core::utils::H256>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetMetadata {
					const PALLET: &'static str = "Referenda";
					const CALL: &'static str = "set_metadata";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Propose a referendum on a privileged action."]
				#[doc = ""]
				#[doc = "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds"]
				#[doc = "  available."]
				#[doc = "- `proposal_origin`: The origin from which the proposal should be executed."]
				#[doc = "- `proposal`: The proposal."]
				#[doc = "- `enactment_moment`: The moment that the proposal should be enacted."]
				#[doc = ""]
				#[doc = "Emits `Submitted`."]
				pub fn submit(
					&self,
					proposal_origin: types::submit::ProposalOrigin,
					proposal: types::submit::Proposal,
					enactment_moment: types::submit::EnactmentMoment,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Submit> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Referenda",
						"submit",
						types::Submit {
							proposal_origin: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
								proposal_origin,
							),
							proposal,
							enactment_moment,
						},
						[
							209u8, 32u8, 80u8, 22u8, 240u8, 114u8, 34u8, 0u8, 103u8, 114u8, 112u8,
							183u8, 160u8, 132u8, 46u8, 145u8, 252u8, 24u8, 159u8, 91u8, 11u8,
							230u8, 222u8, 47u8, 181u8, 241u8, 85u8, 179u8, 167u8, 218u8, 66u8,
							35u8,
						],
					)
				}
				#[doc = "Post the Decision Deposit for a referendum."]
				#[doc = ""]
				#[doc = "- `origin`: must be `Signed` and the account must have funds available for the"]
				#[doc = "  referendum's track's Decision Deposit."]
				#[doc = "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be"]
				#[doc = "  posted."]
				#[doc = ""]
				#[doc = "Emits `DecisionDepositPlaced`."]
				pub fn place_decision_deposit(
					&self,
					index: types::place_decision_deposit::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::PlaceDecisionDeposit>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Referenda",
						"place_decision_deposit",
						types::PlaceDecisionDeposit { index },
						[
							247u8, 158u8, 55u8, 191u8, 188u8, 200u8, 3u8, 47u8, 20u8, 175u8, 86u8,
							203u8, 52u8, 253u8, 91u8, 131u8, 21u8, 213u8, 56u8, 68u8, 40u8, 84u8,
							184u8, 30u8, 9u8, 193u8, 63u8, 182u8, 178u8, 241u8, 247u8, 220u8,
						],
					)
				}
				#[doc = "Refund the Decision Deposit for a closed referendum back to the depositor."]
				#[doc = ""]
				#[doc = "- `origin`: must be `Signed` or `Root`."]
				#[doc = "- `index`: The index of a closed referendum whose Decision Deposit has not yet been"]
				#[doc = "  refunded."]
				#[doc = ""]
				#[doc = "Emits `DecisionDepositRefunded`."]
				pub fn refund_decision_deposit(
					&self,
					index: types::refund_decision_deposit::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::RefundDecisionDeposit,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Referenda",
						"refund_decision_deposit",
						types::RefundDecisionDeposit { index },
						[
							159u8, 19u8, 35u8, 216u8, 114u8, 105u8, 18u8, 42u8, 148u8, 151u8,
							136u8, 92u8, 117u8, 30u8, 29u8, 41u8, 238u8, 58u8, 195u8, 91u8, 115u8,
							135u8, 96u8, 99u8, 154u8, 233u8, 8u8, 249u8, 145u8, 165u8, 77u8, 164u8,
						],
					)
				}
				#[doc = "Cancel an ongoing referendum."]
				#[doc = ""]
				#[doc = "- `origin`: must be the `CancelOrigin`."]
				#[doc = "- `index`: The index of the referendum to be cancelled."]
				#[doc = ""]
				#[doc = "Emits `Cancelled`."]
				pub fn cancel(
					&self,
					index: types::cancel::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Cancel> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Referenda",
						"cancel",
						types::Cancel { index },
						[
							55u8, 206u8, 119u8, 156u8, 238u8, 165u8, 193u8, 73u8, 242u8, 13u8,
							212u8, 75u8, 136u8, 156u8, 151u8, 14u8, 35u8, 41u8, 156u8, 107u8, 60u8,
							190u8, 39u8, 216u8, 8u8, 74u8, 213u8, 130u8, 160u8, 131u8, 237u8,
							122u8,
						],
					)
				}
				#[doc = "Cancel an ongoing referendum and slash the deposits."]
				#[doc = ""]
				#[doc = "- `origin`: must be the `KillOrigin`."]
				#[doc = "- `index`: The index of the referendum to be cancelled."]
				#[doc = ""]
				#[doc = "Emits `Killed` and `DepositSlashed`."]
				pub fn kill(
					&self,
					index: types::kill::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Kill> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Referenda",
						"kill",
						types::Kill { index },
						[
							50u8, 89u8, 57u8, 0u8, 87u8, 129u8, 113u8, 140u8, 179u8, 178u8, 126u8,
							198u8, 92u8, 92u8, 189u8, 64u8, 123u8, 232u8, 57u8, 227u8, 223u8,
							219u8, 73u8, 217u8, 179u8, 44u8, 210u8, 125u8, 180u8, 10u8, 143u8,
							48u8,
						],
					)
				}
				#[doc = "Advance a referendum onto its next logical state. Only used internally."]
				#[doc = ""]
				#[doc = "- `origin`: must be `Root`."]
				#[doc = "- `index`: the referendum to be advanced."]
				pub fn nudge_referendum(
					&self,
					index: types::nudge_referendum::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::NudgeReferendum>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Referenda",
						"nudge_referendum",
						types::NudgeReferendum { index },
						[
							75u8, 99u8, 172u8, 30u8, 170u8, 150u8, 211u8, 229u8, 249u8, 128u8,
							194u8, 246u8, 100u8, 142u8, 193u8, 184u8, 232u8, 81u8, 29u8, 17u8,
							99u8, 91u8, 236u8, 85u8, 230u8, 226u8, 57u8, 115u8, 45u8, 170u8, 54u8,
							213u8,
						],
					)
				}
				#[doc = "Advance a track onto its next logical state. Only used internally."]
				#[doc = ""]
				#[doc = "- `origin`: must be `Root`."]
				#[doc = "- `track`: the track to be advanced."]
				#[doc = ""]
				#[doc = "Action item for when there is now one fewer referendum in the deciding phase and the"]
				#[doc = "`DecidingCount` is not yet updated. This means that we should either:"]
				#[doc = "- begin deciding another referendum (and leave `DecidingCount` alone); or"]
				#[doc = "- decrement `DecidingCount`."]
				pub fn one_fewer_deciding(
					&self,
					track: types::one_fewer_deciding::Track,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::OneFewerDeciding>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Referenda",
						"one_fewer_deciding",
						types::OneFewerDeciding { track },
						[
							15u8, 84u8, 79u8, 231u8, 21u8, 239u8, 244u8, 143u8, 183u8, 215u8,
							181u8, 25u8, 225u8, 195u8, 95u8, 171u8, 17u8, 156u8, 182u8, 128u8,
							111u8, 40u8, 151u8, 102u8, 196u8, 55u8, 36u8, 212u8, 89u8, 190u8,
							131u8, 167u8,
						],
					)
				}
				#[doc = "Refund the Submission Deposit for a closed referendum back to the depositor."]
				#[doc = ""]
				#[doc = "- `origin`: must be `Signed` or `Root`."]
				#[doc = "- `index`: The index of a closed referendum whose Submission Deposit has not yet been"]
				#[doc = "  refunded."]
				#[doc = ""]
				#[doc = "Emits `SubmissionDepositRefunded`."]
				pub fn refund_submission_deposit(
					&self,
					index: types::refund_submission_deposit::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::RefundSubmissionDeposit,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Referenda",
						"refund_submission_deposit",
						types::RefundSubmissionDeposit { index },
						[
							20u8, 217u8, 115u8, 6u8, 1u8, 60u8, 54u8, 136u8, 35u8, 41u8, 38u8,
							23u8, 85u8, 100u8, 141u8, 126u8, 30u8, 160u8, 61u8, 46u8, 134u8, 98u8,
							82u8, 38u8, 211u8, 124u8, 208u8, 222u8, 210u8, 10u8, 155u8, 122u8,
						],
					)
				}
				#[doc = "Set or clear metadata of a referendum."]
				#[doc = ""]
				#[doc = "Parameters:"]
				#[doc = "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a"]
				#[doc = "  metadata of a finished referendum."]
				#[doc = "- `index`:  The index of a referendum to set or clear metadata for."]
				#[doc = "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."]
				pub fn set_metadata(
					&self,
					index: types::set_metadata::Index,
					maybe_hash: types::set_metadata::MaybeHash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetMetadata> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Referenda",
						"set_metadata",
						types::SetMetadata { index, maybe_hash },
						[
							207u8, 29u8, 146u8, 233u8, 219u8, 205u8, 88u8, 118u8, 106u8, 61u8,
							124u8, 101u8, 2u8, 41u8, 169u8, 70u8, 114u8, 189u8, 162u8, 118u8, 1u8,
							108u8, 234u8, 98u8, 245u8, 245u8, 183u8, 126u8, 89u8, 13u8, 112u8,
							88u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_referenda::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A referendum has been submitted."]
			pub struct Submitted {
				pub index: submitted::Index,
				pub track: submitted::Track,
				pub proposal: submitted::Proposal,
			}
			pub mod submitted {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Track = ::core::primitive::u16;
				pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::composable_runtime::RuntimeCall,
				>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Submitted {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Submitted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The decision deposit has been placed."]
			pub struct DecisionDepositPlaced {
				pub index: decision_deposit_placed::Index,
				pub who: decision_deposit_placed::Who,
				pub amount: decision_deposit_placed::Amount,
			}
			pub mod decision_deposit_placed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for DecisionDepositPlaced {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "DecisionDepositPlaced";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The decision deposit has been refunded."]
			pub struct DecisionDepositRefunded {
				pub index: decision_deposit_refunded::Index,
				pub who: decision_deposit_refunded::Who,
				pub amount: decision_deposit_refunded::Amount,
			}
			pub mod decision_deposit_refunded {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for DecisionDepositRefunded {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "DecisionDepositRefunded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A deposit has been slashaed."]
			pub struct DepositSlashed {
				pub who: deposit_slashed::Who,
				pub amount: deposit_slashed::Amount,
			}
			pub mod deposit_slashed {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for DepositSlashed {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "DepositSlashed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A referendum has moved into the deciding phase."]
			pub struct DecisionStarted {
				pub index: decision_started::Index,
				pub track: decision_started::Track,
				pub proposal: decision_started::Proposal,
				pub tally: decision_started::Tally,
			}
			pub mod decision_started {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Track = ::core::primitive::u16;
				pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
					runtime_types::composable_runtime::RuntimeCall,
				>;
				pub type Tally =
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for DecisionStarted {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "DecisionStarted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ConfirmStarted {
				pub index: confirm_started::Index,
			}
			pub mod confirm_started {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ConfirmStarted {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "ConfirmStarted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ConfirmAborted {
				pub index: confirm_aborted::Index,
			}
			pub mod confirm_aborted {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ConfirmAborted {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "ConfirmAborted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A referendum has ended its confirmation phase and is ready for approval."]
			pub struct Confirmed {
				pub index: confirmed::Index,
				pub tally: confirmed::Tally,
			}
			pub mod confirmed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally =
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Confirmed {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Confirmed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A referendum has been approved and its proposal has been scheduled."]
			pub struct Approved {
				pub index: approved::Index,
			}
			pub mod approved {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Approved {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Approved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A proposal has been rejected by referendum."]
			pub struct Rejected {
				pub index: rejected::Index,
				pub tally: rejected::Tally,
			}
			pub mod rejected {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally =
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Rejected {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Rejected";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A referendum has been timed out without being decided."]
			pub struct TimedOut {
				pub index: timed_out::Index,
				pub tally: timed_out::Tally,
			}
			pub mod timed_out {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally =
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for TimedOut {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "TimedOut";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A referendum has been cancelled."]
			pub struct Cancelled {
				pub index: cancelled::Index,
				pub tally: cancelled::Tally,
			}
			pub mod cancelled {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally =
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Cancelled {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Cancelled";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A referendum has been killed."]
			pub struct Killed {
				pub index: killed::Index,
				pub tally: killed::Tally,
			}
			pub mod killed {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Tally =
					runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Killed {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "Killed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The submission deposit has been refunded."]
			pub struct SubmissionDepositRefunded {
				pub index: submission_deposit_refunded::Index,
				pub who: submission_deposit_refunded::Who,
				pub amount: submission_deposit_refunded::Amount,
			}
			pub mod submission_deposit_refunded {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for SubmissionDepositRefunded {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "SubmissionDepositRefunded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Metadata for a referendum has been set."]
			pub struct MetadataSet {
				pub index: metadata_set::Index,
				pub hash: metadata_set::Hash,
			}
			pub mod metadata_set {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Hash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for MetadataSet {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "MetadataSet";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Metadata for a referendum has been cleared."]
			pub struct MetadataCleared {
				pub index: metadata_cleared::Index,
				pub hash: metadata_cleared::Hash,
			}
			pub mod metadata_cleared {
				use super::runtime_types;
				pub type Index = ::core::primitive::u32;
				pub type Hash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for MetadataCleared {
				const PALLET: &'static str = "Referenda";
				const EVENT: &'static str = "MetadataCleared";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod referendum_count {
					use super::runtime_types;
					pub type ReferendumCount = ::core::primitive::u32;
				}
				pub mod referendum_info_for {
					use super::runtime_types;
					pub type ReferendumInfoFor =
						runtime_types::pallet_referenda::types::ReferendumInfo<
							::core::primitive::u16,
							runtime_types::composable_runtime::OriginCaller,
							::core::primitive::u32,
							runtime_types::frame_support::traits::preimages::Bounded<
								runtime_types::composable_runtime::RuntimeCall,
							>,
							::core::primitive::u128,
							runtime_types::pallet_conviction_voting::types::Tally<
								::core::primitive::u128,
							>,
							::subxt::ext::subxt_core::utils::AccountId32,
							(::core::primitive::u32, ::core::primitive::u32),
						>;
					pub type Param0 = ::core::primitive::u32;
				}
				pub mod track_queue {
					use super::runtime_types;
					pub type TrackQueue =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							::core::primitive::u32,
							::core::primitive::u128,
						)>;
					pub type Param0 = ::core::primitive::u16;
				}
				pub mod deciding_count {
					use super::runtime_types;
					pub type DecidingCount = ::core::primitive::u32;
					pub type Param0 = ::core::primitive::u16;
				}
				pub mod metadata_of {
					use super::runtime_types;
					pub type MetadataOf = ::subxt::ext::subxt_core::utils::H256;
					pub type Param0 = ::core::primitive::u32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The next free referendum index, aka the number of referenda started so far."]
				pub fn referendum_count(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::referendum_count::ReferendumCount,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Referenda",
						"ReferendumCount",
						(),
						[
							64u8, 145u8, 232u8, 153u8, 121u8, 87u8, 128u8, 253u8, 170u8, 192u8,
							139u8, 18u8, 0u8, 33u8, 243u8, 11u8, 238u8, 222u8, 244u8, 5u8, 247u8,
							198u8, 149u8, 31u8, 122u8, 208u8, 86u8, 179u8, 166u8, 167u8, 93u8,
							67u8,
						],
					)
				}
				#[doc = " Information concerning any given referendum."]
				pub fn referendum_info_for_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::referendum_info_for::ReferendumInfoFor,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Referenda",
						"ReferendumInfoFor",
						(),
						[
							19u8, 103u8, 188u8, 174u8, 16u8, 109u8, 65u8, 240u8, 94u8, 167u8,
							148u8, 117u8, 186u8, 29u8, 204u8, 68u8, 24u8, 47u8, 214u8, 87u8, 188u8,
							226u8, 112u8, 206u8, 60u8, 161u8, 16u8, 24u8, 208u8, 147u8, 252u8,
							188u8,
						],
					)
				}
				#[doc = " Information concerning any given referendum."]
				pub fn referendum_info_for(
					&self,
					_0: impl ::core::borrow::Borrow<types::referendum_info_for::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::referendum_info_for::Param0,
					>,
					types::referendum_info_for::ReferendumInfoFor,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Referenda",
						"ReferendumInfoFor",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							19u8, 103u8, 188u8, 174u8, 16u8, 109u8, 65u8, 240u8, 94u8, 167u8,
							148u8, 117u8, 186u8, 29u8, 204u8, 68u8, 24u8, 47u8, 214u8, 87u8, 188u8,
							226u8, 112u8, 206u8, 60u8, 161u8, 16u8, 24u8, 208u8, 147u8, 252u8,
							188u8,
						],
					)
				}
				#[doc = " The sorted list of referenda ready to be decided but not yet being decided, ordered by"]
				#[doc = " conviction-weighted approvals."]
				#[doc = ""]
				#[doc = " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."]
				pub fn track_queue_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::track_queue::TrackQueue,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Referenda",
						"TrackQueue",
						(),
						[
							125u8, 59u8, 111u8, 68u8, 27u8, 236u8, 82u8, 55u8, 83u8, 159u8, 105u8,
							20u8, 241u8, 118u8, 58u8, 141u8, 103u8, 60u8, 246u8, 49u8, 121u8,
							183u8, 7u8, 203u8, 225u8, 67u8, 132u8, 79u8, 150u8, 107u8, 71u8, 89u8,
						],
					)
				}
				#[doc = " The sorted list of referenda ready to be decided but not yet being decided, ordered by"]
				#[doc = " conviction-weighted approvals."]
				#[doc = ""]
				#[doc = " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."]
				pub fn track_queue(
					&self,
					_0: impl ::core::borrow::Borrow<types::track_queue::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::track_queue::Param0,
					>,
					types::track_queue::TrackQueue,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Referenda",
						"TrackQueue",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							125u8, 59u8, 111u8, 68u8, 27u8, 236u8, 82u8, 55u8, 83u8, 159u8, 105u8,
							20u8, 241u8, 118u8, 58u8, 141u8, 103u8, 60u8, 246u8, 49u8, 121u8,
							183u8, 7u8, 203u8, 225u8, 67u8, 132u8, 79u8, 150u8, 107u8, 71u8, 89u8,
						],
					)
				}
				#[doc = " The number of referenda being decided currently."]
				pub fn deciding_count_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::deciding_count::DecidingCount,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Referenda",
						"DecidingCount",
						(),
						[
							203u8, 89u8, 158u8, 179u8, 194u8, 82u8, 248u8, 162u8, 93u8, 140u8,
							146u8, 51u8, 110u8, 232u8, 51u8, 1u8, 128u8, 212u8, 199u8, 14u8, 182u8,
							103u8, 47u8, 252u8, 126u8, 108u8, 166u8, 69u8, 252u8, 179u8, 126u8,
							245u8,
						],
					)
				}
				#[doc = " The number of referenda being decided currently."]
				pub fn deciding_count(
					&self,
					_0: impl ::core::borrow::Borrow<types::deciding_count::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::deciding_count::Param0,
					>,
					types::deciding_count::DecidingCount,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Referenda",
						"DecidingCount",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							203u8, 89u8, 158u8, 179u8, 194u8, 82u8, 248u8, 162u8, 93u8, 140u8,
							146u8, 51u8, 110u8, 232u8, 51u8, 1u8, 128u8, 212u8, 199u8, 14u8, 182u8,
							103u8, 47u8, 252u8, 126u8, 108u8, 166u8, 69u8, 252u8, 179u8, 126u8,
							245u8,
						],
					)
				}
				#[doc = " The metadata is a general information concerning the referendum."]
				#[doc = " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"]
				#[doc = " dump or IPFS hash of a JSON file."]
				#[doc = ""]
				#[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
				#[doc = " large preimages."]
				pub fn metadata_of_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::metadata_of::MetadataOf,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Referenda",
						"MetadataOf",
						(),
						[
							159u8, 250u8, 56u8, 189u8, 247u8, 165u8, 206u8, 166u8, 91u8, 139u8,
							124u8, 164u8, 25u8, 246u8, 199u8, 36u8, 159u8, 56u8, 227u8, 136u8, 4u8,
							45u8, 193u8, 72u8, 200u8, 164u8, 39u8, 207u8, 224u8, 124u8, 191u8,
							110u8,
						],
					)
				}
				#[doc = " The metadata is a general information concerning the referendum."]
				#[doc = " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"]
				#[doc = " dump or IPFS hash of a JSON file."]
				#[doc = ""]
				#[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
				#[doc = " large preimages."]
				pub fn metadata_of(
					&self,
					_0: impl ::core::borrow::Borrow<types::metadata_of::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::metadata_of::Param0,
					>,
					types::metadata_of::MetadataOf,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Referenda",
						"MetadataOf",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							159u8, 250u8, 56u8, 189u8, 247u8, 165u8, 206u8, 166u8, 91u8, 139u8,
							124u8, 164u8, 25u8, 246u8, 199u8, 36u8, 159u8, 56u8, 227u8, 136u8, 4u8,
							45u8, 193u8, 72u8, 200u8, 164u8, 39u8, 207u8, 224u8, 124u8, 191u8,
							110u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
				pub fn submission_deposit(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Referenda",
						"SubmissionDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Maximum size of the referendum queue for a single track."]
				pub fn max_queued(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Referenda",
						"MaxQueued",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The number of blocks after submission that a referendum must begin being decided by."]
				#[doc = " Once this passes, then anyone may cancel the referendum."]
				pub fn undeciding_timeout(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Referenda",
						"UndecidingTimeout",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Quantization level for the referendum wakeup scheduler. A higher number will result in"]
				#[doc = " fewer storage reads/writes needed for smaller voters, but also result in delays to the"]
				#[doc = " automatic referendum status changes. Explicit servicing instructions are unaffected."]
				pub fn alarm_interval(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Referenda",
						"AlarmInterval",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Information concerning the different referendum tracks."]
				pub fn tracks(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::subxt::ext::subxt_core::alloc::vec::Vec<(
						::core::primitive::u16,
						runtime_types::pallet_referenda::types::TrackInfo<
							::core::primitive::u128,
							::core::primitive::u32,
						>,
					)>,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Referenda",
						"Tracks",
						[
							35u8, 226u8, 207u8, 234u8, 184u8, 139u8, 187u8, 184u8, 128u8, 199u8,
							227u8, 15u8, 31u8, 196u8, 5u8, 207u8, 138u8, 174u8, 130u8, 201u8,
							200u8, 113u8, 86u8, 93u8, 221u8, 243u8, 229u8, 24u8, 18u8, 150u8, 56u8,
							159u8,
						],
					)
				}
			}
		}
	}
	pub mod conviction_voting {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_conviction_voting::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_conviction_voting::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;"]
				#[doc = "otherwise it is a vote to keep the status quo."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `poll_index`: The index of the poll to vote for."]
				#[doc = "- `vote`: The vote configuration."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of polls the voter has voted on."]
				pub struct Vote {
					#[codec(compact)]
					pub poll_index: vote::PollIndex,
					pub vote: vote::Vote,
				}
				pub mod vote {
					use super::runtime_types;
					pub type PollIndex = ::core::primitive::u32;
					pub type Vote = runtime_types::pallet_conviction_voting::vote::AccountVote<
						::core::primitive::u128,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Vote {
					const PALLET: &'static str = "ConvictionVoting";
					const CALL: &'static str = "vote";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Delegate the voting power (with some given conviction) of the sending account for a"]
				#[doc = "particular class of polls."]
				#[doc = ""]
				#[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
				#[doc = "time appropriate for the conviction's lock period."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
				#[doc = "  - be delegating already; or"]
				#[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
				#[doc = "    through `reap_vote` or `unvote`)."]
				#[doc = ""]
				#[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
				#[doc = "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls"]
				#[doc = "  to this function are required."]
				#[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
				#[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
				#[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
				#[doc = "  be more than the account's current balance."]
				#[doc = ""]
				#[doc = "Emits `Delegated`."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of polls the voter delegating to has"]
				#[doc = "  voted on. Weight is initially charged as if maximum votes, but is refunded later."]
				pub struct Delegate {
					pub class: delegate::Class,
					pub to: delegate::To,
					pub conviction: delegate::Conviction,
					pub balance: delegate::Balance,
				}
				pub mod delegate {
					use super::runtime_types;
					pub type Class = ::core::primitive::u16;
					pub type To = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Conviction =
						runtime_types::pallet_conviction_voting::conviction::Conviction;
					pub type Balance = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Delegate {
					const PALLET: &'static str = "ConvictionVoting";
					const CALL: &'static str = "delegate";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Undelegate the voting power of the sending account for a particular class of polls."]
				#[doc = ""]
				#[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
				#[doc = "of the conviction with which the delegation was issued has passed."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
				#[doc = "currently delegating."]
				#[doc = ""]
				#[doc = "- `class`: The class of polls to remove the delegation from."]
				#[doc = ""]
				#[doc = "Emits `Undelegated`."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of polls the voter delegating to has"]
				#[doc = "  voted on. Weight is initially charged as if maximum votes, but is refunded later."]
				pub struct Undelegate {
					pub class: undelegate::Class,
				}
				pub mod undelegate {
					use super::runtime_types;
					pub type Class = ::core::primitive::u16;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Undelegate {
					const PALLET: &'static str = "ConvictionVoting";
					const CALL: &'static str = "undelegate";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove the lock caused by prior voting/delegating which has expired within a particular"]
				#[doc = "class."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `class`: The class of polls to unlock."]
				#[doc = "- `target`: The account to remove the lock on."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` with R number of vote of target."]
				pub struct Unlock {
					pub class: unlock::Class,
					pub target: unlock::Target,
				}
				pub mod unlock {
					use super::runtime_types;
					pub type Class = ::core::primitive::u16;
					pub type Target = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Unlock {
					const PALLET: &'static str = "ConvictionVoting";
					const CALL: &'static str = "unlock";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove a vote for a poll."]
				#[doc = ""]
				#[doc = "If:"]
				#[doc = "- the poll was cancelled, or"]
				#[doc = "- the poll is ongoing, or"]
				#[doc = "- the poll has ended such that"]
				#[doc = "  - the vote of the account was in opposition to the result; or"]
				#[doc = "  - there was no conviction to the account's vote; or"]
				#[doc = "  - the account made a split vote"]
				#[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
				#[doc = "funds being available."]
				#[doc = ""]
				#[doc = "If, however, the poll has ended and:"]
				#[doc = "- it finished corresponding to the vote of the account, and"]
				#[doc = "- the account made a standard vote with conviction, and"]
				#[doc = "- the lock period of the conviction is not over"]
				#[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
				#[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
				#[doc = "of both the amount locked and the time is it locked for)."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
				#[doc = "registered for poll `index`."]
				#[doc = ""]
				#[doc = "- `index`: The index of poll of the vote to be removed."]
				#[doc = "- `class`: Optional parameter, if given it indicates the class of the poll. For polls"]
				#[doc = "  which have finished or are cancelled, this must be `Some`."]
				#[doc = ""]
				#[doc = "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on."]
				#[doc = "  Weight is calculated for the maximum number of vote."]
				pub struct RemoveVote {
					pub class: remove_vote::Class,
					pub index: remove_vote::Index,
				}
				pub mod remove_vote {
					use super::runtime_types;
					pub type Class = ::core::option::Option<::core::primitive::u16>;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveVote {
					const PALLET: &'static str = "ConvictionVoting";
					const CALL: &'static str = "remove_vote";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Remove a vote for a poll."]
				#[doc = ""]
				#[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
				#[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
				#[doc = "either because the poll was cancelled, because the voter lost the poll or"]
				#[doc = "because the conviction period is over."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `target`: The account of the vote to be removed; this account must have voted for poll"]
				#[doc = "  `index`."]
				#[doc = "- `index`: The index of poll of the vote to be removed."]
				#[doc = "- `class`: The class of the poll."]
				#[doc = ""]
				#[doc = "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on."]
				#[doc = "  Weight is calculated for the maximum number of vote."]
				pub struct RemoveOtherVote {
					pub target: remove_other_vote::Target,
					pub class: remove_other_vote::Class,
					pub index: remove_other_vote::Index,
				}
				pub mod remove_other_vote {
					use super::runtime_types;
					pub type Target = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Class = ::core::primitive::u16;
					pub type Index = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveOtherVote {
					const PALLET: &'static str = "ConvictionVoting";
					const CALL: &'static str = "remove_other_vote";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;"]
				#[doc = "otherwise it is a vote to keep the status quo."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `poll_index`: The index of the poll to vote for."]
				#[doc = "- `vote`: The vote configuration."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of polls the voter has voted on."]
				pub fn vote(
					&self,
					poll_index: types::vote::PollIndex,
					vote: types::vote::Vote,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Vote> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ConvictionVoting",
						"vote",
						types::Vote { poll_index, vote },
						[
							57u8, 170u8, 177u8, 168u8, 158u8, 43u8, 87u8, 242u8, 176u8, 85u8,
							230u8, 64u8, 103u8, 239u8, 190u8, 6u8, 228u8, 165u8, 248u8, 77u8,
							231u8, 221u8, 186u8, 107u8, 249u8, 201u8, 226u8, 52u8, 129u8, 90u8,
							142u8, 159u8,
						],
					)
				}
				#[doc = "Delegate the voting power (with some given conviction) of the sending account for a"]
				#[doc = "particular class of polls."]
				#[doc = ""]
				#[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
				#[doc = "time appropriate for the conviction's lock period."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
				#[doc = "  - be delegating already; or"]
				#[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
				#[doc = "    through `reap_vote` or `unvote`)."]
				#[doc = ""]
				#[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
				#[doc = "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls"]
				#[doc = "  to this function are required."]
				#[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
				#[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
				#[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
				#[doc = "  be more than the account's current balance."]
				#[doc = ""]
				#[doc = "Emits `Delegated`."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of polls the voter delegating to has"]
				#[doc = "  voted on. Weight is initially charged as if maximum votes, but is refunded later."]
				pub fn delegate(
					&self,
					class: types::delegate::Class,
					to: types::delegate::To,
					conviction: types::delegate::Conviction,
					balance: types::delegate::Balance,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Delegate> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ConvictionVoting",
						"delegate",
						types::Delegate { class, to, conviction, balance },
						[
							72u8, 121u8, 108u8, 197u8, 6u8, 127u8, 240u8, 48u8, 195u8, 205u8, 4u8,
							163u8, 24u8, 104u8, 187u8, 59u8, 10u8, 192u8, 242u8, 254u8, 140u8,
							42u8, 152u8, 199u8, 119u8, 205u8, 146u8, 131u8, 84u8, 192u8, 232u8,
							81u8,
						],
					)
				}
				#[doc = "Undelegate the voting power of the sending account for a particular class of polls."]
				#[doc = ""]
				#[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
				#[doc = "of the conviction with which the delegation was issued has passed."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
				#[doc = "currently delegating."]
				#[doc = ""]
				#[doc = "- `class`: The class of polls to remove the delegation from."]
				#[doc = ""]
				#[doc = "Emits `Undelegated`."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` where R is the number of polls the voter delegating to has"]
				#[doc = "  voted on. Weight is initially charged as if maximum votes, but is refunded later."]
				pub fn undelegate(
					&self,
					class: types::undelegate::Class,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Undelegate> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ConvictionVoting",
						"undelegate",
						types::Undelegate { class },
						[
							140u8, 232u8, 6u8, 53u8, 228u8, 8u8, 131u8, 144u8, 65u8, 66u8, 245u8,
							247u8, 147u8, 135u8, 198u8, 57u8, 82u8, 212u8, 89u8, 46u8, 236u8,
							168u8, 200u8, 220u8, 93u8, 168u8, 101u8, 29u8, 110u8, 76u8, 67u8,
							181u8,
						],
					)
				}
				#[doc = "Remove the lock caused by prior voting/delegating which has expired within a particular"]
				#[doc = "class."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `class`: The class of polls to unlock."]
				#[doc = "- `target`: The account to remove the lock on."]
				#[doc = ""]
				#[doc = "Weight: `O(R)` with R number of vote of target."]
				pub fn unlock(
					&self,
					class: types::unlock::Class,
					target: types::unlock::Target,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Unlock> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ConvictionVoting",
						"unlock",
						types::Unlock { class, target },
						[
							144u8, 162u8, 27u8, 86u8, 133u8, 252u8, 118u8, 223u8, 152u8, 116u8,
							181u8, 159u8, 122u8, 73u8, 88u8, 171u8, 144u8, 15u8, 128u8, 194u8,
							69u8, 80u8, 11u8, 173u8, 43u8, 255u8, 52u8, 140u8, 180u8, 177u8, 142u8,
							75u8,
						],
					)
				}
				#[doc = "Remove a vote for a poll."]
				#[doc = ""]
				#[doc = "If:"]
				#[doc = "- the poll was cancelled, or"]
				#[doc = "- the poll is ongoing, or"]
				#[doc = "- the poll has ended such that"]
				#[doc = "  - the vote of the account was in opposition to the result; or"]
				#[doc = "  - there was no conviction to the account's vote; or"]
				#[doc = "  - the account made a split vote"]
				#[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
				#[doc = "funds being available."]
				#[doc = ""]
				#[doc = "If, however, the poll has ended and:"]
				#[doc = "- it finished corresponding to the vote of the account, and"]
				#[doc = "- the account made a standard vote with conviction, and"]
				#[doc = "- the lock period of the conviction is not over"]
				#[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
				#[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
				#[doc = "of both the amount locked and the time is it locked for)."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
				#[doc = "registered for poll `index`."]
				#[doc = ""]
				#[doc = "- `index`: The index of poll of the vote to be removed."]
				#[doc = "- `class`: Optional parameter, if given it indicates the class of the poll. For polls"]
				#[doc = "  which have finished or are cancelled, this must be `Some`."]
				#[doc = ""]
				#[doc = "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on."]
				#[doc = "  Weight is calculated for the maximum number of vote."]
				pub fn remove_vote(
					&self,
					class: types::remove_vote::Class,
					index: types::remove_vote::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveVote> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ConvictionVoting",
						"remove_vote",
						types::RemoveVote { class, index },
						[
							255u8, 108u8, 211u8, 146u8, 168u8, 231u8, 207u8, 44u8, 76u8, 24u8,
							235u8, 60u8, 23u8, 79u8, 192u8, 192u8, 46u8, 40u8, 134u8, 27u8, 125u8,
							114u8, 125u8, 247u8, 85u8, 102u8, 76u8, 159u8, 34u8, 167u8, 152u8,
							148u8,
						],
					)
				}
				#[doc = "Remove a vote for a poll."]
				#[doc = ""]
				#[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
				#[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
				#[doc = "either because the poll was cancelled, because the voter lost the poll or"]
				#[doc = "because the conviction period is over."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be _Signed_."]
				#[doc = ""]
				#[doc = "- `target`: The account of the vote to be removed; this account must have voted for poll"]
				#[doc = "  `index`."]
				#[doc = "- `index`: The index of poll of the vote to be removed."]
				#[doc = "- `class`: The class of the poll."]
				#[doc = ""]
				#[doc = "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on."]
				#[doc = "  Weight is calculated for the maximum number of vote."]
				pub fn remove_other_vote(
					&self,
					target: types::remove_other_vote::Target,
					class: types::remove_other_vote::Class,
					index: types::remove_other_vote::Index,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveOtherVote>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"ConvictionVoting",
						"remove_other_vote",
						types::RemoveOtherVote { target, class, index },
						[
							83u8, 50u8, 64u8, 13u8, 168u8, 112u8, 177u8, 133u8, 205u8, 85u8, 178u8,
							197u8, 41u8, 111u8, 241u8, 32u8, 206u8, 12u8, 210u8, 145u8, 119u8,
							92u8, 24u8, 84u8, 172u8, 110u8, 175u8, 44u8, 124u8, 18u8, 176u8, 124u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_conviction_voting::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An account has delegated their vote to another account. \\[who, target\\]"]
			pub struct Delegated(pub delegated::Field0, pub delegated::Field1);
			pub mod delegated {
				use super::runtime_types;
				pub type Field0 = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Field1 = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Delegated {
				const PALLET: &'static str = "ConvictionVoting";
				const EVENT: &'static str = "Delegated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An \\[account\\] has cancelled a previous delegation operation."]
			pub struct Undelegated(pub undelegated::Field0);
			pub mod undelegated {
				use super::runtime_types;
				pub type Field0 = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Undelegated {
				const PALLET: &'static str = "ConvictionVoting";
				const EVENT: &'static str = "Undelegated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod voting_for {
					use super::runtime_types;
					pub type VotingFor = runtime_types::pallet_conviction_voting::vote::Voting<
						::core::primitive::u128,
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
						::core::primitive::u32,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
					pub type Param1 = ::core::primitive::u16;
				}
				pub mod class_locks_for {
					use super::runtime_types;
					pub type ClassLocksFor =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							::core::primitive::u16,
							::core::primitive::u128,
						)>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " All voting for a particular voter in a particular voting class. We store the balance for the"]
				#[doc = " number of votes that we have recorded."]
				pub fn voting_for_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::voting_for::VotingFor,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ConvictionVoting",
						"VotingFor",
						(),
						[
							76u8, 63u8, 153u8, 193u8, 39u8, 137u8, 186u8, 29u8, 202u8, 56u8, 169u8,
							56u8, 103u8, 138u8, 192u8, 18u8, 179u8, 114u8, 56u8, 121u8, 197u8,
							12u8, 29u8, 239u8, 220u8, 231u8, 24u8, 46u8, 134u8, 99u8, 53u8, 206u8,
						],
					)
				}
				#[doc = " All voting for a particular voter in a particular voting class. We store the balance for the"]
				#[doc = " number of votes that we have recorded."]
				pub fn voting_for_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::voting_for::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::voting_for::Param0,
					>,
					types::voting_for::VotingFor,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ConvictionVoting",
						"VotingFor",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							76u8, 63u8, 153u8, 193u8, 39u8, 137u8, 186u8, 29u8, 202u8, 56u8, 169u8,
							56u8, 103u8, 138u8, 192u8, 18u8, 179u8, 114u8, 56u8, 121u8, 197u8,
							12u8, 29u8, 239u8, 220u8, 231u8, 24u8, 46u8, 134u8, 99u8, 53u8, 206u8,
						],
					)
				}
				#[doc = " All voting for a particular voter in a particular voting class. We store the balance for the"]
				#[doc = " number of votes that we have recorded."]
				pub fn voting_for(
					&self,
					_0: impl ::core::borrow::Borrow<types::voting_for::Param0>,
					_1: impl ::core::borrow::Borrow<types::voting_for::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::voting_for::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::voting_for::Param1,
						>,
					),
					types::voting_for::VotingFor,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ConvictionVoting",
						"VotingFor",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							76u8, 63u8, 153u8, 193u8, 39u8, 137u8, 186u8, 29u8, 202u8, 56u8, 169u8,
							56u8, 103u8, 138u8, 192u8, 18u8, 179u8, 114u8, 56u8, 121u8, 197u8,
							12u8, 29u8, 239u8, 220u8, 231u8, 24u8, 46u8, 134u8, 99u8, 53u8, 206u8,
						],
					)
				}
				#[doc = " The voting classes which have a non-zero lock requirement and the lock amounts which they"]
				#[doc = " require. The actual amount locked on behalf of this pallet should always be the maximum of"]
				#[doc = " this list."]
				pub fn class_locks_for_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::class_locks_for::ClassLocksFor,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ConvictionVoting",
						"ClassLocksFor",
						(),
						[
							74u8, 74u8, 8u8, 82u8, 215u8, 61u8, 13u8, 9u8, 44u8, 222u8, 33u8,
							245u8, 195u8, 124u8, 6u8, 174u8, 65u8, 245u8, 71u8, 42u8, 47u8, 46u8,
							164u8, 231u8, 11u8, 245u8, 115u8, 207u8, 209u8, 137u8, 90u8, 6u8,
						],
					)
				}
				#[doc = " The voting classes which have a non-zero lock requirement and the lock amounts which they"]
				#[doc = " require. The actual amount locked on behalf of this pallet should always be the maximum of"]
				#[doc = " this list."]
				pub fn class_locks_for(
					&self,
					_0: impl ::core::borrow::Borrow<types::class_locks_for::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::class_locks_for::Param0,
					>,
					types::class_locks_for::ClassLocksFor,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"ConvictionVoting",
						"ClassLocksFor",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							74u8, 74u8, 8u8, 82u8, 215u8, 61u8, 13u8, 9u8, 44u8, 222u8, 33u8,
							245u8, 195u8, 124u8, 6u8, 174u8, 65u8, 245u8, 71u8, 42u8, 47u8, 46u8,
							164u8, 231u8, 11u8, 245u8, 115u8, 207u8, 209u8, 137u8, 90u8, 6u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The maximum number of concurrent votes an account may have."]
				#[doc = ""]
				#[doc = " Also used to compute weight, an overly large value can lead to extrinsics with large"]
				#[doc = " weight estimation: see `delegate` for instance."]
				pub fn max_votes(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"ConvictionVoting",
						"MaxVotes",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The minimum period of vote locking."]
				#[doc = ""]
				#[doc = " It should be no shorter than enactment period to ensure that in the case of an approval,"]
				#[doc = " those successful voters are locked into the consequences that their votes entail."]
				pub fn vote_locking_period(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"ConvictionVoting",
						"VoteLockingPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod open_gov_balances {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_balances::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_balances::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer some liquid free balance to another account."]
				#[doc = ""]
				#[doc = "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver."]
				#[doc = "If the sender's account is below the existential deposit as a result"]
				#[doc = "of the transfer, the account will be reaped."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
				pub struct TransferAllowDeath {
					pub dest: transfer_allow_death::Dest,
					#[codec(compact)]
					pub value: transfer_allow_death::Value,
				}
				pub mod transfer_allow_death {
					use super::runtime_types;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Value = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferAllowDeath {
					const PALLET: &'static str = "OpenGovBalances";
					const CALL: &'static str = "transfer_allow_death";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the regular balance of a given account; it also takes a reserved balance but this"]
				#[doc = "must be the same as the account's current reserved balance."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call is `root`."]
				#[doc = ""]
				#[doc = "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."]
				pub struct SetBalanceDeprecated {
					pub who: set_balance_deprecated::Who,
					#[codec(compact)]
					pub new_free: set_balance_deprecated::NewFree,
					#[codec(compact)]
					pub old_reserved: set_balance_deprecated::OldReserved,
				}
				pub mod set_balance_deprecated {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type NewFree = ::core::primitive::u128;
					pub type OldReserved = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetBalanceDeprecated {
					const PALLET: &'static str = "OpenGovBalances";
					const CALL: &'static str = "set_balance_deprecated";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Exactly as `transfer_allow_death`, except the origin must be root and the source account"]
				#[doc = "may be specified."]
				pub struct ForceTransfer {
					pub source: force_transfer::Source,
					pub dest: force_transfer::Dest,
					#[codec(compact)]
					pub value: force_transfer::Value,
				}
				pub mod force_transfer {
					use super::runtime_types;
					pub type Source = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Value = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceTransfer {
					const PALLET: &'static str = "OpenGovBalances";
					const CALL: &'static str = "force_transfer";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not"]
				#[doc = "kill the origin account."]
				#[doc = ""]
				#[doc = "99% of the time you want [`transfer_allow_death`] instead."]
				#[doc = ""]
				#[doc = "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"]
				pub struct TransferKeepAlive {
					pub dest: transfer_keep_alive::Dest,
					#[codec(compact)]
					pub value: transfer_keep_alive::Value,
				}
				pub mod transfer_keep_alive {
					use super::runtime_types;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Value = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferKeepAlive {
					const PALLET: &'static str = "OpenGovBalances";
					const CALL: &'static str = "transfer_keep_alive";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Transfer the entire transferable balance from the caller account."]
				#[doc = ""]
				#[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
				#[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
				#[doc = "transferred by this function. To ensure that this function results in a killed account,"]
				#[doc = "you might need to prepare the account by removing any reference counters, storage"]
				#[doc = "deposits, etc..."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be Signed."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
				#[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
				#[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
				#[doc = "  keep the sender account alive (true)."]
				pub struct TransferAll {
					pub dest: transfer_all::Dest,
					pub keep_alive: transfer_all::KeepAlive,
				}
				pub mod transfer_all {
					use super::runtime_types;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type KeepAlive = ::core::primitive::bool;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferAll {
					const PALLET: &'static str = "OpenGovBalances";
					const CALL: &'static str = "transfer_all";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Unreserve some balance from a user by force."]
				#[doc = ""]
				#[doc = "Can only be called by ROOT."]
				pub struct ForceUnreserve {
					pub who: force_unreserve::Who,
					pub amount: force_unreserve::Amount,
				}
				pub mod force_unreserve {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceUnreserve {
					const PALLET: &'static str = "OpenGovBalances";
					const CALL: &'static str = "force_unreserve";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Upgrade a specified account."]
				#[doc = ""]
				#[doc = "- `origin`: Must be `Signed`."]
				#[doc = "- `who`: The account to be upgraded."]
				#[doc = ""]
				#[doc = "This will waive the transaction fee if at least all but 10% of the accounts needed to"]
				#[doc = "be upgraded. (We let some not have to be upgraded just in order to allow for the"]
				#[doc = "possibililty of churn)."]
				pub struct UpgradeAccounts {
					pub who: upgrade_accounts::Who,
				}
				pub mod upgrade_accounts {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpgradeAccounts {
					const PALLET: &'static str = "OpenGovBalances";
					const CALL: &'static str = "upgrade_accounts";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Alias for `transfer_allow_death`, provided only for name-wise compatibility."]
				#[doc = ""]
				#[doc = "WARNING: DEPRECATED! Will be released in approximately 3 months."]
				pub struct Transfer {
					pub dest: transfer::Dest,
					#[codec(compact)]
					pub value: transfer::Value,
				}
				pub mod transfer {
					use super::runtime_types;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type Value = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Transfer {
					const PALLET: &'static str = "OpenGovBalances";
					const CALL: &'static str = "transfer";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set the regular balance of a given account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call is `root`."]
				pub struct ForceSetBalance {
					pub who: force_set_balance::Who,
					#[codec(compact)]
					pub new_free: force_set_balance::NewFree,
				}
				pub mod force_set_balance {
					use super::runtime_types;
					pub type Who = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type NewFree = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceSetBalance {
					const PALLET: &'static str = "OpenGovBalances";
					const CALL: &'static str = "force_set_balance";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Transfer some liquid free balance to another account."]
				#[doc = ""]
				#[doc = "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver."]
				#[doc = "If the sender's account is below the existential deposit as a result"]
				#[doc = "of the transfer, the account will be reaped."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
				pub fn transfer_allow_death(
					&self,
					dest: types::transfer_allow_death::Dest,
					value: types::transfer_allow_death::Value,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferAllowDeath>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"OpenGovBalances",
						"transfer_allow_death",
						types::TransferAllowDeath { dest, value },
						[
							24u8, 176u8, 111u8, 60u8, 103u8, 161u8, 139u8, 10u8, 197u8, 207u8,
							140u8, 212u8, 166u8, 50u8, 47u8, 150u8, 83u8, 180u8, 86u8, 4u8, 159u8,
							84u8, 195u8, 71u8, 204u8, 109u8, 233u8, 23u8, 10u8, 156u8, 209u8,
							153u8,
						],
					)
				}
				#[doc = "Set the regular balance of a given account; it also takes a reserved balance but this"]
				#[doc = "must be the same as the account's current reserved balance."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call is `root`."]
				#[doc = ""]
				#[doc = "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."]
				pub fn set_balance_deprecated(
					&self,
					who: types::set_balance_deprecated::Who,
					new_free: types::set_balance_deprecated::NewFree,
					old_reserved: types::set_balance_deprecated::OldReserved,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetBalanceDeprecated>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"OpenGovBalances",
						"set_balance_deprecated",
						types::SetBalanceDeprecated { who, new_free, old_reserved },
						[
							37u8, 252u8, 153u8, 117u8, 175u8, 86u8, 206u8, 115u8, 114u8, 75u8,
							226u8, 183u8, 222u8, 208u8, 208u8, 16u8, 90u8, 82u8, 101u8, 241u8,
							82u8, 161u8, 116u8, 175u8, 200u8, 113u8, 154u8, 220u8, 224u8, 245u8,
							112u8, 215u8,
						],
					)
				}
				#[doc = "Exactly as `transfer_allow_death`, except the origin must be root and the source account"]
				#[doc = "may be specified."]
				pub fn force_transfer(
					&self,
					source: types::force_transfer::Source,
					dest: types::force_transfer::Dest,
					value: types::force_transfer::Value,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceTransfer>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"OpenGovBalances",
						"force_transfer",
						types::ForceTransfer { source, dest, value },
						[
							23u8, 7u8, 44u8, 138u8, 180u8, 140u8, 216u8, 52u8, 198u8, 3u8, 225u8,
							116u8, 47u8, 26u8, 61u8, 163u8, 55u8, 64u8, 113u8, 250u8, 192u8, 16u8,
							228u8, 228u8, 85u8, 255u8, 100u8, 128u8, 245u8, 132u8, 84u8, 186u8,
						],
					)
				}
				#[doc = "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not"]
				#[doc = "kill the origin account."]
				#[doc = ""]
				#[doc = "99% of the time you want [`transfer_allow_death`] instead."]
				#[doc = ""]
				#[doc = "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"]
				pub fn transfer_keep_alive(
					&self,
					dest: types::transfer_keep_alive::Dest,
					value: types::transfer_keep_alive::Value,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferKeepAlive>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"OpenGovBalances",
						"transfer_keep_alive",
						types::TransferKeepAlive { dest, value },
						[
							196u8, 51u8, 121u8, 239u8, 68u8, 97u8, 174u8, 26u8, 21u8, 9u8, 111u8,
							224u8, 189u8, 35u8, 106u8, 30u8, 83u8, 184u8, 234u8, 174u8, 27u8,
							197u8, 40u8, 126u8, 197u8, 92u8, 201u8, 253u8, 144u8, 175u8, 8u8,
							215u8,
						],
					)
				}
				#[doc = "Transfer the entire transferable balance from the caller account."]
				#[doc = ""]
				#[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
				#[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
				#[doc = "transferred by this function. To ensure that this function results in a killed account,"]
				#[doc = "you might need to prepare the account by removing any reference counters, storage"]
				#[doc = "deposits, etc..."]
				#[doc = ""]
				#[doc = "The dispatch origin of this call must be Signed."]
				#[doc = ""]
				#[doc = "- `dest`: The recipient of the transfer."]
				#[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
				#[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
				#[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
				#[doc = "  keep the sender account alive (true)."]
				pub fn transfer_all(
					&self,
					dest: types::transfer_all::Dest,
					keep_alive: types::transfer_all::KeepAlive,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferAll> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"OpenGovBalances",
						"transfer_all",
						types::TransferAll { dest, keep_alive },
						[
							13u8, 46u8, 127u8, 231u8, 179u8, 61u8, 45u8, 188u8, 195u8, 251u8,
							146u8, 25u8, 138u8, 19u8, 52u8, 112u8, 148u8, 241u8, 134u8, 145u8,
							97u8, 9u8, 199u8, 172u8, 229u8, 239u8, 67u8, 185u8, 128u8, 36u8, 134u8,
							122u8,
						],
					)
				}
				#[doc = "Unreserve some balance from a user by force."]
				#[doc = ""]
				#[doc = "Can only be called by ROOT."]
				pub fn force_unreserve(
					&self,
					who: types::force_unreserve::Who,
					amount: types::force_unreserve::Amount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceUnreserve>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"OpenGovBalances",
						"force_unreserve",
						types::ForceUnreserve { who, amount },
						[
							176u8, 105u8, 20u8, 111u8, 49u8, 253u8, 22u8, 225u8, 0u8, 81u8, 221u8,
							39u8, 62u8, 22u8, 95u8, 12u8, 21u8, 251u8, 179u8, 31u8, 104u8, 23u8,
							34u8, 216u8, 119u8, 205u8, 133u8, 196u8, 182u8, 113u8, 36u8, 93u8,
						],
					)
				}
				#[doc = "Upgrade a specified account."]
				#[doc = ""]
				#[doc = "- `origin`: Must be `Signed`."]
				#[doc = "- `who`: The account to be upgraded."]
				#[doc = ""]
				#[doc = "This will waive the transaction fee if at least all but 10% of the accounts needed to"]
				#[doc = "be upgraded. (We let some not have to be upgraded just in order to allow for the"]
				#[doc = "possibililty of churn)."]
				pub fn upgrade_accounts(
					&self,
					who: types::upgrade_accounts::Who,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpgradeAccounts>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"OpenGovBalances",
						"upgrade_accounts",
						types::UpgradeAccounts { who },
						[
							66u8, 200u8, 179u8, 104u8, 65u8, 2u8, 101u8, 56u8, 130u8, 161u8, 224u8,
							233u8, 255u8, 124u8, 70u8, 122u8, 8u8, 49u8, 103u8, 178u8, 68u8, 47u8,
							214u8, 166u8, 217u8, 116u8, 178u8, 50u8, 212u8, 164u8, 98u8, 226u8,
						],
					)
				}
				#[doc = "Alias for `transfer_allow_death`, provided only for name-wise compatibility."]
				#[doc = ""]
				#[doc = "WARNING: DEPRECATED! Will be released in approximately 3 months."]
				pub fn transfer(
					&self,
					dest: types::transfer::Dest,
					value: types::transfer::Value,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Transfer> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"OpenGovBalances",
						"transfer",
						types::Transfer { dest, value },
						[
							228u8, 253u8, 44u8, 208u8, 33u8, 44u8, 33u8, 42u8, 114u8, 57u8, 107u8,
							6u8, 127u8, 116u8, 15u8, 205u8, 122u8, 172u8, 64u8, 108u8, 169u8,
							241u8, 190u8, 221u8, 248u8, 171u8, 236u8, 129u8, 120u8, 147u8, 49u8,
							95u8,
						],
					)
				}
				#[doc = "Set the regular balance of a given account."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call is `root`."]
				pub fn force_set_balance(
					&self,
					who: types::force_set_balance::Who,
					new_free: types::force_set_balance::NewFree,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceSetBalance>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"OpenGovBalances",
						"force_set_balance",
						types::ForceSetBalance { who, new_free },
						[
							101u8, 181u8, 86u8, 32u8, 61u8, 75u8, 34u8, 164u8, 142u8, 250u8, 7u8,
							218u8, 125u8, 57u8, 98u8, 222u8, 147u8, 26u8, 115u8, 185u8, 190u8,
							172u8, 12u8, 212u8, 132u8, 80u8, 253u8, 69u8, 26u8, 116u8, 197u8,
							203u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_balances::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An account was created with some free balance."]
			pub struct Endowed {
				pub account: endowed::Account,
				pub free_balance: endowed::FreeBalance,
			}
			pub mod endowed {
				use super::runtime_types;
				pub type Account = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type FreeBalance = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Endowed {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Endowed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
			#[doc = "resulting in an outright loss."]
			pub struct DustLost {
				pub account: dust_lost::Account,
				pub amount: dust_lost::Amount,
			}
			pub mod dust_lost {
				use super::runtime_types;
				pub type Account = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for DustLost {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "DustLost";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Transfer succeeded."]
			pub struct Transfer {
				pub from: transfer::From,
				pub to: transfer::To,
				pub amount: transfer::Amount,
			}
			pub mod transfer {
				use super::runtime_types;
				pub type From = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type To = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Transfer {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Transfer";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A balance was set by root."]
			pub struct BalanceSet {
				pub who: balance_set::Who,
				pub free: balance_set::Free,
			}
			pub mod balance_set {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Free = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for BalanceSet {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "BalanceSet";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was reserved (moved from free to reserved)."]
			pub struct Reserved {
				pub who: reserved::Who,
				pub amount: reserved::Amount,
			}
			pub mod reserved {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Reserved {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Reserved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was unreserved (moved from reserved to free)."]
			pub struct Unreserved {
				pub who: unreserved::Who,
				pub amount: unreserved::Amount,
			}
			pub mod unreserved {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Unreserved {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Unreserved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was moved from the reserve of the first account to the second account."]
			#[doc = "Final argument indicates the destination balance type."]
			pub struct ReserveRepatriated {
				pub from: reserve_repatriated::From,
				pub to: reserve_repatriated::To,
				pub amount: reserve_repatriated::Amount,
				pub destination_status: reserve_repatriated::DestinationStatus,
			}
			pub mod reserve_repatriated {
				use super::runtime_types;
				pub type From = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type To = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
				pub type DestinationStatus =
					runtime_types::frame_support::traits::tokens::misc::BalanceStatus;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ReserveRepatriated {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "ReserveRepatriated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some amount was deposited (e.g. for transaction fees)."]
			pub struct Deposit {
				pub who: deposit::Who,
				pub amount: deposit::Amount,
			}
			pub mod deposit {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Deposit {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Deposit";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
			pub struct Withdraw {
				pub who: withdraw::Who,
				pub amount: withdraw::Amount,
			}
			pub mod withdraw {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Withdraw {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Withdraw";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
			pub struct Slashed {
				pub who: slashed::Who,
				pub amount: slashed::Amount,
			}
			pub mod slashed {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Slashed {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Slashed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some amount was minted into an account."]
			pub struct Minted {
				pub who: minted::Who,
				pub amount: minted::Amount,
			}
			pub mod minted {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Minted {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Minted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some amount was burned from an account."]
			pub struct Burned {
				pub who: burned::Who,
				pub amount: burned::Amount,
			}
			pub mod burned {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Burned {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Burned";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some amount was suspended from an account (it can be restored later)."]
			pub struct Suspended {
				pub who: suspended::Who,
				pub amount: suspended::Amount,
			}
			pub mod suspended {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Suspended {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Suspended";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some amount was restored into an account."]
			pub struct Restored {
				pub who: restored::Who,
				pub amount: restored::Amount,
			}
			pub mod restored {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Restored {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Restored";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An account was upgraded."]
			pub struct Upgraded {
				pub who: upgraded::Who,
			}
			pub mod upgraded {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Upgraded {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Upgraded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Total issuance was increased by `amount`, creating a credit to be balanced."]
			pub struct Issued {
				pub amount: issued::Amount,
			}
			pub mod issued {
				use super::runtime_types;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Issued {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Issued";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Total issuance was decreased by `amount`, creating a debt to be balanced."]
			pub struct Rescinded {
				pub amount: rescinded::Amount,
			}
			pub mod rescinded {
				use super::runtime_types;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Rescinded {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Rescinded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was locked."]
			pub struct Locked {
				pub who: locked::Who,
				pub amount: locked::Amount,
			}
			pub mod locked {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Locked {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Locked";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was unlocked."]
			pub struct Unlocked {
				pub who: unlocked::Who,
				pub amount: unlocked::Amount,
			}
			pub mod unlocked {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Unlocked {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Unlocked";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was frozen."]
			pub struct Frozen {
				pub who: frozen::Who,
				pub amount: frozen::Amount,
			}
			pub mod frozen {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Frozen {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Frozen";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Some balance was thawed."]
			pub struct Thawed {
				pub who: thawed::Who,
				pub amount: thawed::Amount,
			}
			pub mod thawed {
				use super::runtime_types;
				pub type Who = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Thawed {
				const PALLET: &'static str = "OpenGovBalances";
				const EVENT: &'static str = "Thawed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod total_issuance {
					use super::runtime_types;
					pub type TotalIssuance = ::core::primitive::u128;
				}
				pub mod inactive_issuance {
					use super::runtime_types;
					pub type InactiveIssuance = ::core::primitive::u128;
				}
				pub mod account {
					use super::runtime_types;
					pub type Account =
						runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod locks {
					use super::runtime_types;
					pub type Locks =
						runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
							runtime_types::pallet_balances::types::BalanceLock<
								::core::primitive::u128,
							>,
						>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod reserves {
					use super::runtime_types;
					pub type Reserves = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_balances::types::ReserveData<
							[::core::primitive::u8; 8usize],
							::core::primitive::u128,
						>,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod holds {
					use super::runtime_types;
					pub type Holds = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_balances::types::IdAmount<
							(),
							::core::primitive::u128,
						>,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod freezes {
					use super::runtime_types;
					pub type Freezes = runtime_types::bounded_collections::bounded_vec::BoundedVec<
						runtime_types::pallet_balances::types::IdAmount<
							[::core::primitive::u8; 8usize],
							::core::primitive::u128,
						>,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The total units issued in the system."]
				pub fn total_issuance(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::total_issuance::TotalIssuance,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"OpenGovBalances",
						"TotalIssuance",
						(),
						[
							116u8, 70u8, 119u8, 194u8, 69u8, 37u8, 116u8, 206u8, 171u8, 70u8,
							171u8, 210u8, 226u8, 111u8, 184u8, 204u8, 206u8, 11u8, 68u8, 72u8,
							255u8, 19u8, 194u8, 11u8, 27u8, 194u8, 81u8, 204u8, 59u8, 224u8, 202u8,
							185u8,
						],
					)
				}
				#[doc = " The total units of outstanding deactivated balance in the system."]
				pub fn inactive_issuance(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::inactive_issuance::InactiveIssuance,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"OpenGovBalances",
						"InactiveIssuance",
						(),
						[
							212u8, 185u8, 19u8, 50u8, 250u8, 72u8, 173u8, 50u8, 4u8, 104u8, 161u8,
							249u8, 77u8, 247u8, 204u8, 248u8, 11u8, 18u8, 57u8, 4u8, 82u8, 110u8,
							30u8, 216u8, 16u8, 37u8, 87u8, 67u8, 189u8, 235u8, 214u8, 155u8,
						],
					)
				}
				#[doc = " The Balances pallet example of storing the balance of an account."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " You can also store the balance of an account in the `System` pallet."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "   type AccountStore = System"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
				#[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
				#[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
				#[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
				pub fn account_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::account::Account,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"OpenGovBalances",
						"Account",
						(),
						[
							213u8, 38u8, 200u8, 69u8, 218u8, 0u8, 112u8, 181u8, 160u8, 23u8, 96u8,
							90u8, 3u8, 88u8, 126u8, 22u8, 103u8, 74u8, 64u8, 69u8, 29u8, 247u8,
							18u8, 17u8, 234u8, 143u8, 189u8, 22u8, 247u8, 194u8, 154u8, 249u8,
						],
					)
				}
				#[doc = " The Balances pallet example of storing the balance of an account."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " You can also store the balance of an account in the `System` pallet."]
				#[doc = ""]
				#[doc = " # Example"]
				#[doc = ""]
				#[doc = " ```nocompile"]
				#[doc = "  impl pallet_balances::Config for Runtime {"]
				#[doc = "   type AccountStore = System"]
				#[doc = "  }"]
				#[doc = " ```"]
				#[doc = ""]
				#[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
				#[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
				#[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
				#[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
				pub fn account(
					&self,
					_0: impl ::core::borrow::Borrow<types::account::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::account::Param0,
					>,
					types::account::Account,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"OpenGovBalances",
						"Account",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							213u8, 38u8, 200u8, 69u8, 218u8, 0u8, 112u8, 181u8, 160u8, 23u8, 96u8,
							90u8, 3u8, 88u8, 126u8, 22u8, 103u8, 74u8, 64u8, 69u8, 29u8, 247u8,
							18u8, 17u8, 234u8, 143u8, 189u8, 22u8, 247u8, 194u8, 154u8, 249u8,
						],
					)
				}
				#[doc = " Any liquidity locks on some account balances."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::locks::Locks,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"OpenGovBalances",
						"Locks",
						(),
						[
							10u8, 223u8, 55u8, 0u8, 249u8, 69u8, 168u8, 41u8, 75u8, 35u8, 120u8,
							167u8, 18u8, 132u8, 9u8, 20u8, 91u8, 51u8, 27u8, 69u8, 136u8, 187u8,
							13u8, 220u8, 163u8, 122u8, 26u8, 141u8, 174u8, 249u8, 85u8, 37u8,
						],
					)
				}
				#[doc = " Any liquidity locks on some account balances."]
				#[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
				pub fn locks(
					&self,
					_0: impl ::core::borrow::Borrow<types::locks::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::locks::Param0,
					>,
					types::locks::Locks,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"OpenGovBalances",
						"Locks",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							10u8, 223u8, 55u8, 0u8, 249u8, 69u8, 168u8, 41u8, 75u8, 35u8, 120u8,
							167u8, 18u8, 132u8, 9u8, 20u8, 91u8, 51u8, 27u8, 69u8, 136u8, 187u8,
							13u8, 220u8, 163u8, 122u8, 26u8, 141u8, 174u8, 249u8, 85u8, 37u8,
						],
					)
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::reserves::Reserves,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"OpenGovBalances",
						"Reserves",
						(),
						[
							112u8, 10u8, 241u8, 77u8, 64u8, 187u8, 106u8, 159u8, 13u8, 153u8,
							140u8, 178u8, 182u8, 50u8, 1u8, 55u8, 149u8, 92u8, 196u8, 229u8, 170u8,
							106u8, 193u8, 88u8, 255u8, 244u8, 2u8, 193u8, 62u8, 235u8, 204u8, 91u8,
						],
					)
				}
				#[doc = " Named reserves on some account balances."]
				pub fn reserves(
					&self,
					_0: impl ::core::borrow::Borrow<types::reserves::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::reserves::Param0,
					>,
					types::reserves::Reserves,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"OpenGovBalances",
						"Reserves",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							112u8, 10u8, 241u8, 77u8, 64u8, 187u8, 106u8, 159u8, 13u8, 153u8,
							140u8, 178u8, 182u8, 50u8, 1u8, 55u8, 149u8, 92u8, 196u8, 229u8, 170u8,
							106u8, 193u8, 88u8, 255u8, 244u8, 2u8, 193u8, 62u8, 235u8, 204u8, 91u8,
						],
					)
				}
				#[doc = " Holds on account balances."]
				pub fn holds_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::holds::Holds,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"OpenGovBalances",
						"Holds",
						(),
						[
							53u8, 126u8, 215u8, 237u8, 42u8, 223u8, 188u8, 150u8, 230u8, 107u8,
							95u8, 24u8, 26u8, 235u8, 158u8, 149u8, 193u8, 191u8, 10u8, 194u8,
							231u8, 59u8, 35u8, 167u8, 186u8, 89u8, 43u8, 126u8, 215u8, 117u8, 1u8,
							202u8,
						],
					)
				}
				#[doc = " Holds on account balances."]
				pub fn holds(
					&self,
					_0: impl ::core::borrow::Borrow<types::holds::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::holds::Param0,
					>,
					types::holds::Holds,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"OpenGovBalances",
						"Holds",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							53u8, 126u8, 215u8, 237u8, 42u8, 223u8, 188u8, 150u8, 230u8, 107u8,
							95u8, 24u8, 26u8, 235u8, 158u8, 149u8, 193u8, 191u8, 10u8, 194u8,
							231u8, 59u8, 35u8, 167u8, 186u8, 89u8, 43u8, 126u8, 215u8, 117u8, 1u8,
							202u8,
						],
					)
				}
				#[doc = " Freeze locks on account balances."]
				pub fn freezes_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::freezes::Freezes,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"OpenGovBalances",
						"Freezes",
						(),
						[
							248u8, 43u8, 66u8, 34u8, 209u8, 33u8, 179u8, 61u8, 54u8, 4u8, 118u8,
							114u8, 107u8, 178u8, 16u8, 130u8, 172u8, 144u8, 106u8, 151u8, 233u8,
							14u8, 157u8, 210u8, 94u8, 67u8, 252u8, 189u8, 216u8, 66u8, 170u8,
							119u8,
						],
					)
				}
				#[doc = " Freeze locks on account balances."]
				pub fn freezes(
					&self,
					_0: impl ::core::borrow::Borrow<types::freezes::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::freezes::Param0,
					>,
					types::freezes::Freezes,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"OpenGovBalances",
						"Freezes",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							248u8, 43u8, 66u8, 34u8, 209u8, 33u8, 179u8, 61u8, 54u8, 4u8, 118u8,
							114u8, 107u8, 178u8, 16u8, 130u8, 172u8, 144u8, 106u8, 151u8, 233u8,
							14u8, 157u8, 210u8, 94u8, 67u8, 252u8, 189u8, 216u8, 66u8, 170u8,
							119u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!"]
				#[doc = ""]
				#[doc = " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for"]
				#[doc = " this pallet. However, you do so at your own risk: this will open up a major DoS vector."]
				#[doc = " In case you have multiple sources of provider references, you may also get unexpected"]
				#[doc = " behaviour if you set this to zero."]
				#[doc = ""]
				#[doc = " Bottom line: Do yourself a favour and make it at least one!"]
				pub fn existential_deposit(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"OpenGovBalances",
						"ExistentialDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " The maximum number of locks that should exist on an account."]
				#[doc = " Not strictly enforced, but used for weight estimation."]
				pub fn max_locks(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"OpenGovBalances",
						"MaxLocks",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of named reserves that can exist on an account."]
				pub fn max_reserves(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"OpenGovBalances",
						"MaxReserves",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of holds that can exist on an account at any time."]
				pub fn max_holds(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"OpenGovBalances",
						"MaxHolds",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum number of individual freeze locks that can exist on an account at any time."]
				pub fn max_freezes(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"OpenGovBalances",
						"MaxFreezes",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod origins {
		use super::{root_mod, runtime_types};
	}
	pub mod whitelist {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_whitelist::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_whitelist::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct WhitelistCall {
					pub call_hash: whitelist_call::CallHash,
				}
				pub mod whitelist_call {
					use super::runtime_types;
					pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for WhitelistCall {
					const PALLET: &'static str = "Whitelist";
					const CALL: &'static str = "whitelist_call";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct RemoveWhitelistedCall {
					pub call_hash: remove_whitelisted_call::CallHash,
				}
				pub mod remove_whitelisted_call {
					use super::runtime_types;
					pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveWhitelistedCall {
					const PALLET: &'static str = "Whitelist";
					const CALL: &'static str = "remove_whitelisted_call";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct DispatchWhitelistedCall {
					pub call_hash: dispatch_whitelisted_call::CallHash,
					pub call_encoded_len: dispatch_whitelisted_call::CallEncodedLen,
					pub call_weight_witness: dispatch_whitelisted_call::CallWeightWitness,
				}
				pub mod dispatch_whitelisted_call {
					use super::runtime_types;
					pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
					pub type CallEncodedLen = ::core::primitive::u32;
					pub type CallWeightWitness = runtime_types::sp_weights::weight_v2::Weight;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for DispatchWhitelistedCall {
					const PALLET: &'static str = "Whitelist";
					const CALL: &'static str = "dispatch_whitelisted_call";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct DispatchWhitelistedCallWithPreimage {
					pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<
						dispatch_whitelisted_call_with_preimage::Call,
					>,
				}
				pub mod dispatch_whitelisted_call_with_preimage {
					use super::runtime_types;
					pub type Call = runtime_types::composable_runtime::RuntimeCall;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for DispatchWhitelistedCallWithPreimage {
					const PALLET: &'static str = "Whitelist";
					const CALL: &'static str = "dispatch_whitelisted_call_with_preimage";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				pub fn whitelist_call(
					&self,
					call_hash: types::whitelist_call::CallHash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::WhitelistCall>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Whitelist",
						"whitelist_call",
						types::WhitelistCall { call_hash },
						[
							121u8, 165u8, 49u8, 37u8, 127u8, 38u8, 126u8, 213u8, 115u8, 148u8,
							122u8, 211u8, 24u8, 91u8, 147u8, 27u8, 87u8, 210u8, 84u8, 104u8, 229u8,
							155u8, 133u8, 30u8, 34u8, 249u8, 107u8, 110u8, 31u8, 191u8, 128u8,
							28u8,
						],
					)
				}
				pub fn remove_whitelisted_call(
					&self,
					call_hash: types::remove_whitelisted_call::CallHash,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::RemoveWhitelistedCall,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Whitelist",
						"remove_whitelisted_call",
						types::RemoveWhitelistedCall { call_hash },
						[
							30u8, 47u8, 13u8, 231u8, 165u8, 219u8, 246u8, 210u8, 11u8, 38u8, 219u8,
							218u8, 151u8, 226u8, 101u8, 175u8, 0u8, 239u8, 35u8, 46u8, 156u8,
							104u8, 145u8, 173u8, 105u8, 100u8, 21u8, 189u8, 123u8, 227u8, 196u8,
							40u8,
						],
					)
				}
				pub fn dispatch_whitelisted_call(
					&self,
					call_hash: types::dispatch_whitelisted_call::CallHash,
					call_encoded_len: types::dispatch_whitelisted_call::CallEncodedLen,
					call_weight_witness: types::dispatch_whitelisted_call::CallWeightWitness,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::DispatchWhitelistedCall,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Whitelist",
						"dispatch_whitelisted_call",
						types::DispatchWhitelistedCall {
							call_hash,
							call_encoded_len,
							call_weight_witness,
						},
						[
							112u8, 67u8, 72u8, 26u8, 3u8, 214u8, 86u8, 102u8, 29u8, 96u8, 222u8,
							24u8, 115u8, 15u8, 124u8, 160u8, 148u8, 184u8, 56u8, 162u8, 188u8,
							123u8, 213u8, 234u8, 208u8, 123u8, 133u8, 253u8, 43u8, 226u8, 66u8,
							116u8,
						],
					)
				}
				pub fn dispatch_whitelisted_call_with_preimage(
					&self,
					call: types::dispatch_whitelisted_call_with_preimage::Call,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::DispatchWhitelistedCallWithPreimage,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Whitelist",
						"dispatch_whitelisted_call_with_preimage",
						types::DispatchWhitelistedCallWithPreimage {
							call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
						},
						[
							135u8, 96u8, 147u8, 73u8, 242u8, 204u8, 99u8, 58u8, 235u8, 97u8, 141u8,
							154u8, 165u8, 45u8, 28u8, 224u8, 27u8, 159u8, 102u8, 123u8, 144u8,
							88u8, 28u8, 27u8, 124u8, 95u8, 178u8, 199u8, 97u8, 212u8, 156u8, 182u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_whitelist::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct CallWhitelisted {
				pub call_hash: call_whitelisted::CallHash,
			}
			pub mod call_whitelisted {
				use super::runtime_types;
				pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for CallWhitelisted {
				const PALLET: &'static str = "Whitelist";
				const EVENT: &'static str = "CallWhitelisted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct WhitelistedCallRemoved {
				pub call_hash: whitelisted_call_removed::CallHash,
			}
			pub mod whitelisted_call_removed {
				use super::runtime_types;
				pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for WhitelistedCallRemoved {
				const PALLET: &'static str = "Whitelist";
				const EVENT: &'static str = "WhitelistedCallRemoved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct WhitelistedCallDispatched {
				pub call_hash: whitelisted_call_dispatched::CallHash,
				pub result: whitelisted_call_dispatched::Result,
			}
			pub mod whitelisted_call_dispatched {
				use super::runtime_types;
				pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
				pub type Result = ::core::result::Result<
					runtime_types::frame_support::dispatch::PostDispatchInfo,
					runtime_types::sp_runtime::DispatchErrorWithPostInfo<
						runtime_types::frame_support::dispatch::PostDispatchInfo,
					>,
				>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for WhitelistedCallDispatched {
				const PALLET: &'static str = "Whitelist";
				const EVENT: &'static str = "WhitelistedCallDispatched";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod whitelisted_call {
					use super::runtime_types;
					pub type WhitelistedCall = ();
					pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn whitelisted_call_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::whitelisted_call::WhitelistedCall,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Whitelist",
						"WhitelistedCall",
						(),
						[
							82u8, 208u8, 214u8, 72u8, 225u8, 35u8, 51u8, 212u8, 25u8, 138u8, 30u8,
							87u8, 54u8, 232u8, 72u8, 132u8, 4u8, 9u8, 28u8, 143u8, 251u8, 106u8,
							167u8, 218u8, 130u8, 185u8, 253u8, 185u8, 113u8, 154u8, 202u8, 66u8,
						],
					)
				}
				pub fn whitelisted_call(
					&self,
					_0: impl ::core::borrow::Borrow<types::whitelisted_call::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::whitelisted_call::Param0,
					>,
					types::whitelisted_call::WhitelistedCall,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Whitelist",
						"WhitelistedCall",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							82u8, 208u8, 214u8, 72u8, 225u8, 35u8, 51u8, 212u8, 25u8, 138u8, 30u8,
							87u8, 54u8, 232u8, 72u8, 132u8, 4u8, 9u8, 28u8, 143u8, 251u8, 106u8,
							167u8, 218u8, 130u8, 185u8, 253u8, 185u8, 113u8, 154u8, 202u8, 66u8,
						],
					)
				}
			}
		}
	}
	pub mod call_filter {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_call_filter::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_call_filter::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Disable a pallet function."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be"]
				#[doc = "`DisableOrigin`."]
				#[doc = ""]
				#[doc = "Possibly emits a `Disabled` event."]
				pub struct Disable {
					pub entry: disable::Entry,
				}
				pub mod disable {
					use super::runtime_types;
					pub type Entry = runtime_types::pallet_call_filter::types::CallFilterEntry<
						runtime_types::common::MaxStringSize,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Disable {
					const PALLET: &'static str = "CallFilter";
					const CALL: &'static str = "disable";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Enable a previously disabled pallet function."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be"]
				#[doc = "`EnableOrigin`."]
				#[doc = ""]
				#[doc = "Possibly emits an `Enabled` event."]
				pub struct Enable {
					pub entry: enable::Entry,
				}
				pub mod enable {
					use super::runtime_types;
					pub type Entry = runtime_types::pallet_call_filter::types::CallFilterEntry<
						runtime_types::common::MaxStringSize,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Enable {
					const PALLET: &'static str = "CallFilter";
					const CALL: &'static str = "enable";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Disable a pallet function."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be"]
				#[doc = "`DisableOrigin`."]
				#[doc = ""]
				#[doc = "Possibly emits a `Disabled` event."]
				pub fn disable(
					&self,
					entry: types::disable::Entry,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Disable> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CallFilter",
						"disable",
						types::Disable { entry },
						[
							188u8, 68u8, 40u8, 232u8, 136u8, 101u8, 41u8, 224u8, 80u8, 155u8,
							209u8, 49u8, 182u8, 253u8, 103u8, 16u8, 48u8, 243u8, 212u8, 228u8,
							152u8, 177u8, 169u8, 133u8, 132u8, 186u8, 91u8, 176u8, 160u8, 200u8,
							134u8, 7u8,
						],
					)
				}
				#[doc = "Enable a previously disabled pallet function."]
				#[doc = ""]
				#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be"]
				#[doc = "`EnableOrigin`."]
				#[doc = ""]
				#[doc = "Possibly emits an `Enabled` event."]
				pub fn enable(
					&self,
					entry: types::enable::Entry,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Enable> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"CallFilter",
						"enable",
						types::Enable { entry },
						[
							99u8, 190u8, 136u8, 50u8, 251u8, 149u8, 41u8, 228u8, 9u8, 250u8, 119u8,
							98u8, 236u8, 4u8, 42u8, 160u8, 0u8, 121u8, 34u8, 17u8, 57u8, 255u8,
							88u8, 143u8, 197u8, 79u8, 120u8, 180u8, 187u8, 28u8, 212u8, 249u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_call_filter::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Paused transaction"]
			pub struct Disabled {
				pub entry: disabled::Entry,
			}
			pub mod disabled {
				use super::runtime_types;
				pub type Entry = runtime_types::pallet_call_filter::types::CallFilterEntry<
					runtime_types::common::MaxStringSize,
				>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Disabled {
				const PALLET: &'static str = "CallFilter";
				const EVENT: &'static str = "Disabled";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Unpaused transaction"]
			pub struct Enabled {
				pub entry: enabled::Entry,
			}
			pub mod enabled {
				use super::runtime_types;
				pub type Entry = runtime_types::pallet_call_filter::types::CallFilterEntry<
					runtime_types::common::MaxStringSize,
				>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Enabled {
				const PALLET: &'static str = "CallFilter";
				const EVENT: &'static str = "Enabled";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod disabled_calls {
					use super::runtime_types;
					pub type DisabledCalls = ();
					pub type Param0 = runtime_types::pallet_call_filter::types::CallFilterEntry<
						runtime_types::common::MaxStringSize,
					>;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The list of disabled extrinsics."]
				pub fn disabled_calls_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::disabled_calls::DisabledCalls,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CallFilter",
						"DisabledCalls",
						(),
						[
							168u8, 206u8, 116u8, 222u8, 205u8, 104u8, 83u8, 69u8, 166u8, 17u8,
							81u8, 183u8, 74u8, 115u8, 43u8, 188u8, 219u8, 121u8, 178u8, 70u8, 98u8,
							141u8, 10u8, 81u8, 104u8, 242u8, 213u8, 114u8, 137u8, 167u8, 26u8,
							137u8,
						],
					)
				}
				#[doc = " The list of disabled extrinsics."]
				pub fn disabled_calls(
					&self,
					_0: impl ::core::borrow::Borrow<types::disabled_calls::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::disabled_calls::Param0,
					>,
					types::disabled_calls::DisabledCalls,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"CallFilter",
						"DisabledCalls",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							168u8, 206u8, 116u8, 222u8, 205u8, 104u8, 83u8, 69u8, 166u8, 17u8,
							81u8, 183u8, 74u8, 115u8, 43u8, 188u8, 219u8, 121u8, 178u8, 70u8, 98u8,
							141u8, 10u8, 81u8, 104u8, 242u8, 213u8, 114u8, 137u8, 167u8, 26u8,
							137u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				pub fn max_string_size(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"CallFilter",
						"MaxStringSize",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod ibc {
		use super::{root_mod, runtime_types};
		#[doc = "Errors inform users that something went wrong."]
		pub type Error = runtime_types::pallet_ibc::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_ibc::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Deliver {
					pub messages: deliver::Messages,
				}
				pub mod deliver {
					use super::runtime_types;
					pub type Messages =
						::subxt::ext::subxt_core::alloc::vec::Vec<runtime_types::pallet_ibc::Any>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Deliver {
					const PALLET: &'static str = "Ibc";
					const CALL: &'static str = "deliver";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Transfer {
					pub params: transfer::Params,
					pub asset_id: transfer::AssetId,
					pub amount: transfer::Amount,
					pub memo: transfer::Memo,
				}
				pub mod transfer {
					use super::runtime_types;
					pub type Params = runtime_types::pallet_ibc::TransferParams<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
					pub type AssetId = runtime_types::primitives::currency::CurrencyId;
					pub type Amount = ::core::primitive::u128;
					pub type Memo = ::core::option::Option<runtime_types::common::ibc::RawMemo>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Transfer {
					const PALLET: &'static str = "Ibc";
					const CALL: &'static str = "transfer";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "We write the consensus & client state under these predefined paths so that"]
				#[doc = "we can produce state proofs of the values to connected chains"]
				#[doc = "in order to execute client upgrades."]
				pub struct UpgradeClient {
					pub params: upgrade_client::Params,
				}
				pub mod upgrade_client {
					use super::runtime_types;
					pub type Params = runtime_types::pallet_ibc::UpgradeParams;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpgradeClient {
					const PALLET: &'static str = "Ibc";
					const CALL: &'static str = "upgrade_client";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Freeze a client at a specific height"]
				pub struct FreezeClient {
					pub client_id: freeze_client::ClientId,
					pub height: freeze_client::Height,
				}
				pub mod freeze_client {
					use super::runtime_types;
					pub type ClientId =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
					pub type Height = ::core::primitive::u64;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for FreezeClient {
					const PALLET: &'static str = "Ibc";
					const CALL: &'static str = "freeze_client";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Increase all IBC counters by 1. Used only in testing to ensure that"]
				#[doc = "relayer uses proper proper values for source/sink chains."]
				pub struct IncreaseCounters;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for IncreaseCounters {
					const PALLET: &'static str = "Ibc";
					const CALL: &'static str = "increase_counters";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct AddChannelsToFeelessChannelList {
					pub source_channel: add_channels_to_feeless_channel_list::SourceChannel,
					pub destination_channel:
						add_channels_to_feeless_channel_list::DestinationChannel,
				}
				pub mod add_channels_to_feeless_channel_list {
					use super::runtime_types;
					pub type SourceChannel = ::core::primitive::u64;
					pub type DestinationChannel = ::core::primitive::u64;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddChannelsToFeelessChannelList {
					const PALLET: &'static str = "Ibc";
					const CALL: &'static str = "add_channels_to_feeless_channel_list";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct RemoveChannelsFromFeelessChannelList {
					pub source_channel: remove_channels_from_feeless_channel_list::SourceChannel,
					pub destination_channel:
						remove_channels_from_feeless_channel_list::DestinationChannel,
				}
				pub mod remove_channels_from_feeless_channel_list {
					use super::runtime_types;
					pub type SourceChannel = ::core::primitive::u64;
					pub type DestinationChannel = ::core::primitive::u64;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveChannelsFromFeelessChannelList {
					const PALLET: &'static str = "Ibc";
					const CALL: &'static str = "remove_channels_from_feeless_channel_list";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct SetChildStorage {
					pub key: set_child_storage::Key,
					pub value: set_child_storage::Value,
				}
				pub mod set_child_storage {
					use super::runtime_types;
					pub type Key = ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
					pub type Value =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetChildStorage {
					const PALLET: &'static str = "Ibc";
					const CALL: &'static str = "set_child_storage";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct SubstituteClientState {
					pub client_id: substitute_client_state::ClientId,
					pub height: substitute_client_state::Height,
					pub client_state_bytes: substitute_client_state::ClientStateBytes,
					pub consensus_state_bytes: substitute_client_state::ConsensusStateBytes,
				}
				pub mod substitute_client_state {
					use super::runtime_types;
					pub type ClientId = ::subxt::ext::subxt_core::alloc::string::String;
					pub type Height = runtime_types::ibc::core::ics02_client::height::Height;
					pub type ClientStateBytes =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
					pub type ConsensusStateBytes =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SubstituteClientState {
					const PALLET: &'static str = "Ibc";
					const CALL: &'static str = "substitute_client_state";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				pub fn deliver(
					&self,
					messages: types::deliver::Messages,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Deliver> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Ibc",
						"deliver",
						types::Deliver { messages },
						[
							172u8, 108u8, 202u8, 218u8, 161u8, 9u8, 26u8, 231u8, 26u8, 10u8, 248u8,
							118u8, 238u8, 72u8, 137u8, 49u8, 125u8, 168u8, 175u8, 195u8, 152u8,
							13u8, 15u8, 109u8, 162u8, 50u8, 39u8, 76u8, 12u8, 121u8, 4u8, 88u8,
						],
					)
				}
				pub fn transfer(
					&self,
					params: types::transfer::Params,
					asset_id: types::transfer::AssetId,
					amount: types::transfer::Amount,
					memo: types::transfer::Memo,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Transfer> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Ibc",
						"transfer",
						types::Transfer { params, asset_id, amount, memo },
						[
							78u8, 160u8, 71u8, 77u8, 88u8, 70u8, 23u8, 240u8, 2u8, 239u8, 31u8,
							109u8, 252u8, 231u8, 101u8, 190u8, 7u8, 234u8, 130u8, 180u8, 146u8,
							209u8, 206u8, 118u8, 217u8, 238u8, 68u8, 173u8, 184u8, 136u8, 38u8,
							221u8,
						],
					)
				}
				#[doc = "We write the consensus & client state under these predefined paths so that"]
				#[doc = "we can produce state proofs of the values to connected chains"]
				#[doc = "in order to execute client upgrades."]
				pub fn upgrade_client(
					&self,
					params: types::upgrade_client::Params,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpgradeClient>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Ibc",
						"upgrade_client",
						types::UpgradeClient { params },
						[
							253u8, 58u8, 242u8, 123u8, 79u8, 161u8, 224u8, 36u8, 91u8, 61u8, 168u8,
							14u8, 234u8, 105u8, 116u8, 173u8, 53u8, 152u8, 91u8, 94u8, 95u8, 210u8,
							86u8, 22u8, 164u8, 159u8, 10u8, 192u8, 174u8, 195u8, 207u8, 172u8,
						],
					)
				}
				#[doc = "Freeze a client at a specific height"]
				pub fn freeze_client(
					&self,
					client_id: types::freeze_client::ClientId,
					height: types::freeze_client::Height,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::FreezeClient> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Ibc",
						"freeze_client",
						types::FreezeClient { client_id, height },
						[
							113u8, 2u8, 129u8, 175u8, 26u8, 200u8, 192u8, 198u8, 33u8, 79u8, 157u8,
							230u8, 222u8, 140u8, 139u8, 83u8, 46u8, 104u8, 155u8, 252u8, 241u8,
							115u8, 83u8, 85u8, 255u8, 160u8, 27u8, 110u8, 216u8, 204u8, 36u8, 76u8,
						],
					)
				}
				#[doc = "Increase all IBC counters by 1. Used only in testing to ensure that"]
				#[doc = "relayer uses proper proper values for source/sink chains."]
				pub fn increase_counters(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::IncreaseCounters>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Ibc",
						"increase_counters",
						types::IncreaseCounters {},
						[
							23u8, 152u8, 106u8, 41u8, 249u8, 118u8, 33u8, 254u8, 129u8, 72u8, 33u8,
							238u8, 90u8, 101u8, 181u8, 145u8, 237u8, 244u8, 146u8, 226u8, 229u8,
							32u8, 140u8, 133u8, 218u8, 21u8, 207u8, 4u8, 76u8, 251u8, 237u8, 93u8,
						],
					)
				}
				pub fn add_channels_to_feeless_channel_list(
					&self,
					source_channel: types::add_channels_to_feeless_channel_list::SourceChannel,
					destination_channel : types :: add_channels_to_feeless_channel_list :: DestinationChannel,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::AddChannelsToFeelessChannelList,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Ibc",
						"add_channels_to_feeless_channel_list",
						types::AddChannelsToFeelessChannelList {
							source_channel,
							destination_channel,
						},
						[
							240u8, 91u8, 98u8, 19u8, 68u8, 233u8, 245u8, 63u8, 201u8, 66u8, 237u8,
							30u8, 138u8, 115u8, 67u8, 200u8, 200u8, 120u8, 196u8, 39u8, 39u8, 48u8,
							235u8, 179u8, 16u8, 54u8, 207u8, 80u8, 174u8, 246u8, 0u8, 48u8,
						],
					)
				}
				pub fn remove_channels_from_feeless_channel_list(
					&self,
					source_channel: types::remove_channels_from_feeless_channel_list::SourceChannel,
					destination_channel : types :: remove_channels_from_feeless_channel_list :: DestinationChannel,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::RemoveChannelsFromFeelessChannelList,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Ibc",
						"remove_channels_from_feeless_channel_list",
						types::RemoveChannelsFromFeelessChannelList {
							source_channel,
							destination_channel,
						},
						[
							187u8, 25u8, 10u8, 235u8, 7u8, 252u8, 97u8, 26u8, 161u8, 75u8, 217u8,
							214u8, 131u8, 112u8, 222u8, 79u8, 22u8, 255u8, 166u8, 176u8, 42u8,
							84u8, 23u8, 229u8, 154u8, 64u8, 87u8, 189u8, 131u8, 253u8, 26u8, 224u8,
						],
					)
				}
				pub fn set_child_storage(
					&self,
					key: types::set_child_storage::Key,
					value: types::set_child_storage::Value,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetChildStorage>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Ibc",
						"set_child_storage",
						types::SetChildStorage { key, value },
						[
							87u8, 243u8, 160u8, 58u8, 82u8, 211u8, 1u8, 4u8, 253u8, 141u8, 120u8,
							60u8, 165u8, 48u8, 68u8, 239u8, 209u8, 68u8, 161u8, 133u8, 55u8, 198u8,
							24u8, 255u8, 102u8, 182u8, 203u8, 99u8, 103u8, 138u8, 226u8, 65u8,
						],
					)
				}
				pub fn substitute_client_state(
					&self,
					client_id: types::substitute_client_state::ClientId,
					height: types::substitute_client_state::Height,
					client_state_bytes: types::substitute_client_state::ClientStateBytes,
					consensus_state_bytes: types::substitute_client_state::ConsensusStateBytes,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::SubstituteClientState,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Ibc",
						"substitute_client_state",
						types::SubstituteClientState {
							client_id,
							height,
							client_state_bytes,
							consensus_state_bytes,
						},
						[
							12u8, 193u8, 205u8, 192u8, 147u8, 106u8, 20u8, 83u8, 109u8, 63u8,
							199u8, 252u8, 234u8, 179u8, 33u8, 59u8, 80u8, 152u8, 139u8, 33u8, 20u8,
							117u8, 67u8, 57u8, 39u8, 147u8, 224u8, 3u8, 192u8, 137u8, 101u8, 202u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_ibc::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Events emitted by the ibc subsystem"]
			pub struct Events {
				pub events: events::Events,
			}
			pub mod events {
				use super::runtime_types;
				pub type Events = ::subxt::ext::subxt_core::alloc::vec::Vec<
					::core::result::Result<
						runtime_types::pallet_ibc::events::IbcEvent,
						runtime_types::pallet_ibc::errors::IbcError,
					>,
				>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Events {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "Events";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An Ibc token transfer has been started"]
			pub struct TokenTransferInitiated {
				pub from: token_transfer_initiated::From,
				pub to: token_transfer_initiated::To,
				pub ibc_denom: token_transfer_initiated::IbcDenom,
				pub local_asset_id: token_transfer_initiated::LocalAssetId,
				pub amount: token_transfer_initiated::Amount,
				pub is_sender_source: token_transfer_initiated::IsSenderSource,
				pub source_channel: token_transfer_initiated::SourceChannel,
				pub destination_channel: token_transfer_initiated::DestinationChannel,
			}
			pub mod token_transfer_initiated {
				use super::runtime_types;
				pub type From = ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type To = ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type IbcDenom =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type LocalAssetId =
					::core::option::Option<runtime_types::primitives::currency::CurrencyId>;
				pub type Amount = ::core::primitive::u128;
				pub type IsSenderSource = ::core::primitive::bool;
				pub type SourceChannel =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type DestinationChannel =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for TokenTransferInitiated {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "TokenTransferInitiated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "A channel has been opened"]
			pub struct ChannelOpened {
				pub channel_id: channel_opened::ChannelId,
				pub port_id: channel_opened::PortId,
			}
			pub mod channel_opened {
				use super::runtime_types;
				pub type ChannelId =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type PortId = ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ChannelOpened {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ChannelOpened";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Pallet params updated"]
			pub struct ParamsUpdated {
				pub send_enabled: params_updated::SendEnabled,
				pub receive_enabled: params_updated::ReceiveEnabled,
			}
			pub mod params_updated {
				use super::runtime_types;
				pub type SendEnabled = ::core::primitive::bool;
				pub type ReceiveEnabled = ::core::primitive::bool;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ParamsUpdated {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ParamsUpdated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "An outgoing Ibc token transfer has been completed and burnt"]
			pub struct TokenTransferCompleted {
				pub from: token_transfer_completed::From,
				pub to: token_transfer_completed::To,
				pub ibc_denom: token_transfer_completed::IbcDenom,
				pub local_asset_id: token_transfer_completed::LocalAssetId,
				pub amount: token_transfer_completed::Amount,
				pub is_sender_source: token_transfer_completed::IsSenderSource,
				pub source_channel: token_transfer_completed::SourceChannel,
				pub destination_channel: token_transfer_completed::DestinationChannel,
			}
			pub mod token_transfer_completed {
				use super::runtime_types;
				pub type From = runtime_types::ibc::signer::Signer;
				pub type To = runtime_types::ibc::signer::Signer;
				pub type IbcDenom =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type LocalAssetId =
					::core::option::Option<runtime_types::primitives::currency::CurrencyId>;
				pub type Amount = ::core::primitive::u128;
				pub type IsSenderSource = ::core::primitive::bool;
				pub type SourceChannel =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type DestinationChannel =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for TokenTransferCompleted {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "TokenTransferCompleted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Ibc tokens have been received and minted"]
			pub struct TokenReceived {
				pub from: token_received::From,
				pub to: token_received::To,
				pub ibc_denom: token_received::IbcDenom,
				pub local_asset_id: token_received::LocalAssetId,
				pub amount: token_received::Amount,
				pub is_receiver_source: token_received::IsReceiverSource,
				pub source_channel: token_received::SourceChannel,
				pub destination_channel: token_received::DestinationChannel,
			}
			pub mod token_received {
				use super::runtime_types;
				pub type From = runtime_types::ibc::signer::Signer;
				pub type To = runtime_types::ibc::signer::Signer;
				pub type IbcDenom =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type LocalAssetId =
					::core::option::Option<runtime_types::primitives::currency::CurrencyId>;
				pub type Amount = ::core::primitive::u128;
				pub type IsReceiverSource = ::core::primitive::bool;
				pub type SourceChannel =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type DestinationChannel =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for TokenReceived {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "TokenReceived";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Ibc transfer failed, received an acknowledgement error, tokens have been refunded"]
			pub struct TokenTransferFailed {
				pub from: token_transfer_failed::From,
				pub to: token_transfer_failed::To,
				pub ibc_denom: token_transfer_failed::IbcDenom,
				pub local_asset_id: token_transfer_failed::LocalAssetId,
				pub amount: token_transfer_failed::Amount,
				pub is_sender_source: token_transfer_failed::IsSenderSource,
				pub source_channel: token_transfer_failed::SourceChannel,
				pub destination_channel: token_transfer_failed::DestinationChannel,
			}
			pub mod token_transfer_failed {
				use super::runtime_types;
				pub type From = runtime_types::ibc::signer::Signer;
				pub type To = runtime_types::ibc::signer::Signer;
				pub type IbcDenom =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type LocalAssetId =
					::core::option::Option<runtime_types::primitives::currency::CurrencyId>;
				pub type Amount = ::core::primitive::u128;
				pub type IsSenderSource = ::core::primitive::bool;
				pub type SourceChannel =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type DestinationChannel =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for TokenTransferFailed {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "TokenTransferFailed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Happens when token transfer timeouts, tokens have been refunded. expected"]
			#[doc = "`TokenTransferFailed` does not happen in this case."]
			pub struct TokenTransferTimeout {
				pub from: token_transfer_timeout::From,
				pub to: token_transfer_timeout::To,
				pub ibc_denom: token_transfer_timeout::IbcDenom,
				pub local_asset_id: token_transfer_timeout::LocalAssetId,
				pub amount: token_transfer_timeout::Amount,
				pub is_sender_source: token_transfer_timeout::IsSenderSource,
				pub source_channel: token_transfer_timeout::SourceChannel,
				pub destination_channel: token_transfer_timeout::DestinationChannel,
			}
			pub mod token_transfer_timeout {
				use super::runtime_types;
				pub type From = runtime_types::ibc::signer::Signer;
				pub type To = runtime_types::ibc::signer::Signer;
				pub type IbcDenom =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type LocalAssetId =
					::core::option::Option<runtime_types::primitives::currency::CurrencyId>;
				pub type Amount = ::core::primitive::u128;
				pub type IsSenderSource = ::core::primitive::bool;
				pub type SourceChannel =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type DestinationChannel =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for TokenTransferTimeout {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "TokenTransferTimeout";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "On recv packet was not processed successfully processes"]
			pub struct OnRecvPacketError {
				pub msg: on_recv_packet_error::Msg,
			}
			pub mod on_recv_packet_error {
				use super::runtime_types;
				pub type Msg = ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for OnRecvPacketError {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "OnRecvPacketError";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Client upgrade path has been set"]
			pub struct ClientUpgradeSet;
			impl ::subxt::ext::subxt_core::events::StaticEvent for ClientUpgradeSet {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ClientUpgradeSet";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Client has been frozen"]
			pub struct ClientFrozen {
				pub client_id: client_frozen::ClientId,
				pub height: client_frozen::Height,
				pub revision_number: client_frozen::RevisionNumber,
			}
			pub mod client_frozen {
				use super::runtime_types;
				pub type ClientId =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type Height = ::core::primitive::u64;
				pub type RevisionNumber = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ClientFrozen {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ClientFrozen";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Asset Admin Account Updated"]
			pub struct AssetAdminUpdated {
				pub admin_account: asset_admin_updated::AdminAccount,
			}
			pub mod asset_admin_updated {
				use super::runtime_types;
				pub type AdminAccount = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for AssetAdminUpdated {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "AssetAdminUpdated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct FeeLessChannelIdsAdded {
				pub source_channel: fee_less_channel_ids_added::SourceChannel,
				pub destination_channel: fee_less_channel_ids_added::DestinationChannel,
			}
			pub mod fee_less_channel_ids_added {
				use super::runtime_types;
				pub type SourceChannel = ::core::primitive::u64;
				pub type DestinationChannel = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for FeeLessChannelIdsAdded {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "FeeLessChannelIdsAdded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct FeeLessChannelIdsRemoved {
				pub source_channel: fee_less_channel_ids_removed::SourceChannel,
				pub destination_channel: fee_less_channel_ids_removed::DestinationChannel,
			}
			pub mod fee_less_channel_ids_removed {
				use super::runtime_types;
				pub type SourceChannel = ::core::primitive::u64;
				pub type DestinationChannel = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for FeeLessChannelIdsRemoved {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "FeeLessChannelIdsRemoved";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ChargingFeeOnTransferInitiated {
				pub sequence: charging_fee_on_transfer_initiated::Sequence,
				pub from: charging_fee_on_transfer_initiated::From,
				pub to: charging_fee_on_transfer_initiated::To,
				pub ibc_denom: charging_fee_on_transfer_initiated::IbcDenom,
				pub local_asset_id: charging_fee_on_transfer_initiated::LocalAssetId,
				pub amount: charging_fee_on_transfer_initiated::Amount,
				pub is_flat_fee: charging_fee_on_transfer_initiated::IsFlatFee,
				pub source_channel: charging_fee_on_transfer_initiated::SourceChannel,
				pub destination_channel: charging_fee_on_transfer_initiated::DestinationChannel,
			}
			pub mod charging_fee_on_transfer_initiated {
				use super::runtime_types;
				pub type Sequence = ::core::primitive::u64;
				pub type From = ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type To = ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type IbcDenom =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type LocalAssetId =
					::core::option::Option<runtime_types::primitives::currency::CurrencyId>;
				pub type Amount = ::core::primitive::u128;
				pub type IsFlatFee = ::core::primitive::bool;
				pub type SourceChannel =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type DestinationChannel =
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ChargingFeeOnTransferInitiated {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ChargingFeeOnTransferInitiated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ChargingFeeConfirmed {
				pub sequence: charging_fee_confirmed::Sequence,
			}
			pub mod charging_fee_confirmed {
				use super::runtime_types;
				pub type Sequence = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ChargingFeeConfirmed {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ChargingFeeConfirmed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ChargingFeeTimeout {
				pub sequence: charging_fee_timeout::Sequence,
			}
			pub mod charging_fee_timeout {
				use super::runtime_types;
				pub type Sequence = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ChargingFeeTimeout {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ChargingFeeTimeout";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ChargingFeeFailedAcknowledgement {
				pub sequence: charging_fee_failed_acknowledgement::Sequence,
			}
			pub mod charging_fee_failed_acknowledgement {
				use super::runtime_types;
				pub type Sequence = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ChargingFeeFailedAcknowledgement {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ChargingFeeFailedAcknowledgement";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ChildStateUpdated;
			impl ::subxt::ext::subxt_core::events::StaticEvent for ChildStateUpdated {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ChildStateUpdated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ClientStateSubstituted {
				pub client_id: client_state_substituted::ClientId,
				pub height: client_state_substituted::Height,
			}
			pub mod client_state_substituted {
				use super::runtime_types;
				pub type ClientId = ::subxt::ext::subxt_core::alloc::string::String;
				pub type Height = runtime_types::ibc::core::ics02_client::height::Height;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ClientStateSubstituted {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ClientStateSubstituted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ExecuteMemoStarted {
				pub account_id: execute_memo_started::AccountId,
				pub memo: execute_memo_started::Memo,
			}
			pub mod execute_memo_started {
				use super::runtime_types;
				pub type AccountId = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Memo =
					::core::option::Option<::subxt::ext::subxt_core::alloc::string::String>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ExecuteMemoStarted {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ExecuteMemoStarted";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ExecuteMemoIbcTokenTransferSuccess {
				pub from: execute_memo_ibc_token_transfer_success::From,
				pub to: execute_memo_ibc_token_transfer_success::To,
				pub asset_id: execute_memo_ibc_token_transfer_success::AssetId,
				pub amount: execute_memo_ibc_token_transfer_success::Amount,
				pub channel: execute_memo_ibc_token_transfer_success::Channel,
				pub next_memo: execute_memo_ibc_token_transfer_success::NextMemo,
			}
			pub mod execute_memo_ibc_token_transfer_success {
				use super::runtime_types;
				pub type From = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type To = ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type AssetId = runtime_types::primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
				pub type Channel = ::core::primitive::u64;
				pub type NextMemo = ::core::option::Option<runtime_types::common::ibc::RawMemo>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ExecuteMemoIbcTokenTransferSuccess {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ExecuteMemoIbcTokenTransferSuccess";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ExecuteMemoIbcTokenTransferFailedWithReason {
				pub from: execute_memo_ibc_token_transfer_failed_with_reason::From,
				pub memo: execute_memo_ibc_token_transfer_failed_with_reason::Memo,
				pub reason: execute_memo_ibc_token_transfer_failed_with_reason::Reason,
			}
			pub mod execute_memo_ibc_token_transfer_failed_with_reason {
				use super::runtime_types;
				pub type From = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Memo = ::subxt::ext::subxt_core::alloc::string::String;
				pub type Reason = ::core::primitive::u8;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ExecuteMemoIbcTokenTransferFailedWithReason {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ExecuteMemoIbcTokenTransferFailedWithReason";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ExecuteMemoIbcTokenTransferFailed {
				pub from: execute_memo_ibc_token_transfer_failed::From,
				pub to: execute_memo_ibc_token_transfer_failed::To,
				pub asset_id: execute_memo_ibc_token_transfer_failed::AssetId,
				pub amount: execute_memo_ibc_token_transfer_failed::Amount,
				pub channel: execute_memo_ibc_token_transfer_failed::Channel,
				pub next_memo: execute_memo_ibc_token_transfer_failed::NextMemo,
			}
			pub mod execute_memo_ibc_token_transfer_failed {
				use super::runtime_types;
				pub type From = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type To = ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type AssetId = runtime_types::primitives::currency::CurrencyId;
				pub type Amount = ::core::primitive::u128;
				pub type Channel = ::core::primitive::u64;
				pub type NextMemo = ::core::option::Option<runtime_types::common::ibc::RawMemo>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ExecuteMemoIbcTokenTransferFailed {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ExecuteMemoIbcTokenTransferFailed";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ExecuteMemoXcmSuccess {
				pub from: execute_memo_xcm_success::From,
				pub to: execute_memo_xcm_success::To,
				pub amount: execute_memo_xcm_success::Amount,
				pub asset_id: execute_memo_xcm_success::AssetId,
				pub para_id: execute_memo_xcm_success::ParaId,
			}
			pub mod execute_memo_xcm_success {
				use super::runtime_types;
				pub type From = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type To = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
				pub type AssetId = runtime_types::primitives::currency::CurrencyId;
				pub type ParaId = ::core::option::Option<::core::primitive::u32>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ExecuteMemoXcmSuccess {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ExecuteMemoXcmSuccess";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ExecuteMemoXcmFailed {
				pub from: execute_memo_xcm_failed::From,
				pub to: execute_memo_xcm_failed::To,
				pub amount: execute_memo_xcm_failed::Amount,
				pub asset_id: execute_memo_xcm_failed::AssetId,
				pub para_id: execute_memo_xcm_failed::ParaId,
			}
			pub mod execute_memo_xcm_failed {
				use super::runtime_types;
				pub type From = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type To = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
				pub type AssetId = runtime_types::primitives::currency::CurrencyId;
				pub type ParaId = ::core::option::Option<::core::primitive::u32>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ExecuteMemoXcmFailed {
				const PALLET: &'static str = "Ibc";
				const EVENT: &'static str = "ExecuteMemoXcmFailed";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod client_update_height {
					use super::runtime_types;
					pub type ClientUpdateHeight =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
					pub type Param0 = [::core::primitive::u8];
					pub type Param1 = [::core::primitive::u8];
				}
				pub mod service_charge_out {
					use super::runtime_types;
					pub type ServiceChargeOut = runtime_types::sp_arithmetic::per_things::Perbill;
				}
				pub mod client_update_time {
					use super::runtime_types;
					pub type ClientUpdateTime = ::core::primitive::u64;
					pub type Param0 = [::core::primitive::u8];
					pub type Param1 = [::core::primitive::u8];
				}
				pub mod channel_counter {
					use super::runtime_types;
					pub type ChannelCounter = ::core::primitive::u32;
				}
				pub mod packet_counter {
					use super::runtime_types;
					pub type PacketCounter = ::core::primitive::u32;
				}
				pub mod channels_connection {
					use super::runtime_types;
					pub type ChannelsConnection = ::subxt::ext::subxt_core::alloc::vec::Vec<(
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					)>;
					pub type Param0 = [::core::primitive::u8];
				}
				pub mod fee_less_channel_ids {
					use super::runtime_types;
					pub type FeeLessChannelIds = ();
					pub type Param0 = ::core::primitive::u64;
					pub type Param1 = ::core::primitive::u64;
				}
				pub mod sequence_fee {
					use super::runtime_types;
					pub type SequenceFee = ::core::primitive::u128;
					pub type Param0 = ::core::primitive::u64;
				}
				pub mod client_counter {
					use super::runtime_types;
					pub type ClientCounter = ::core::primitive::u32;
				}
				pub mod connection_counter {
					use super::runtime_types;
					pub type ConnectionCounter = ::core::primitive::u32;
				}
				pub mod acknowledgement_counter {
					use super::runtime_types;
					pub type AcknowledgementCounter = ::core::primitive::u32;
				}
				pub mod packet_receipt_counter {
					use super::runtime_types;
					pub type PacketReceiptCounter = ::core::primitive::u32;
				}
				pub mod connection_client {
					use super::runtime_types;
					pub type ConnectionClient = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					>;
					pub type Param0 = [::core::primitive::u8];
				}
				pub mod ibc_asset_ids {
					use super::runtime_types;
					pub type IbcAssetIds =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
					pub type Param0 = runtime_types::primitives::currency::CurrencyId;
				}
				pub mod counter_for_ibc_asset_ids {
					use super::runtime_types;
					pub type CounterForIbcAssetIds = ::core::primitive::u32;
				}
				pub mod ibc_denoms {
					use super::runtime_types;
					pub type IbcDenoms = runtime_types::primitives::currency::CurrencyId;
					pub type Param0 = [::core::primitive::u8];
				}
				pub mod counter_for_ibc_denoms {
					use super::runtime_types;
					pub type CounterForIbcDenoms = ::core::primitive::u32;
				}
				pub mod channel_ids {
					use super::runtime_types;
					pub type ChannelIds = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					>;
				}
				pub mod escrow_addresses {
					use super::runtime_types;
					pub type EscrowAddresses = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				pub mod consensus_heights {
					use super::runtime_types;
					pub type ConsensusHeights =
						runtime_types::bounded_collections::bounded_btree_set::BoundedBTreeSet<
							runtime_types::ibc::core::ics02_client::height::Height,
						>;
					pub type Param0 = [::core::primitive::u8];
				}
				pub mod send_packets {
					use super::runtime_types;
					pub type SendPackets =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
					pub type Param0 = [::core::primitive::u8];
				}
				pub mod recv_packets {
					use super::runtime_types;
					pub type RecvPackets =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
					pub type Param0 = [::core::primitive::u8];
				}
				pub mod acks {
					use super::runtime_types;
					pub type Acks =
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
					pub type Param0 = [::core::primitive::u8];
				}
				pub mod pending_send_packet_seqs {
					use super::runtime_types;
					pub type PendingSendPacketSeqs = (
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u64>,
						::core::primitive::u64,
					);
					pub type Param0 = [::core::primitive::u8];
					pub type Param1 = [::core::primitive::u8];
				}
				pub mod pending_recv_packet_seqs {
					use super::runtime_types;
					pub type PendingRecvPacketSeqs = (
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u64>,
						::core::primitive::u64,
					);
					pub type Param0 = [::core::primitive::u8];
					pub type Param1 = [::core::primitive::u8];
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " client_id , Height => Height"]
				pub fn client_update_height_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::client_update_height::ClientUpdateHeight,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ClientUpdateHeight",
						(),
						[
							75u8, 243u8, 33u8, 182u8, 39u8, 208u8, 238u8, 74u8, 241u8, 105u8,
							206u8, 74u8, 15u8, 70u8, 35u8, 249u8, 115u8, 224u8, 16u8, 208u8, 95u8,
							92u8, 66u8, 193u8, 225u8, 33u8, 211u8, 162u8, 241u8, 233u8, 183u8,
							228u8,
						],
					)
				}
				#[doc = " client_id , Height => Height"]
				pub fn client_update_height_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::client_update_height::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::client_update_height::Param0,
					>,
					types::client_update_height::ClientUpdateHeight,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ClientUpdateHeight",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							75u8, 243u8, 33u8, 182u8, 39u8, 208u8, 238u8, 74u8, 241u8, 105u8,
							206u8, 74u8, 15u8, 70u8, 35u8, 249u8, 115u8, 224u8, 16u8, 208u8, 95u8,
							92u8, 66u8, 193u8, 225u8, 33u8, 211u8, 162u8, 241u8, 233u8, 183u8,
							228u8,
						],
					)
				}
				#[doc = " client_id , Height => Height"]
				pub fn client_update_height(
					&self,
					_0: impl ::core::borrow::Borrow<types::client_update_height::Param0>,
					_1: impl ::core::borrow::Borrow<types::client_update_height::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::client_update_height::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::client_update_height::Param1,
						>,
					),
					types::client_update_height::ClientUpdateHeight,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ClientUpdateHeight",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							75u8, 243u8, 33u8, 182u8, 39u8, 208u8, 238u8, 74u8, 241u8, 105u8,
							206u8, 74u8, 15u8, 70u8, 35u8, 249u8, 115u8, 224u8, 16u8, 208u8, 95u8,
							92u8, 66u8, 193u8, 225u8, 33u8, 211u8, 162u8, 241u8, 233u8, 183u8,
							228u8,
						],
					)
				}
				pub fn service_charge_out(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::service_charge_out::ServiceChargeOut,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ServiceChargeOut",
						(),
						[
							131u8, 102u8, 75u8, 64u8, 161u8, 69u8, 217u8, 111u8, 153u8, 9u8, 32u8,
							20u8, 79u8, 224u8, 110u8, 11u8, 215u8, 10u8, 235u8, 83u8, 154u8, 125u8,
							69u8, 205u8, 62u8, 167u8, 110u8, 18u8, 36u8, 95u8, 143u8, 58u8,
						],
					)
				}
				#[doc = " client_id , Height => Timestamp"]
				pub fn client_update_time_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::client_update_time::ClientUpdateTime,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ClientUpdateTime",
						(),
						[
							92u8, 178u8, 20u8, 229u8, 210u8, 238u8, 5u8, 76u8, 17u8, 219u8, 134u8,
							109u8, 11u8, 221u8, 108u8, 177u8, 192u8, 25u8, 225u8, 197u8, 63u8,
							50u8, 204u8, 38u8, 191u8, 15u8, 98u8, 1u8, 78u8, 87u8, 42u8, 62u8,
						],
					)
				}
				#[doc = " client_id , Height => Timestamp"]
				pub fn client_update_time_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::client_update_time::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::client_update_time::Param0,
					>,
					types::client_update_time::ClientUpdateTime,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ClientUpdateTime",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							92u8, 178u8, 20u8, 229u8, 210u8, 238u8, 5u8, 76u8, 17u8, 219u8, 134u8,
							109u8, 11u8, 221u8, 108u8, 177u8, 192u8, 25u8, 225u8, 197u8, 63u8,
							50u8, 204u8, 38u8, 191u8, 15u8, 98u8, 1u8, 78u8, 87u8, 42u8, 62u8,
						],
					)
				}
				#[doc = " client_id , Height => Timestamp"]
				pub fn client_update_time(
					&self,
					_0: impl ::core::borrow::Borrow<types::client_update_time::Param0>,
					_1: impl ::core::borrow::Borrow<types::client_update_time::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::client_update_time::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::client_update_time::Param1,
						>,
					),
					types::client_update_time::ClientUpdateTime,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ClientUpdateTime",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							92u8, 178u8, 20u8, 229u8, 210u8, 238u8, 5u8, 76u8, 17u8, 219u8, 134u8,
							109u8, 11u8, 221u8, 108u8, 177u8, 192u8, 25u8, 225u8, 197u8, 63u8,
							50u8, 204u8, 38u8, 191u8, 15u8, 98u8, 1u8, 78u8, 87u8, 42u8, 62u8,
						],
					)
				}
				pub fn channel_counter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::channel_counter::ChannelCounter,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ChannelCounter",
						(),
						[
							61u8, 228u8, 58u8, 117u8, 65u8, 31u8, 204u8, 92u8, 12u8, 247u8, 4u8,
							176u8, 121u8, 146u8, 112u8, 118u8, 201u8, 138u8, 154u8, 6u8, 4u8,
							201u8, 218u8, 64u8, 250u8, 201u8, 50u8, 148u8, 87u8, 172u8, 215u8,
							152u8,
						],
					)
				}
				pub fn packet_counter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::packet_counter::PacketCounter,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"PacketCounter",
						(),
						[
							6u8, 61u8, 72u8, 154u8, 126u8, 33u8, 9u8, 44u8, 64u8, 112u8, 73u8,
							229u8, 28u8, 106u8, 109u8, 206u8, 11u8, 152u8, 124u8, 157u8, 252u8,
							28u8, 153u8, 248u8, 16u8, 60u8, 33u8, 198u8, 78u8, 254u8, 10u8, 244u8,
						],
					)
				}
				#[doc = " connection_identifier => Vec<(port_id, channel_id)>"]
				pub fn channels_connection_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::channels_connection::ChannelsConnection,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ChannelsConnection",
						(),
						[
							240u8, 108u8, 181u8, 37u8, 88u8, 248u8, 73u8, 155u8, 48u8, 181u8,
							152u8, 243u8, 109u8, 79u8, 129u8, 65u8, 243u8, 50u8, 10u8, 130u8,
							171u8, 201u8, 35u8, 141u8, 208u8, 69u8, 234u8, 105u8, 202u8, 15u8,
							217u8, 148u8,
						],
					)
				}
				#[doc = " connection_identifier => Vec<(port_id, channel_id)>"]
				pub fn channels_connection(
					&self,
					_0: impl ::core::borrow::Borrow<types::channels_connection::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::channels_connection::Param0,
					>,
					types::channels_connection::ChannelsConnection,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ChannelsConnection",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							240u8, 108u8, 181u8, 37u8, 88u8, 248u8, 73u8, 155u8, 48u8, 181u8,
							152u8, 243u8, 109u8, 79u8, 129u8, 65u8, 243u8, 50u8, 10u8, 130u8,
							171u8, 201u8, 35u8, 141u8, 208u8, 69u8, 234u8, 105u8, 202u8, 15u8,
							217u8, 148u8,
						],
					)
				}
				#[doc = " storage map. key is tuple of (source_channel.sequence(), destination_channel.sequence()) and"]
				#[doc = " value () that means that this group of channels is feeless"]
				pub fn fee_less_channel_ids_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::fee_less_channel_ids::FeeLessChannelIds,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"FeeLessChannelIds",
						(),
						[
							122u8, 208u8, 54u8, 30u8, 164u8, 139u8, 128u8, 106u8, 214u8, 8u8,
							106u8, 105u8, 95u8, 140u8, 17u8, 72u8, 88u8, 252u8, 41u8, 69u8, 101u8,
							65u8, 5u8, 94u8, 247u8, 244u8, 19u8, 208u8, 160u8, 159u8, 209u8, 15u8,
						],
					)
				}
				#[doc = " storage map. key is tuple of (source_channel.sequence(), destination_channel.sequence()) and"]
				#[doc = " value () that means that this group of channels is feeless"]
				pub fn fee_less_channel_ids_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::fee_less_channel_ids::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::fee_less_channel_ids::Param0,
					>,
					types::fee_less_channel_ids::FeeLessChannelIds,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"FeeLessChannelIds",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							122u8, 208u8, 54u8, 30u8, 164u8, 139u8, 128u8, 106u8, 214u8, 8u8,
							106u8, 105u8, 95u8, 140u8, 17u8, 72u8, 88u8, 252u8, 41u8, 69u8, 101u8,
							65u8, 5u8, 94u8, 247u8, 244u8, 19u8, 208u8, 160u8, 159u8, 209u8, 15u8,
						],
					)
				}
				#[doc = " storage map. key is tuple of (source_channel.sequence(), destination_channel.sequence()) and"]
				#[doc = " value () that means that this group of channels is feeless"]
				pub fn fee_less_channel_ids(
					&self,
					_0: impl ::core::borrow::Borrow<types::fee_less_channel_ids::Param0>,
					_1: impl ::core::borrow::Borrow<types::fee_less_channel_ids::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::fee_less_channel_ids::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::fee_less_channel_ids::Param1,
						>,
					),
					types::fee_less_channel_ids::FeeLessChannelIds,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"FeeLessChannelIds",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							122u8, 208u8, 54u8, 30u8, 164u8, 139u8, 128u8, 106u8, 214u8, 8u8,
							106u8, 105u8, 95u8, 140u8, 17u8, 72u8, 88u8, 252u8, 41u8, 69u8, 101u8,
							65u8, 5u8, 94u8, 247u8, 244u8, 19u8, 208u8, 160u8, 159u8, 209u8, 15u8,
						],
					)
				}
				#[doc = " storage map where key is transfer sequence number and value calculated fee for that sequence"]
				#[doc = " number"]
				pub fn sequence_fee_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::sequence_fee::SequenceFee,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"SequenceFee",
						(),
						[
							66u8, 41u8, 5u8, 19u8, 126u8, 113u8, 10u8, 96u8, 77u8, 206u8, 105u8,
							119u8, 8u8, 92u8, 211u8, 69u8, 216u8, 169u8, 91u8, 108u8, 227u8, 237u8,
							196u8, 25u8, 18u8, 68u8, 253u8, 253u8, 21u8, 205u8, 3u8, 184u8,
						],
					)
				}
				#[doc = " storage map where key is transfer sequence number and value calculated fee for that sequence"]
				#[doc = " number"]
				pub fn sequence_fee(
					&self,
					_0: impl ::core::borrow::Borrow<types::sequence_fee::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::sequence_fee::Param0,
					>,
					types::sequence_fee::SequenceFee,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"SequenceFee",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							66u8, 41u8, 5u8, 19u8, 126u8, 113u8, 10u8, 96u8, 77u8, 206u8, 105u8,
							119u8, 8u8, 92u8, 211u8, 69u8, 216u8, 169u8, 91u8, 108u8, 227u8, 237u8,
							196u8, 25u8, 18u8, 68u8, 253u8, 253u8, 21u8, 205u8, 3u8, 184u8,
						],
					)
				}
				#[doc = " counter for clients"]
				pub fn client_counter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::client_counter::ClientCounter,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ClientCounter",
						(),
						[
							25u8, 194u8, 154u8, 231u8, 229u8, 240u8, 25u8, 94u8, 46u8, 3u8, 137u8,
							130u8, 211u8, 146u8, 87u8, 105u8, 17u8, 95u8, 56u8, 55u8, 184u8, 245u8,
							170u8, 189u8, 108u8, 17u8, 167u8, 134u8, 161u8, 89u8, 168u8, 243u8,
						],
					)
				}
				#[doc = " counter for clients"]
				pub fn connection_counter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::connection_counter::ConnectionCounter,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ConnectionCounter",
						(),
						[
							244u8, 243u8, 169u8, 141u8, 145u8, 248u8, 15u8, 50u8, 150u8, 185u8,
							137u8, 105u8, 14u8, 154u8, 199u8, 20u8, 160u8, 78u8, 64u8, 36u8, 14u8,
							36u8, 46u8, 219u8, 114u8, 164u8, 64u8, 178u8, 1u8, 152u8, 80u8, 33u8,
						],
					)
				}
				#[doc = " counter for acknowledgments"]
				pub fn acknowledgement_counter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::acknowledgement_counter::AcknowledgementCounter,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"AcknowledgementCounter",
						(),
						[
							202u8, 105u8, 177u8, 209u8, 89u8, 60u8, 15u8, 21u8, 193u8, 73u8, 105u8,
							98u8, 195u8, 143u8, 40u8, 194u8, 50u8, 117u8, 157u8, 7u8, 45u8, 115u8,
							179u8, 143u8, 180u8, 121u8, 208u8, 171u8, 88u8, 133u8, 232u8, 84u8,
						],
					)
				}
				#[doc = " counter for packet receipts"]
				pub fn packet_receipt_counter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::packet_receipt_counter::PacketReceiptCounter,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"PacketReceiptCounter",
						(),
						[
							67u8, 12u8, 175u8, 101u8, 87u8, 155u8, 170u8, 123u8, 89u8, 82u8, 227u8,
							122u8, 221u8, 201u8, 185u8, 186u8, 236u8, 193u8, 153u8, 59u8, 195u8,
							145u8, 19u8, 56u8, 254u8, 51u8, 130u8, 110u8, 167u8, 148u8, 210u8, 1u8,
						],
					)
				}
				#[doc = " client_id => Vec<Connection_id>"]
				pub fn connection_client_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::connection_client::ConnectionClient,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ConnectionClient",
						(),
						[
							59u8, 1u8, 63u8, 9u8, 154u8, 217u8, 113u8, 42u8, 171u8, 155u8, 101u8,
							69u8, 209u8, 57u8, 6u8, 4u8, 8u8, 36u8, 221u8, 81u8, 101u8, 125u8,
							235u8, 250u8, 193u8, 43u8, 121u8, 151u8, 132u8, 127u8, 211u8, 226u8,
						],
					)
				}
				#[doc = " client_id => Vec<Connection_id>"]
				pub fn connection_client(
					&self,
					_0: impl ::core::borrow::Borrow<types::connection_client::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::connection_client::Param0,
					>,
					types::connection_client::ConnectionClient,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ConnectionClient",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							59u8, 1u8, 63u8, 9u8, 154u8, 217u8, 113u8, 42u8, 171u8, 155u8, 101u8,
							69u8, 209u8, 57u8, 6u8, 4u8, 8u8, 36u8, 221u8, 81u8, 101u8, 125u8,
							235u8, 250u8, 193u8, 43u8, 121u8, 151u8, 132u8, 127u8, 211u8, 226u8,
						],
					)
				}
				#[doc = " Map of asset id to ibc denom pairs (T::AssetId, Vec<u8>)"]
				#[doc = " ibc denoms represented as utf8 string bytes"]
				pub fn ibc_asset_ids_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::ibc_asset_ids::IbcAssetIds,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"IbcAssetIds",
						(),
						[
							199u8, 124u8, 153u8, 65u8, 98u8, 208u8, 199u8, 109u8, 197u8, 21u8,
							186u8, 105u8, 203u8, 60u8, 251u8, 207u8, 121u8, 143u8, 119u8, 222u8,
							185u8, 203u8, 65u8, 253u8, 91u8, 145u8, 161u8, 228u8, 176u8, 116u8,
							173u8, 59u8,
						],
					)
				}
				#[doc = " Map of asset id to ibc denom pairs (T::AssetId, Vec<u8>)"]
				#[doc = " ibc denoms represented as utf8 string bytes"]
				pub fn ibc_asset_ids(
					&self,
					_0: impl ::core::borrow::Borrow<types::ibc_asset_ids::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::ibc_asset_ids::Param0,
					>,
					types::ibc_asset_ids::IbcAssetIds,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"IbcAssetIds",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							199u8, 124u8, 153u8, 65u8, 98u8, 208u8, 199u8, 109u8, 197u8, 21u8,
							186u8, 105u8, 203u8, 60u8, 251u8, 207u8, 121u8, 143u8, 119u8, 222u8,
							185u8, 203u8, 65u8, 253u8, 91u8, 145u8, 161u8, 228u8, 176u8, 116u8,
							173u8, 59u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_ibc_asset_ids(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::counter_for_ibc_asset_ids::CounterForIbcAssetIds,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"CounterForIbcAssetIds",
						(),
						[
							90u8, 132u8, 19u8, 129u8, 205u8, 73u8, 172u8, 84u8, 103u8, 136u8,
							108u8, 4u8, 28u8, 154u8, 26u8, 233u8, 237u8, 49u8, 179u8, 163u8, 27u8,
							207u8, 33u8, 151u8, 43u8, 149u8, 169u8, 224u8, 169u8, 185u8, 174u8,
							163u8,
						],
					)
				}
				#[doc = " Map of asset id to ibc denom pairs (Vec<u8>, T::AssetId)"]
				#[doc = " ibc denoms represented as utf8 string bytes"]
				pub fn ibc_denoms_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::ibc_denoms::IbcDenoms,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"IbcDenoms",
						(),
						[
							222u8, 110u8, 15u8, 247u8, 212u8, 125u8, 229u8, 50u8, 206u8, 243u8,
							23u8, 57u8, 212u8, 143u8, 131u8, 210u8, 241u8, 186u8, 239u8, 156u8,
							33u8, 176u8, 12u8, 149u8, 136u8, 178u8, 54u8, 34u8, 172u8, 20u8, 32u8,
							252u8,
						],
					)
				}
				#[doc = " Map of asset id to ibc denom pairs (Vec<u8>, T::AssetId)"]
				#[doc = " ibc denoms represented as utf8 string bytes"]
				pub fn ibc_denoms(
					&self,
					_0: impl ::core::borrow::Borrow<types::ibc_denoms::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::ibc_denoms::Param0,
					>,
					types::ibc_denoms::IbcDenoms,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"IbcDenoms",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							222u8, 110u8, 15u8, 247u8, 212u8, 125u8, 229u8, 50u8, 206u8, 243u8,
							23u8, 57u8, 212u8, 143u8, 131u8, 210u8, 241u8, 186u8, 239u8, 156u8,
							33u8, 176u8, 12u8, 149u8, 136u8, 178u8, 54u8, 34u8, 172u8, 20u8, 32u8,
							252u8,
						],
					)
				}
				#[doc = "Counter for the related counted storage map"]
				pub fn counter_for_ibc_denoms(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::counter_for_ibc_denoms::CounterForIbcDenoms,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"CounterForIbcDenoms",
						(),
						[
							173u8, 80u8, 18u8, 126u8, 90u8, 140u8, 11u8, 142u8, 44u8, 11u8, 237u8,
							176u8, 99u8, 234u8, 76u8, 153u8, 72u8, 128u8, 135u8, 74u8, 200u8,
							125u8, 235u8, 251u8, 82u8, 40u8, 108u8, 251u8, 19u8, 100u8, 190u8,
							129u8,
						],
					)
				}
				#[doc = " ChannelIds open from this module"]
				pub fn channel_ids(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::channel_ids::ChannelIds,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ChannelIds",
						(),
						[
							38u8, 162u8, 117u8, 100u8, 229u8, 142u8, 242u8, 166u8, 44u8, 113u8,
							65u8, 252u8, 7u8, 122u8, 116u8, 201u8, 12u8, 46u8, 231u8, 186u8, 254u8,
							172u8, 232u8, 237u8, 81u8, 13u8, 20u8, 156u8, 229u8, 38u8, 221u8, 89u8,
						],
					)
				}
				#[doc = " Active Escrow addresses"]
				pub fn escrow_addresses(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::escrow_addresses::EscrowAddresses,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"EscrowAddresses",
						(),
						[
							67u8, 10u8, 57u8, 221u8, 25u8, 4u8, 126u8, 69u8, 202u8, 103u8, 147u8,
							128u8, 228u8, 191u8, 222u8, 129u8, 252u8, 40u8, 103u8, 233u8, 145u8,
							178u8, 123u8, 64u8, 220u8, 165u8, 16u8, 239u8, 241u8, 109u8, 42u8,
							52u8,
						],
					)
				}
				#[doc = " Consensus heights"]
				#[doc = " Stored as a tuple of (revision_number, revision_height)"]
				pub fn consensus_heights_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::consensus_heights::ConsensusHeights,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ConsensusHeights",
						(),
						[
							78u8, 76u8, 14u8, 119u8, 81u8, 198u8, 83u8, 244u8, 198u8, 220u8, 27u8,
							154u8, 45u8, 218u8, 225u8, 169u8, 178u8, 199u8, 62u8, 159u8, 162u8,
							108u8, 209u8, 40u8, 50u8, 94u8, 149u8, 20u8, 91u8, 30u8, 57u8, 86u8,
						],
					)
				}
				#[doc = " Consensus heights"]
				#[doc = " Stored as a tuple of (revision_number, revision_height)"]
				pub fn consensus_heights(
					&self,
					_0: impl ::core::borrow::Borrow<types::consensus_heights::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::consensus_heights::Param0,
					>,
					types::consensus_heights::ConsensusHeights,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"ConsensusHeights",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							78u8, 76u8, 14u8, 119u8, 81u8, 198u8, 83u8, 244u8, 198u8, 220u8, 27u8,
							154u8, 45u8, 218u8, 225u8, 169u8, 178u8, 199u8, 62u8, 159u8, 162u8,
							108u8, 209u8, 40u8, 50u8, 94u8, 149u8, 20u8, 91u8, 30u8, 57u8, 86u8,
						],
					)
				}
				#[doc = " SendPackets info"]
				pub fn send_packets_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::send_packets::SendPackets,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"SendPackets",
						(),
						[
							229u8, 165u8, 52u8, 91u8, 187u8, 130u8, 135u8, 118u8, 16u8, 183u8,
							26u8, 87u8, 232u8, 246u8, 206u8, 235u8, 110u8, 49u8, 147u8, 98u8,
							243u8, 196u8, 58u8, 18u8, 119u8, 188u8, 107u8, 100u8, 229u8, 77u8,
							34u8, 63u8,
						],
					)
				}
				#[doc = " SendPackets info"]
				pub fn send_packets(
					&self,
					_0: impl ::core::borrow::Borrow<types::send_packets::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::send_packets::Param0,
					>,
					types::send_packets::SendPackets,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"SendPackets",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							229u8, 165u8, 52u8, 91u8, 187u8, 130u8, 135u8, 118u8, 16u8, 183u8,
							26u8, 87u8, 232u8, 246u8, 206u8, 235u8, 110u8, 49u8, 147u8, 98u8,
							243u8, 196u8, 58u8, 18u8, 119u8, 188u8, 107u8, 100u8, 229u8, 77u8,
							34u8, 63u8,
						],
					)
				}
				#[doc = " RecvPackets info"]
				pub fn recv_packets_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::recv_packets::RecvPackets,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"RecvPackets",
						(),
						[
							146u8, 31u8, 122u8, 162u8, 18u8, 81u8, 182u8, 243u8, 179u8, 89u8,
							226u8, 193u8, 25u8, 119u8, 67u8, 53u8, 249u8, 152u8, 160u8, 37u8,
							124u8, 150u8, 69u8, 148u8, 139u8, 201u8, 124u8, 183u8, 208u8, 128u8,
							222u8, 170u8,
						],
					)
				}
				#[doc = " RecvPackets info"]
				pub fn recv_packets(
					&self,
					_0: impl ::core::borrow::Borrow<types::recv_packets::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::recv_packets::Param0,
					>,
					types::recv_packets::RecvPackets,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"RecvPackets",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							146u8, 31u8, 122u8, 162u8, 18u8, 81u8, 182u8, 243u8, 179u8, 89u8,
							226u8, 193u8, 25u8, 119u8, 67u8, 53u8, 249u8, 152u8, 160u8, 37u8,
							124u8, 150u8, 69u8, 148u8, 139u8, 201u8, 124u8, 183u8, 208u8, 128u8,
							222u8, 170u8,
						],
					)
				}
				#[doc = " Acks info"]
				pub fn acks_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::acks::Acks,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"Acks",
						(),
						[
							232u8, 191u8, 27u8, 246u8, 214u8, 78u8, 192u8, 81u8, 212u8, 124u8,
							251u8, 5u8, 25u8, 211u8, 80u8, 180u8, 218u8, 247u8, 243u8, 105u8,
							198u8, 97u8, 226u8, 120u8, 90u8, 41u8, 79u8, 63u8, 84u8, 217u8, 18u8,
							91u8,
						],
					)
				}
				#[doc = " Acks info"]
				pub fn acks(
					&self,
					_0: impl ::core::borrow::Borrow<types::acks::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::acks::Param0,
					>,
					types::acks::Acks,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"Acks",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							232u8, 191u8, 27u8, 246u8, 214u8, 78u8, 192u8, 81u8, 212u8, 124u8,
							251u8, 5u8, 25u8, 211u8, 80u8, 180u8, 218u8, 247u8, 243u8, 105u8,
							198u8, 97u8, 226u8, 120u8, 90u8, 41u8, 79u8, 63u8, 84u8, 217u8, 18u8,
							91u8,
						],
					)
				}
				#[doc = " Pending send packet sequences. Used in `packet_cleanup` procedure."]
				pub fn pending_send_packet_seqs_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::pending_send_packet_seqs::PendingSendPacketSeqs,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"PendingSendPacketSeqs",
						(),
						[
							63u8, 133u8, 125u8, 186u8, 127u8, 8u8, 57u8, 4u8, 103u8, 189u8, 27u8,
							160u8, 188u8, 175u8, 146u8, 0u8, 231u8, 211u8, 75u8, 73u8, 218u8,
							159u8, 94u8, 87u8, 77u8, 33u8, 222u8, 119u8, 79u8, 91u8, 54u8, 35u8,
						],
					)
				}
				#[doc = " Pending send packet sequences. Used in `packet_cleanup` procedure."]
				pub fn pending_send_packet_seqs_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::pending_send_packet_seqs::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::pending_send_packet_seqs::Param0,
					>,
					types::pending_send_packet_seqs::PendingSendPacketSeqs,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"PendingSendPacketSeqs",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							63u8, 133u8, 125u8, 186u8, 127u8, 8u8, 57u8, 4u8, 103u8, 189u8, 27u8,
							160u8, 188u8, 175u8, 146u8, 0u8, 231u8, 211u8, 75u8, 73u8, 218u8,
							159u8, 94u8, 87u8, 77u8, 33u8, 222u8, 119u8, 79u8, 91u8, 54u8, 35u8,
						],
					)
				}
				#[doc = " Pending send packet sequences. Used in `packet_cleanup` procedure."]
				pub fn pending_send_packet_seqs(
					&self,
					_0: impl ::core::borrow::Borrow<types::pending_send_packet_seqs::Param0>,
					_1: impl ::core::borrow::Borrow<types::pending_send_packet_seqs::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::pending_send_packet_seqs::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::pending_send_packet_seqs::Param1,
						>,
					),
					types::pending_send_packet_seqs::PendingSendPacketSeqs,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"PendingSendPacketSeqs",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							63u8, 133u8, 125u8, 186u8, 127u8, 8u8, 57u8, 4u8, 103u8, 189u8, 27u8,
							160u8, 188u8, 175u8, 146u8, 0u8, 231u8, 211u8, 75u8, 73u8, 218u8,
							159u8, 94u8, 87u8, 77u8, 33u8, 222u8, 119u8, 79u8, 91u8, 54u8, 35u8,
						],
					)
				}
				#[doc = " Pending recv packet sequences. Used in `packet_cleanup` procedure."]
				pub fn pending_recv_packet_seqs_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::pending_recv_packet_seqs::PendingRecvPacketSeqs,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"PendingRecvPacketSeqs",
						(),
						[
							139u8, 134u8, 44u8, 28u8, 186u8, 252u8, 54u8, 60u8, 193u8, 148u8,
							153u8, 185u8, 85u8, 124u8, 145u8, 57u8, 63u8, 46u8, 233u8, 39u8, 177u8,
							164u8, 13u8, 227u8, 113u8, 54u8, 102u8, 36u8, 152u8, 186u8, 53u8,
							102u8,
						],
					)
				}
				#[doc = " Pending recv packet sequences. Used in `packet_cleanup` procedure."]
				pub fn pending_recv_packet_seqs_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::pending_recv_packet_seqs::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::pending_recv_packet_seqs::Param0,
					>,
					types::pending_recv_packet_seqs::PendingRecvPacketSeqs,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"PendingRecvPacketSeqs",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							139u8, 134u8, 44u8, 28u8, 186u8, 252u8, 54u8, 60u8, 193u8, 148u8,
							153u8, 185u8, 85u8, 124u8, 145u8, 57u8, 63u8, 46u8, 233u8, 39u8, 177u8,
							164u8, 13u8, 227u8, 113u8, 54u8, 102u8, 36u8, 152u8, 186u8, 53u8,
							102u8,
						],
					)
				}
				#[doc = " Pending recv packet sequences. Used in `packet_cleanup` procedure."]
				pub fn pending_recv_packet_seqs(
					&self,
					_0: impl ::core::borrow::Borrow<types::pending_recv_packet_seqs::Param0>,
					_1: impl ::core::borrow::Borrow<types::pending_recv_packet_seqs::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::pending_recv_packet_seqs::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::pending_recv_packet_seqs::Param1,
						>,
					),
					types::pending_recv_packet_seqs::PendingRecvPacketSeqs,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ibc",
						"PendingRecvPacketSeqs",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							139u8, 134u8, 44u8, 28u8, 186u8, 252u8, 54u8, 60u8, 193u8, 148u8,
							153u8, 185u8, 85u8, 124u8, 145u8, 57u8, 63u8, 46u8, 233u8, 39u8, 177u8,
							164u8, 13u8, 227u8, 113u8, 54u8, 102u8, 36u8, 152u8, 186u8, 53u8,
							102u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The native asset id, this will use the `NativeCurrency` for all operations."]
				pub fn native_asset_id(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::primitives::currency::CurrencyId,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Ibc",
						"NativeAssetId",
						[
							62u8, 145u8, 102u8, 227u8, 159u8, 92u8, 27u8, 54u8, 159u8, 228u8,
							193u8, 99u8, 75u8, 196u8, 26u8, 250u8, 229u8, 230u8, 88u8, 109u8,
							246u8, 100u8, 152u8, 158u8, 14u8, 25u8, 224u8, 173u8, 224u8, 41u8,
							105u8, 231u8,
						],
					)
				}
				#[doc = " Prefix for events stored in the Off-chain DB via Indexing API, child trie and connection"]
				pub fn pallet_prefix(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Ibc",
						"PalletPrefix",
						[
							64u8, 190u8, 244u8, 122u8, 87u8, 182u8, 217u8, 16u8, 55u8, 223u8,
							128u8, 6u8, 112u8, 30u8, 236u8, 222u8, 153u8, 53u8, 247u8, 102u8,
							196u8, 31u8, 6u8, 186u8, 251u8, 209u8, 114u8, 125u8, 213u8, 222u8,
							240u8, 8u8,
						],
					)
				}
				#[doc = " Light client protocol this chain is operating"]
				pub fn light_client_protocol(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::pallet_ibc::LightClientProtocol,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Ibc",
						"LightClientProtocol",
						[
							240u8, 114u8, 208u8, 235u8, 143u8, 121u8, 26u8, 220u8, 3u8, 235u8,
							204u8, 181u8, 246u8, 38u8, 3u8, 168u8, 135u8, 78u8, 63u8, 128u8, 219u8,
							159u8, 37u8, 244u8, 202u8, 191u8, 202u8, 74u8, 203u8, 26u8, 44u8,
							132u8,
						],
					)
				}
				#[doc = " Expected block time in milliseconds"]
				pub fn expected_block_time(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u64,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Ibc",
						"ExpectedBlockTime",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
				#[doc = " Minimum connection delay period in seconds for ibc connections that can be created or"]
				#[doc = " accepted. Ensure that this is non-zero in production as it's a critical vulnerability."]
				pub fn minimum_connection_delay(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u64,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Ibc",
						"MinimumConnectionDelay",
						[
							128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
							59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
							103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
							246u8,
						],
					)
				}
				#[doc = " Amount to be reserved for client and connection creation"]
				pub fn spam_protection_deposit(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Ibc",
						"SpamProtectionDeposit",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Cleanup packets period (in blocks)"]
				pub fn clean_up_packets_period(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Ibc",
						"CleanUpPacketsPeriod",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " `ServiceChargeOut` represents the service charge rate applied to assets that will be"]
				#[doc = " sent via IBC."]
				#[doc = ""]
				#[doc = " The charge is applied before assets are transffered from the sender side, during"]
				#[doc = " transfer extrinsic (before to burn or send assets to escrow account) before the packet"]
				#[doc = " send via IBC Inter-Blockchain Communication (IBC) protocol."]
				#[doc = ""]
				#[doc = " For example, if the service charge rate for incoming assets is 0.04%, `ServiceChargeIn`"]
				#[doc = " will be configured in rutime as"]
				#[doc = " parameter_types! { pub IbcIcs20ServiceChargeOut: Perbill = Perbill::from_rational(4_u32,"]
				#[doc = " 1000_u32 ) };"]
				pub fn service_charge_out(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::sp_arithmetic::per_things::Perbill,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Ibc",
						"ServiceChargeOut",
						[
							65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
							114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
							200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
						],
					)
				}
			}
		}
	}
	pub mod ics20_fee {
		use super::{root_mod, runtime_types};
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_ibc::ics20_fee::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct SetCharge {
					pub charge: set_charge::Charge,
				}
				pub mod set_charge {
					use super::runtime_types;
					pub type Charge = runtime_types::sp_arithmetic::per_things::Perbill;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetCharge {
					const PALLET: &'static str = "Ics20Fee";
					const CALL: &'static str = "set_charge";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct AddChannelsToFeelessChannelList {
					pub source_channel: add_channels_to_feeless_channel_list::SourceChannel,
					pub destination_channel:
						add_channels_to_feeless_channel_list::DestinationChannel,
				}
				pub mod add_channels_to_feeless_channel_list {
					use super::runtime_types;
					pub type SourceChannel = ::core::primitive::u64;
					pub type DestinationChannel = ::core::primitive::u64;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddChannelsToFeelessChannelList {
					const PALLET: &'static str = "Ics20Fee";
					const CALL: &'static str = "add_channels_to_feeless_channel_list";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct RemoveChannelsFromFeelessChannelList {
					pub source_channel: remove_channels_from_feeless_channel_list::SourceChannel,
					pub destination_channel:
						remove_channels_from_feeless_channel_list::DestinationChannel,
				}
				pub mod remove_channels_from_feeless_channel_list {
					use super::runtime_types;
					pub type SourceChannel = ::core::primitive::u64;
					pub type DestinationChannel = ::core::primitive::u64;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveChannelsFromFeelessChannelList {
					const PALLET: &'static str = "Ics20Fee";
					const CALL: &'static str = "remove_channels_from_feeless_channel_list";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				pub fn set_charge(
					&self,
					charge: types::set_charge::Charge,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetCharge> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Ics20Fee",
						"set_charge",
						types::SetCharge { charge },
						[
							61u8, 218u8, 232u8, 138u8, 52u8, 53u8, 69u8, 37u8, 54u8, 235u8, 127u8,
							163u8, 51u8, 167u8, 165u8, 183u8, 137u8, 10u8, 15u8, 238u8, 207u8,
							226u8, 173u8, 177u8, 178u8, 161u8, 97u8, 130u8, 17u8, 30u8, 1u8, 229u8,
						],
					)
				}
				pub fn add_channels_to_feeless_channel_list(
					&self,
					source_channel: types::add_channels_to_feeless_channel_list::SourceChannel,
					destination_channel : types :: add_channels_to_feeless_channel_list :: DestinationChannel,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::AddChannelsToFeelessChannelList,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Ics20Fee",
						"add_channels_to_feeless_channel_list",
						types::AddChannelsToFeelessChannelList {
							source_channel,
							destination_channel,
						},
						[
							240u8, 91u8, 98u8, 19u8, 68u8, 233u8, 245u8, 63u8, 201u8, 66u8, 237u8,
							30u8, 138u8, 115u8, 67u8, 200u8, 200u8, 120u8, 196u8, 39u8, 39u8, 48u8,
							235u8, 179u8, 16u8, 54u8, 207u8, 80u8, 174u8, 246u8, 0u8, 48u8,
						],
					)
				}
				pub fn remove_channels_from_feeless_channel_list(
					&self,
					source_channel: types::remove_channels_from_feeless_channel_list::SourceChannel,
					destination_channel : types :: remove_channels_from_feeless_channel_list :: DestinationChannel,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::RemoveChannelsFromFeelessChannelList,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"Ics20Fee",
						"remove_channels_from_feeless_channel_list",
						types::RemoveChannelsFromFeelessChannelList {
							source_channel,
							destination_channel,
						},
						[
							187u8, 25u8, 10u8, 235u8, 7u8, 252u8, 97u8, 26u8, 161u8, 75u8, 217u8,
							214u8, 131u8, 112u8, 222u8, 79u8, 22u8, 255u8, 166u8, 176u8, 42u8,
							84u8, 23u8, 229u8, 154u8, 64u8, 87u8, 189u8, 131u8, 253u8, 26u8, 224u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_ibc::ics20_fee::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct IbcTransferFeeCollected {
				pub amount: ibc_transfer_fee_collected::Amount,
				pub asset_id: ibc_transfer_fee_collected::AssetId,
			}
			pub mod ibc_transfer_fee_collected {
				use super::runtime_types;
				pub type Amount = ::core::primitive::u128;
				pub type AssetId = runtime_types::primitives::currency::CurrencyId;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for IbcTransferFeeCollected {
				const PALLET: &'static str = "Ics20Fee";
				const EVENT: &'static str = "IbcTransferFeeCollected";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct FeeLessChannelIdsAdded {
				pub source_channel: fee_less_channel_ids_added::SourceChannel,
				pub destination_channel: fee_less_channel_ids_added::DestinationChannel,
			}
			pub mod fee_less_channel_ids_added {
				use super::runtime_types;
				pub type SourceChannel = ::core::primitive::u64;
				pub type DestinationChannel = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for FeeLessChannelIdsAdded {
				const PALLET: &'static str = "Ics20Fee";
				const EVENT: &'static str = "FeeLessChannelIdsAdded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct FeeLessChannelIdsRemoved {
				pub source_channel: fee_less_channel_ids_removed::SourceChannel,
				pub destination_channel: fee_less_channel_ids_removed::DestinationChannel,
			}
			pub mod fee_less_channel_ids_removed {
				use super::runtime_types;
				pub type SourceChannel = ::core::primitive::u64;
				pub type DestinationChannel = ::core::primitive::u64;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for FeeLessChannelIdsRemoved {
				const PALLET: &'static str = "Ics20Fee";
				const EVENT: &'static str = "FeeLessChannelIdsRemoved";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod service_charge_in {
					use super::runtime_types;
					pub type ServiceChargeIn = runtime_types::sp_arithmetic::per_things::Perbill;
				}
				pub mod fee_less_channel_ids {
					use super::runtime_types;
					pub type FeeLessChannelIds = ();
					pub type Param0 = ::core::primitive::u64;
					pub type Param1 = ::core::primitive::u64;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn service_charge_in(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::service_charge_in::ServiceChargeIn,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ics20Fee",
						"ServiceChargeIn",
						(),
						[
							129u8, 39u8, 68u8, 5u8, 178u8, 99u8, 132u8, 149u8, 147u8, 107u8, 68u8,
							29u8, 176u8, 135u8, 1u8, 159u8, 190u8, 237u8, 73u8, 213u8, 66u8, 173u8,
							48u8, 55u8, 181u8, 238u8, 14u8, 30u8, 48u8, 229u8, 247u8, 96u8,
						],
					)
				}
				#[doc = " storage map. key is tuple of (source_channel.sequence(), destination_channel.sequence()) and"]
				#[doc = " value () that means that this group of channels is feeless"]
				pub fn fee_less_channel_ids_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::fee_less_channel_ids::FeeLessChannelIds,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ics20Fee",
						"FeeLessChannelIds",
						(),
						[
							122u8, 208u8, 54u8, 30u8, 164u8, 139u8, 128u8, 106u8, 214u8, 8u8,
							106u8, 105u8, 95u8, 140u8, 17u8, 72u8, 88u8, 252u8, 41u8, 69u8, 101u8,
							65u8, 5u8, 94u8, 247u8, 244u8, 19u8, 208u8, 160u8, 159u8, 209u8, 15u8,
						],
					)
				}
				#[doc = " storage map. key is tuple of (source_channel.sequence(), destination_channel.sequence()) and"]
				#[doc = " value () that means that this group of channels is feeless"]
				pub fn fee_less_channel_ids_iter1(
					&self,
					_0: impl ::core::borrow::Borrow<types::fee_less_channel_ids::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::fee_less_channel_ids::Param0,
					>,
					types::fee_less_channel_ids::FeeLessChannelIds,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ics20Fee",
						"FeeLessChannelIds",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							122u8, 208u8, 54u8, 30u8, 164u8, 139u8, 128u8, 106u8, 214u8, 8u8,
							106u8, 105u8, 95u8, 140u8, 17u8, 72u8, 88u8, 252u8, 41u8, 69u8, 101u8,
							65u8, 5u8, 94u8, 247u8, 244u8, 19u8, 208u8, 160u8, 159u8, 209u8, 15u8,
						],
					)
				}
				#[doc = " storage map. key is tuple of (source_channel.sequence(), destination_channel.sequence()) and"]
				#[doc = " value () that means that this group of channels is feeless"]
				pub fn fee_less_channel_ids(
					&self,
					_0: impl ::core::borrow::Borrow<types::fee_less_channel_ids::Param0>,
					_1: impl ::core::borrow::Borrow<types::fee_less_channel_ids::Param1>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::fee_less_channel_ids::Param0,
						>,
						::subxt::ext::subxt_core::storage::address::StaticStorageKey<
							types::fee_less_channel_ids::Param1,
						>,
					),
					types::fee_less_channel_ids::FeeLessChannelIds,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"Ics20Fee",
						"FeeLessChannelIds",
						(
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_0.borrow(),
							),
							::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
								_1.borrow(),
							),
						),
						[
							122u8, 208u8, 54u8, 30u8, 164u8, 139u8, 128u8, 106u8, 214u8, 8u8,
							106u8, 105u8, 95u8, 140u8, 17u8, 72u8, 88u8, 252u8, 41u8, 69u8, 101u8,
							65u8, 5u8, 94u8, 247u8, 244u8, 19u8, 208u8, 160u8, 159u8, 209u8, 15u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " `ServiceChargeIn` represents the service charge rate applied to assets upon receipt via"]
				#[doc = " IBC."]
				#[doc = ""]
				#[doc = " The charge is applied when assets are delivered to the receiving side, on"]
				#[doc = " deliver(before to mint, send assets to destination account) extrinsic using the"]
				#[doc = " Inter-Blockchain Communication (IBC) protocol."]
				#[doc = ""]
				#[doc = " For example, if the service charge rate for incoming assets is 0.04%, `ServiceChargeIn`"]
				#[doc = " will be configured in rutime as"]
				#[doc = " parameter_types! { pub IbcIcs20ServiceChargeIn: Perbill = Perbill::from_rational(4_u32,"]
				#[doc = " 1000_u32 ) };"]
				pub fn service_charge_in(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::sp_arithmetic::per_things::Perbill,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Ics20Fee",
						"ServiceChargeIn",
						[
							65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
							114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
							200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
						],
					)
				}
				pub fn pallet_id(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::frame_support::PalletId,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"Ics20Fee",
						"PalletId",
						[
							56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
							161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
							129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
						],
					)
				}
			}
		}
	}
	pub mod pallet_multihop_xcm_ibc {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_multihop_xcm_ibc::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_multihop_xcm_ibc::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct AddRoute {
					pub route_id: add_route::RouteId,
					pub route: add_route::Route,
				}
				pub mod add_route {
					use super::runtime_types;
					pub type RouteId = ::core::primitive::u128;
					pub type Route = runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						runtime_types::composable_traits::xcm::memo::ChainInfo,
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					)>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddRoute {
					const PALLET: &'static str = "PalletMultihopXcmIbc";
					const CALL: &'static str = "add_route";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				pub fn add_route(
					&self,
					route_id: types::add_route::RouteId,
					route: types::add_route::Route,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AddRoute> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletMultihopXcmIbc",
						"add_route",
						types::AddRoute { route_id, route },
						[
							176u8, 90u8, 147u8, 13u8, 137u8, 218u8, 188u8, 154u8, 227u8, 186u8,
							4u8, 104u8, 241u8, 140u8, 221u8, 14u8, 60u8, 239u8, 186u8, 117u8, 65u8,
							142u8, 181u8, 224u8, 77u8, 127u8, 169u8, 76u8, 42u8, 227u8, 13u8, 22u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_multihop_xcm_ibc::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct SuccessXcmToIbc {
				pub origin_address: success_xcm_to_ibc::OriginAddress,
				pub to: success_xcm_to_ibc::To,
				pub amount: success_xcm_to_ibc::Amount,
				pub asset_id: success_xcm_to_ibc::AssetId,
				pub memo: success_xcm_to_ibc::Memo,
			}
			pub mod success_xcm_to_ibc {
				use super::runtime_types;
				pub type OriginAddress = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type To = [::core::primitive::u8; 32usize];
				pub type Amount = ::core::primitive::u128;
				pub type AssetId = runtime_types::primitives::currency::CurrencyId;
				pub type Memo = ::core::option::Option<runtime_types::common::ibc::RawMemo>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for SuccessXcmToIbc {
				const PALLET: &'static str = "PalletMultihopXcmIbc";
				const EVENT: &'static str = "SuccessXcmToIbc";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct FailedXcmToIbc {
				pub origin_address: failed_xcm_to_ibc::OriginAddress,
				pub to: failed_xcm_to_ibc::To,
				pub amount: failed_xcm_to_ibc::Amount,
				pub asset_id: failed_xcm_to_ibc::AssetId,
				pub memo: failed_xcm_to_ibc::Memo,
			}
			pub mod failed_xcm_to_ibc {
				use super::runtime_types;
				pub type OriginAddress = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type To = [::core::primitive::u8; 32usize];
				pub type Amount = ::core::primitive::u128;
				pub type AssetId = runtime_types::primitives::currency::CurrencyId;
				pub type Memo = ::core::option::Option<runtime_types::common::ibc::RawMemo>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for FailedXcmToIbc {
				const PALLET: &'static str = "PalletMultihopXcmIbc";
				const EVENT: &'static str = "FailedXcmToIbc";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct FailedCallback {
				pub origin_address: failed_callback::OriginAddress,
				pub route_id: failed_callback::RouteId,
				pub reason: failed_callback::Reason,
			}
			pub mod failed_callback {
				use super::runtime_types;
				pub type OriginAddress = [::core::primitive::u8; 32usize];
				pub type RouteId = ::core::primitive::u128;
				pub type Reason =
					runtime_types::pallet_multihop_xcm_ibc::pallet::MultihopEventReason;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for FailedCallback {
				const PALLET: &'static str = "PalletMultihopXcmIbc";
				const EVENT: &'static str = "FailedCallback";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct MultihopXcmMemo {
				pub reason: multihop_xcm_memo::Reason,
				pub from: multihop_xcm_memo::From,
				pub to: multihop_xcm_memo::To,
				pub amount: multihop_xcm_memo::Amount,
				pub asset_id: multihop_xcm_memo::AssetId,
				pub is_error: multihop_xcm_memo::IsError,
			}
			pub mod multihop_xcm_memo {
				use super::runtime_types;
				pub type Reason =
					runtime_types::pallet_multihop_xcm_ibc::pallet::MultihopEventReason;
				pub type From = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type To = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Amount = ::core::primitive::u128;
				pub type AssetId = ::core::primitive::u128;
				pub type IsError = ::core::primitive::bool;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for MultihopXcmMemo {
				const PALLET: &'static str = "PalletMultihopXcmIbc";
				const EVENT: &'static str = "MultihopXcmMemo";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct FailedMatchLocation;
			impl ::subxt::ext::subxt_core::events::StaticEvent for FailedMatchLocation {
				const PALLET: &'static str = "PalletMultihopXcmIbc";
				const EVENT: &'static str = "FailedMatchLocation";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod route_id_to_route_path {
					use super::runtime_types;
					pub type RouteIdToRoutePath =
						runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							runtime_types::composable_traits::xcm::memo::ChainInfo,
							runtime_types::bounded_collections::bounded_vec::BoundedVec<
								::core::primitive::u8,
							>,
						)>;
					pub type Param0 = ::core::primitive::u128;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn route_id_to_route_path_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::route_id_to_route_path::RouteIdToRoutePath,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletMultihopXcmIbc",
						"RouteIdToRoutePath",
						(),
						[
							187u8, 109u8, 156u8, 105u8, 159u8, 81u8, 244u8, 227u8, 179u8, 18u8,
							67u8, 254u8, 10u8, 221u8, 192u8, 185u8, 56u8, 4u8, 52u8, 190u8, 137u8,
							115u8, 23u8, 198u8, 84u8, 79u8, 103u8, 179u8, 7u8, 218u8, 179u8, 55u8,
						],
					)
				}
				pub fn route_id_to_route_path(
					&self,
					_0: impl ::core::borrow::Borrow<types::route_id_to_route_path::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::route_id_to_route_path::Param0,
					>,
					types::route_id_to_route_path::RouteIdToRoutePath,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletMultihopXcmIbc",
						"RouteIdToRoutePath",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							187u8, 109u8, 156u8, 105u8, 159u8, 81u8, 244u8, 227u8, 179u8, 18u8,
							67u8, 254u8, 10u8, 221u8, 192u8, 185u8, 56u8, 4u8, 52u8, 190u8, 137u8,
							115u8, 23u8, 198u8, 84u8, 79u8, 103u8, 179u8, 7u8, 218u8, 179u8, 55u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				pub fn pallet_instance_id(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u8,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletMultihopXcmIbc",
						"PalletInstanceId",
						[
							141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
							28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
							114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
							165u8,
						],
					)
				}
				pub fn max_multihop_count(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletMultihopXcmIbc",
						"MaxMultihopCount",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The maximum length of chain name"]
				pub fn chain_name_vec_limit(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletMultihopXcmIbc",
						"ChainNameVecLimit",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
			}
		}
	}
	pub mod pallet_xcm_helper {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_xcm_helper::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_xcm_helper::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Update xcm fees amount to be used in xcm.Withdraw message"]
				pub struct UpdateXcmWeightFee {
					pub xcm_call: update_xcm_weight_fee::XcmCall,
					pub xcm_weight_fee_misc: update_xcm_weight_fee::XcmWeightFeeMisc,
				}
				pub mod update_xcm_weight_fee {
					use super::runtime_types;
					pub type XcmCall = runtime_types::pallet_xcm_helper::ump::XcmCall;
					pub type XcmWeightFeeMisc =
						runtime_types::pallet_xcm_helper::ump::XcmWeightFeeMisc<
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateXcmWeightFee {
					const PALLET: &'static str = "PalletXcmHelper";
					const CALL: &'static str = "update_xcm_weight_fee";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Update xcm fees amount to be used in xcm.Withdraw message"]
				pub fn update_xcm_weight_fee(
					&self,
					xcm_call: types::update_xcm_weight_fee::XcmCall,
					xcm_weight_fee_misc: types::update_xcm_weight_fee::XcmWeightFeeMisc,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateXcmWeightFee>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletXcmHelper",
						"update_xcm_weight_fee",
						types::UpdateXcmWeightFee { xcm_call, xcm_weight_fee_misc },
						[
							19u8, 60u8, 95u8, 38u8, 42u8, 149u8, 211u8, 246u8, 230u8, 67u8, 175u8,
							221u8, 68u8, 92u8, 210u8, 30u8, 243u8, 197u8, 188u8, 236u8, 83u8, 99u8,
							109u8, 157u8, 245u8, 22u8, 226u8, 86u8, 123u8, 153u8, 69u8, 104u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_xcm_helper::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Xcm fee and weight updated"]
			pub struct XcmWeightFeeUpdated(pub xcm_weight_fee_updated::Field0);
			pub mod xcm_weight_fee_updated {
				use super::runtime_types;
				pub type Field0 = runtime_types::pallet_xcm_helper::ump::XcmWeightFeeMisc<
					runtime_types::sp_weights::weight_v2::Weight,
					::core::primitive::u128,
				>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for XcmWeightFeeUpdated {
				const PALLET: &'static str = "PalletXcmHelper";
				const EVENT: &'static str = "XcmWeightFeeUpdated";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod xcm_weight_fee {
					use super::runtime_types;
					pub type XcmWeightFee = runtime_types::pallet_xcm_helper::ump::XcmWeightFeeMisc<
						runtime_types::sp_weights::weight_v2::Weight,
						::core::primitive::u128,
					>;
					pub type Param0 = runtime_types::pallet_xcm_helper::ump::XcmCall;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				pub fn xcm_weight_fee_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::xcm_weight_fee::XcmWeightFee,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletXcmHelper",
						"XcmWeightFee",
						(),
						[
							216u8, 140u8, 43u8, 4u8, 73u8, 56u8, 231u8, 11u8, 69u8, 80u8, 225u8,
							21u8, 244u8, 13u8, 218u8, 42u8, 142u8, 222u8, 57u8, 47u8, 208u8, 32u8,
							148u8, 93u8, 21u8, 172u8, 41u8, 78u8, 111u8, 47u8, 13u8, 255u8,
						],
					)
				}
				pub fn xcm_weight_fee(
					&self,
					_0: impl ::core::borrow::Borrow<types::xcm_weight_fee::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::xcm_weight_fee::Param0,
					>,
					types::xcm_weight_fee::XcmWeightFee,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletXcmHelper",
						"XcmWeightFee",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							216u8, 140u8, 43u8, 4u8, 73u8, 56u8, 231u8, 11u8, 69u8, 80u8, 225u8,
							21u8, 244u8, 13u8, 218u8, 42u8, 142u8, 222u8, 57u8, 47u8, 208u8, 32u8,
							148u8, 93u8, 21u8, 172u8, 41u8, 78u8, 111u8, 47u8, 13u8, 255u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " Relay network"]
				pub fn relay_network(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::xcm::v3::junction::NetworkId,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletXcmHelper",
						"RelayNetwork",
						[
							4u8, 181u8, 250u8, 94u8, 113u8, 20u8, 210u8, 201u8, 235u8, 145u8,
							179u8, 94u8, 162u8, 164u8, 136u8, 163u8, 83u8, 72u8, 196u8, 45u8,
							210u8, 177u8, 238u8, 16u8, 229u8, 73u8, 131u8, 122u8, 197u8, 210u8,
							48u8, 54u8,
						],
					)
				}
				#[doc = " Pallet account for collecting xcm fees"]
				pub fn pallet_id(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::frame_support::PalletId,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletXcmHelper",
						"PalletId",
						[
							56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
							161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
							129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
						],
					)
				}
				#[doc = " Account on relaychain for receiving refunded fees"]
				pub fn refund_location(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::subxt::ext::subxt_core::utils::AccountId32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletXcmHelper",
						"RefundLocation",
						[
							115u8, 233u8, 13u8, 223u8, 88u8, 20u8, 202u8, 139u8, 153u8, 28u8,
							155u8, 157u8, 224u8, 66u8, 3u8, 250u8, 23u8, 53u8, 88u8, 168u8, 211u8,
							204u8, 122u8, 166u8, 248u8, 23u8, 174u8, 225u8, 99u8, 108u8, 89u8,
							135u8,
						],
					)
				}
				#[doc = " Notify call timeout"]
				pub fn notify_timeout(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletXcmHelper",
						"NotifyTimeout",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Relay currency"]
				pub fn relay_currency(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::primitives::currency::CurrencyId,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletXcmHelper",
						"RelayCurrency",
						[
							62u8, 145u8, 102u8, 227u8, 159u8, 92u8, 27u8, 54u8, 159u8, 228u8,
							193u8, 99u8, 75u8, 196u8, 26u8, 250u8, 229u8, 230u8, 88u8, 109u8,
							246u8, 100u8, 152u8, 158u8, 14u8, 25u8, 224u8, 173u8, 224u8, 41u8,
							105u8, 231u8,
						],
					)
				}
			}
		}
	}
	pub mod pallet_liquid_staking {
		use super::{root_mod, runtime_types};
		#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
		pub type Error = runtime_types::pallet_liquid_staking::pallet::Error;
		#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
		pub type Call = runtime_types::pallet_liquid_staking::pallet::Call;
		pub mod calls {
			use super::{root_mod, runtime_types};
			type DispatchError = runtime_types::sp_runtime::DispatchError;
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Put assets under staking, the native assets will be transferred to the account"]
				#[doc = "owned by the pallet, user receive derivative in return, such derivative can be"]
				#[doc = "further used as collateral for lending."]
				#[doc = ""]
				#[doc = "- `amount`: the amount of staking assets"]
				pub struct Stake {
					#[codec(compact)]
					pub amount: stake::Amount,
				}
				pub mod stake {
					use super::runtime_types;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Stake {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "stake";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Unstake by exchange derivative for assets, the assets will not be available immediately."]
				#[doc = "Instead, the request is recorded and pending for the nomination accounts on relaychain"]
				#[doc = "chain to do the `unbond` operation."]
				#[doc = ""]
				#[doc = "- `amount`: the amount of derivative"]
				pub struct Unstake {
					#[codec(compact)]
					pub liquid_amount: unstake::LiquidAmount,
					pub unstake_provider: unstake::UnstakeProvider,
				}
				pub mod unstake {
					use super::runtime_types;
					pub type LiquidAmount = ::core::primitive::u128;
					pub type UnstakeProvider =
						runtime_types::pallet_liquid_staking::types::UnstakeProvider;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Unstake {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "unstake";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Update insurance pool's reserve_factor"]
				pub struct UpdateReserveFactor {
					pub reserve_factor: update_reserve_factor::ReserveFactor,
				}
				pub mod update_reserve_factor {
					use super::runtime_types;
					pub type ReserveFactor = runtime_types::sp_arithmetic::per_things::Permill;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateReserveFactor {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "update_reserve_factor";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Update ledger's max bonded cap"]
				pub struct UpdateStakingLedgerCap {
					#[codec(compact)]
					pub cap: update_staking_ledger_cap::Cap,
				}
				pub mod update_staking_ledger_cap {
					use super::runtime_types;
					pub type Cap = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateStakingLedgerCap {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "update_staking_ledger_cap";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Bond on relaychain via xcm.transact"]
				pub struct Bond {
					pub derivative_index: bond::DerivativeIndex,
					#[codec(compact)]
					pub amount: bond::Amount,
					pub payee: bond::Payee,
				}
				pub mod bond {
					use super::runtime_types;
					pub type DerivativeIndex = ::core::primitive::u16;
					pub type Amount = ::core::primitive::u128;
					pub type Payee = runtime_types::pallet_xcm_helper::ump::RewardDestination<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Bond {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "bond";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Bond_extra on relaychain via xcm.transact"]
				pub struct BondExtra {
					pub derivative_index: bond_extra::DerivativeIndex,
					#[codec(compact)]
					pub amount: bond_extra::Amount,
				}
				pub mod bond_extra {
					use super::runtime_types;
					pub type DerivativeIndex = ::core::primitive::u16;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for BondExtra {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "bond_extra";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Unbond on relaychain via xcm.transact"]
				pub struct Unbond {
					pub derivative_index: unbond::DerivativeIndex,
					#[codec(compact)]
					pub amount: unbond::Amount,
				}
				pub mod unbond {
					use super::runtime_types;
					pub type DerivativeIndex = ::core::primitive::u16;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Unbond {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "unbond";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Rebond on relaychain via xcm.transact"]
				pub struct Rebond {
					pub derivative_index: rebond::DerivativeIndex,
					#[codec(compact)]
					pub amount: rebond::Amount,
				}
				pub mod rebond {
					use super::runtime_types;
					pub type DerivativeIndex = ::core::primitive::u16;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Rebond {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "rebond";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Withdraw unbonded on relaychain via xcm.transact"]
				pub struct WithdrawUnbonded {
					pub derivative_index: withdraw_unbonded::DerivativeIndex,
					pub num_slashing_spans: withdraw_unbonded::NumSlashingSpans,
				}
				pub mod withdraw_unbonded {
					use super::runtime_types;
					pub type DerivativeIndex = ::core::primitive::u16;
					pub type NumSlashingSpans = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for WithdrawUnbonded {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "withdraw_unbonded";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Nominate on relaychain via xcm.transact"]
				pub struct Nominate {
					pub derivative_index: nominate::DerivativeIndex,
					pub targets: nominate::Targets,
				}
				pub mod nominate {
					use super::runtime_types;
					pub type DerivativeIndex = ::core::primitive::u16;
					pub type Targets = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Nominate {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "nominate";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Internal call which is expected to be triggered only by xcm instruction"]
				pub struct NotificationReceived {
					pub query_id: notification_received::QueryId,
					pub response: notification_received::Response,
				}
				pub mod notification_received {
					use super::runtime_types;
					pub type QueryId = ::core::primitive::u64;
					pub type Response = runtime_types::xcm::v3::Response;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for NotificationReceived {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "notification_received";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Claim assets back when current era index arrived"]
				#[doc = "at target era"]
				pub struct ClaimFor {
					pub dest: claim_for::Dest,
				}
				pub mod claim_for {
					use super::runtime_types;
					pub type Dest = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClaimFor {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "claim_for";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Force set era start block"]
				pub struct ForceSetEraStartBlock {
					pub block_number: force_set_era_start_block::BlockNumber,
				}
				pub mod force_set_era_start_block {
					use super::runtime_types;
					pub type BlockNumber = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceSetEraStartBlock {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "force_set_era_start_block";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Force set current era"]
				pub struct ForceSetCurrentEra {
					pub era: force_set_current_era::Era,
				}
				pub mod force_set_current_era {
					use super::runtime_types;
					pub type Era = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceSetCurrentEra {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "force_set_current_era";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Force advance era"]
				pub struct ForceAdvanceEra {
					pub offset: force_advance_era::Offset,
				}
				pub mod force_advance_era {
					use super::runtime_types;
					pub type Offset = ::core::primitive::u32;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceAdvanceEra {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "force_advance_era";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Force matching"]
				pub struct ForceMatching;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceMatching {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "force_matching";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Force set staking_ledger"]
				pub struct ForceSetStakingLedger {
					pub derivative_index: force_set_staking_ledger::DerivativeIndex,
					pub staking_ledger: force_set_staking_ledger::StakingLedger,
				}
				pub mod force_set_staking_ledger {
					use super::runtime_types;
					pub type DerivativeIndex = ::core::primitive::u16;
					pub type StakingLedger =
						runtime_types::pallet_liquid_staking::types::StakingLedger<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u128,
						>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceSetStakingLedger {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "force_set_staking_ledger";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set current era by providing storage proof"]
				pub struct SetCurrentEra {
					pub era: set_current_era::Era,
					pub proof: set_current_era::Proof,
				}
				pub mod set_current_era {
					use super::runtime_types;
					pub type Era = ::core::primitive::u32;
					pub type Proof = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetCurrentEra {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "set_current_era";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Set staking_ledger by providing storage proof"]
				pub struct SetStakingLedger {
					pub derivative_index: set_staking_ledger::DerivativeIndex,
					pub staking_ledger: set_staking_ledger::StakingLedger,
					pub proof: set_staking_ledger::Proof,
				}
				pub mod set_staking_ledger {
					use super::runtime_types;
					pub type DerivativeIndex = ::core::primitive::u16;
					pub type StakingLedger =
						runtime_types::pallet_liquid_staking::types::StakingLedger<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u128,
						>;
					pub type Proof = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetStakingLedger {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "set_staking_ledger";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Reduces reserves by transferring to receiver."]
				pub struct ReduceReserves {
					pub receiver: reduce_reserves::Receiver,
					#[codec(compact)]
					pub reduce_amount: reduce_reserves::ReduceAmount,
				}
				pub mod reduce_reserves {
					use super::runtime_types;
					pub type Receiver = ::subxt::ext::subxt_core::utils::MultiAddress<
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u32,
					>;
					pub type ReduceAmount = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ReduceReserves {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "reduce_reserves";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Cancel unstake"]
				pub struct CancelUnstake {
					#[codec(compact)]
					pub amount: cancel_unstake::Amount,
				}
				pub mod cancel_unstake {
					use super::runtime_types;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelUnstake {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "cancel_unstake";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Update commission rate"]
				pub struct UpdateCommissionRate {
					pub commission_rate: update_commission_rate::CommissionRate,
				}
				pub mod update_commission_rate {
					use super::runtime_types;
					pub type CommissionRate = runtime_types::sp_arithmetic::fixed_point::FixedU128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateCommissionRate {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "update_commission_rate";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Fast match unstake through matching pool"]
				pub struct FastMatchUnstake {
					pub unstaker_list: fast_match_unstake::UnstakerList,
				}
				pub mod fast_match_unstake {
					use super::runtime_types;
					pub type UnstakerList = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for FastMatchUnstake {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "fast_match_unstake";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Update incentive amount"]
				pub struct UpdateIncentive {
					#[codec(compact)]
					pub amount: update_incentive::Amount,
				}
				pub mod update_incentive {
					use super::runtime_types;
					pub type Amount = ::core::primitive::u128;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateIncentive {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "update_incentive";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct InitiateExchangeRate;
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for InitiateExchangeRate {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "initiate_exchange_rate";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct RelaychainStorageProofKey {
					pub derivative_index: relaychain_storage_proof_key::DerivativeIndex,
				}
				pub mod relaychain_storage_proof_key {
					use super::runtime_types;
					pub type DerivativeIndex = ::core::primitive::u16;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RelaychainStorageProofKey {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "relaychain_storage_proof_key";
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct SetMembers {
					pub members: set_members::Members,
				}
				pub mod set_members {
					use super::runtime_types;
					pub type Members = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetMembers {
					const PALLET: &'static str = "PalletLiquidStaking";
					const CALL: &'static str = "set_members";
				}
			}
			pub struct TransactionApi;
			impl TransactionApi {
				#[doc = "Put assets under staking, the native assets will be transferred to the account"]
				#[doc = "owned by the pallet, user receive derivative in return, such derivative can be"]
				#[doc = "further used as collateral for lending."]
				#[doc = ""]
				#[doc = "- `amount`: the amount of staking assets"]
				pub fn stake(
					&self,
					amount: types::stake::Amount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Stake> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"stake",
						types::Stake { amount },
						[
							14u8, 102u8, 12u8, 181u8, 60u8, 205u8, 200u8, 205u8, 126u8, 30u8, 20u8,
							0u8, 9u8, 136u8, 173u8, 175u8, 150u8, 197u8, 166u8, 60u8, 250u8, 93u8,
							207u8, 109u8, 165u8, 84u8, 102u8, 161u8, 145u8, 109u8, 139u8, 12u8,
						],
					)
				}
				#[doc = "Unstake by exchange derivative for assets, the assets will not be available immediately."]
				#[doc = "Instead, the request is recorded and pending for the nomination accounts on relaychain"]
				#[doc = "chain to do the `unbond` operation."]
				#[doc = ""]
				#[doc = "- `amount`: the amount of derivative"]
				pub fn unstake(
					&self,
					liquid_amount: types::unstake::LiquidAmount,
					unstake_provider: types::unstake::UnstakeProvider,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Unstake> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"unstake",
						types::Unstake { liquid_amount, unstake_provider },
						[
							151u8, 107u8, 72u8, 167u8, 164u8, 42u8, 225u8, 206u8, 44u8, 2u8, 181u8,
							39u8, 181u8, 208u8, 48u8, 163u8, 136u8, 18u8, 136u8, 59u8, 140u8, 43u8,
							214u8, 94u8, 95u8, 51u8, 83u8, 87u8, 213u8, 241u8, 120u8, 118u8,
						],
					)
				}
				#[doc = "Update insurance pool's reserve_factor"]
				pub fn update_reserve_factor(
					&self,
					reserve_factor: types::update_reserve_factor::ReserveFactor,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateReserveFactor>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"update_reserve_factor",
						types::UpdateReserveFactor { reserve_factor },
						[
							147u8, 51u8, 201u8, 38u8, 247u8, 113u8, 147u8, 9u8, 43u8, 17u8, 39u8,
							22u8, 227u8, 195u8, 219u8, 70u8, 166u8, 37u8, 173u8, 92u8, 11u8, 246u8,
							54u8, 15u8, 234u8, 190u8, 58u8, 217u8, 70u8, 196u8, 250u8, 71u8,
						],
					)
				}
				#[doc = "Update ledger's max bonded cap"]
				pub fn update_staking_ledger_cap(
					&self,
					cap: types::update_staking_ledger_cap::Cap,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::UpdateStakingLedgerCap,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"update_staking_ledger_cap",
						types::UpdateStakingLedgerCap { cap },
						[
							110u8, 231u8, 219u8, 166u8, 79u8, 120u8, 125u8, 214u8, 163u8, 154u8,
							80u8, 183u8, 42u8, 33u8, 105u8, 141u8, 33u8, 213u8, 192u8, 56u8, 63u8,
							113u8, 114u8, 201u8, 170u8, 53u8, 205u8, 112u8, 81u8, 134u8, 69u8,
							107u8,
						],
					)
				}
				#[doc = "Bond on relaychain via xcm.transact"]
				pub fn bond(
					&self,
					derivative_index: types::bond::DerivativeIndex,
					amount: types::bond::Amount,
					payee: types::bond::Payee,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Bond> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"bond",
						types::Bond { derivative_index, amount, payee },
						[
							122u8, 123u8, 239u8, 178u8, 153u8, 200u8, 206u8, 237u8, 46u8, 89u8,
							235u8, 153u8, 70u8, 30u8, 200u8, 72u8, 233u8, 110u8, 138u8, 87u8,
							161u8, 231u8, 127u8, 200u8, 156u8, 175u8, 8u8, 115u8, 104u8, 197u8,
							26u8, 246u8,
						],
					)
				}
				#[doc = "Bond_extra on relaychain via xcm.transact"]
				pub fn bond_extra(
					&self,
					derivative_index: types::bond_extra::DerivativeIndex,
					amount: types::bond_extra::Amount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::BondExtra> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"bond_extra",
						types::BondExtra { derivative_index, amount },
						[
							195u8, 79u8, 161u8, 53u8, 190u8, 67u8, 223u8, 22u8, 138u8, 169u8,
							189u8, 145u8, 112u8, 225u8, 7u8, 50u8, 161u8, 109u8, 192u8, 18u8, 42u8,
							177u8, 21u8, 57u8, 228u8, 1u8, 33u8, 163u8, 96u8, 171u8, 104u8, 169u8,
						],
					)
				}
				#[doc = "Unbond on relaychain via xcm.transact"]
				pub fn unbond(
					&self,
					derivative_index: types::unbond::DerivativeIndex,
					amount: types::unbond::Amount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Unbond> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"unbond",
						types::Unbond { derivative_index, amount },
						[
							93u8, 242u8, 33u8, 150u8, 31u8, 132u8, 217u8, 155u8, 28u8, 164u8, 54u8,
							126u8, 143u8, 122u8, 235u8, 155u8, 66u8, 209u8, 7u8, 131u8, 106u8,
							88u8, 101u8, 204u8, 73u8, 234u8, 176u8, 143u8, 28u8, 46u8, 51u8, 90u8,
						],
					)
				}
				#[doc = "Rebond on relaychain via xcm.transact"]
				pub fn rebond(
					&self,
					derivative_index: types::rebond::DerivativeIndex,
					amount: types::rebond::Amount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Rebond> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"rebond",
						types::Rebond { derivative_index, amount },
						[
							39u8, 209u8, 251u8, 248u8, 171u8, 100u8, 153u8, 167u8, 237u8, 164u8,
							126u8, 50u8, 63u8, 70u8, 12u8, 173u8, 110u8, 147u8, 52u8, 133u8, 15u8,
							2u8, 180u8, 74u8, 172u8, 175u8, 147u8, 129u8, 128u8, 66u8, 164u8,
							111u8,
						],
					)
				}
				#[doc = "Withdraw unbonded on relaychain via xcm.transact"]
				pub fn withdraw_unbonded(
					&self,
					derivative_index: types::withdraw_unbonded::DerivativeIndex,
					num_slashing_spans: types::withdraw_unbonded::NumSlashingSpans,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::WithdrawUnbonded>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"withdraw_unbonded",
						types::WithdrawUnbonded { derivative_index, num_slashing_spans },
						[
							145u8, 156u8, 38u8, 98u8, 13u8, 84u8, 214u8, 84u8, 101u8, 218u8, 253u8,
							169u8, 106u8, 80u8, 130u8, 103u8, 251u8, 241u8, 130u8, 62u8, 158u8,
							54u8, 59u8, 112u8, 241u8, 23u8, 184u8, 133u8, 8u8, 176u8, 9u8, 187u8,
						],
					)
				}
				#[doc = "Nominate on relaychain via xcm.transact"]
				pub fn nominate(
					&self,
					derivative_index: types::nominate::DerivativeIndex,
					targets: types::nominate::Targets,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Nominate> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"nominate",
						types::Nominate { derivative_index, targets },
						[
							106u8, 141u8, 109u8, 0u8, 98u8, 179u8, 98u8, 5u8, 0u8, 232u8, 255u8,
							145u8, 102u8, 152u8, 227u8, 14u8, 113u8, 247u8, 135u8, 216u8, 110u8,
							108u8, 173u8, 143u8, 209u8, 235u8, 91u8, 47u8, 238u8, 167u8, 24u8,
							177u8,
						],
					)
				}
				#[doc = "Internal call which is expected to be triggered only by xcm instruction"]
				pub fn notification_received(
					&self,
					query_id: types::notification_received::QueryId,
					response: types::notification_received::Response,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::NotificationReceived>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"notification_received",
						types::NotificationReceived { query_id, response },
						[
							242u8, 224u8, 217u8, 44u8, 107u8, 31u8, 117u8, 66u8, 219u8, 92u8,
							139u8, 88u8, 110u8, 119u8, 141u8, 116u8, 153u8, 134u8, 209u8, 221u8,
							91u8, 105u8, 229u8, 112u8, 54u8, 117u8, 225u8, 108u8, 205u8, 50u8,
							59u8, 137u8,
						],
					)
				}
				#[doc = "Claim assets back when current era index arrived"]
				#[doc = "at target era"]
				pub fn claim_for(
					&self,
					dest: types::claim_for::Dest,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClaimFor> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"claim_for",
						types::ClaimFor { dest },
						[
							14u8, 23u8, 185u8, 29u8, 235u8, 165u8, 68u8, 138u8, 23u8, 126u8, 223u8,
							14u8, 163u8, 131u8, 220u8, 45u8, 218u8, 160u8, 216u8, 49u8, 237u8,
							71u8, 8u8, 90u8, 32u8, 158u8, 173u8, 197u8, 33u8, 193u8, 78u8, 42u8,
						],
					)
				}
				#[doc = "Force set era start block"]
				pub fn force_set_era_start_block(
					&self,
					block_number: types::force_set_era_start_block::BlockNumber,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::ForceSetEraStartBlock,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"force_set_era_start_block",
						types::ForceSetEraStartBlock { block_number },
						[
							7u8, 236u8, 12u8, 199u8, 156u8, 81u8, 163u8, 129u8, 233u8, 149u8, 61u8,
							14u8, 160u8, 105u8, 7u8, 184u8, 208u8, 179u8, 240u8, 210u8, 80u8,
							187u8, 208u8, 205u8, 182u8, 195u8, 110u8, 53u8, 78u8, 100u8, 53u8,
							87u8,
						],
					)
				}
				#[doc = "Force set current era"]
				pub fn force_set_current_era(
					&self,
					era: types::force_set_current_era::Era,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceSetCurrentEra>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"force_set_current_era",
						types::ForceSetCurrentEra { era },
						[
							102u8, 128u8, 206u8, 33u8, 155u8, 157u8, 120u8, 192u8, 170u8, 83u8,
							96u8, 148u8, 199u8, 147u8, 25u8, 162u8, 14u8, 238u8, 224u8, 241u8,
							172u8, 180u8, 223u8, 34u8, 200u8, 64u8, 167u8, 169u8, 224u8, 115u8,
							27u8, 141u8,
						],
					)
				}
				#[doc = "Force advance era"]
				pub fn force_advance_era(
					&self,
					offset: types::force_advance_era::Offset,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceAdvanceEra>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"force_advance_era",
						types::ForceAdvanceEra { offset },
						[
							160u8, 81u8, 160u8, 241u8, 205u8, 150u8, 231u8, 124u8, 240u8, 230u8,
							140u8, 132u8, 150u8, 40u8, 68u8, 218u8, 102u8, 50u8, 172u8, 95u8,
							197u8, 7u8, 214u8, 88u8, 225u8, 13u8, 250u8, 159u8, 121u8, 12u8, 107u8,
							112u8,
						],
					)
				}
				#[doc = "Force matching"]
				pub fn force_matching(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceMatching>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"force_matching",
						types::ForceMatching {},
						[
							253u8, 76u8, 163u8, 232u8, 125u8, 40u8, 180u8, 103u8, 217u8, 151u8,
							110u8, 34u8, 236u8, 2u8, 84u8, 118u8, 170u8, 231u8, 102u8, 89u8, 236u8,
							255u8, 209u8, 63u8, 249u8, 152u8, 82u8, 209u8, 108u8, 243u8, 14u8,
							184u8,
						],
					)
				}
				#[doc = "Force set staking_ledger"]
				pub fn force_set_staking_ledger(
					&self,
					derivative_index: types::force_set_staking_ledger::DerivativeIndex,
					staking_ledger: types::force_set_staking_ledger::StakingLedger,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::ForceSetStakingLedger,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"force_set_staking_ledger",
						types::ForceSetStakingLedger { derivative_index, staking_ledger },
						[
							114u8, 178u8, 246u8, 133u8, 69u8, 80u8, 237u8, 95u8, 51u8, 153u8,
							200u8, 239u8, 127u8, 159u8, 143u8, 229u8, 222u8, 165u8, 167u8, 137u8,
							62u8, 152u8, 228u8, 60u8, 144u8, 212u8, 177u8, 140u8, 27u8, 9u8, 96u8,
							48u8,
						],
					)
				}
				#[doc = "Set current era by providing storage proof"]
				pub fn set_current_era(
					&self,
					era: types::set_current_era::Era,
					proof: types::set_current_era::Proof,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetCurrentEra>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"set_current_era",
						types::SetCurrentEra { era, proof },
						[
							3u8, 239u8, 155u8, 216u8, 147u8, 172u8, 236u8, 180u8, 154u8, 218u8,
							142u8, 15u8, 177u8, 239u8, 46u8, 211u8, 183u8, 51u8, 36u8, 242u8, 34u8,
							253u8, 74u8, 252u8, 113u8, 9u8, 157u8, 196u8, 112u8, 45u8, 41u8, 25u8,
						],
					)
				}
				#[doc = "Set staking_ledger by providing storage proof"]
				pub fn set_staking_ledger(
					&self,
					derivative_index: types::set_staking_ledger::DerivativeIndex,
					staking_ledger: types::set_staking_ledger::StakingLedger,
					proof: types::set_staking_ledger::Proof,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetStakingLedger>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"set_staking_ledger",
						types::SetStakingLedger { derivative_index, staking_ledger, proof },
						[
							19u8, 174u8, 69u8, 185u8, 145u8, 128u8, 50u8, 249u8, 185u8, 130u8,
							169u8, 122u8, 68u8, 198u8, 110u8, 88u8, 163u8, 42u8, 155u8, 104u8,
							58u8, 71u8, 105u8, 146u8, 247u8, 210u8, 93u8, 90u8, 19u8, 253u8, 13u8,
							7u8,
						],
					)
				}
				#[doc = "Reduces reserves by transferring to receiver."]
				pub fn reduce_reserves(
					&self,
					receiver: types::reduce_reserves::Receiver,
					reduce_amount: types::reduce_reserves::ReduceAmount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ReduceReserves>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"reduce_reserves",
						types::ReduceReserves { receiver, reduce_amount },
						[
							98u8, 62u8, 239u8, 135u8, 144u8, 157u8, 118u8, 60u8, 79u8, 55u8, 17u8,
							83u8, 22u8, 137u8, 114u8, 97u8, 105u8, 39u8, 129u8, 124u8, 48u8, 220u8,
							15u8, 244u8, 148u8, 11u8, 153u8, 233u8, 92u8, 11u8, 152u8, 121u8,
						],
					)
				}
				#[doc = "Cancel unstake"]
				pub fn cancel_unstake(
					&self,
					amount: types::cancel_unstake::Amount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelUnstake>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"cancel_unstake",
						types::CancelUnstake { amount },
						[
							134u8, 40u8, 97u8, 170u8, 215u8, 17u8, 124u8, 102u8, 89u8, 8u8, 231u8,
							33u8, 8u8, 48u8, 9u8, 203u8, 200u8, 87u8, 174u8, 91u8, 127u8, 70u8,
							18u8, 139u8, 74u8, 165u8, 125u8, 89u8, 125u8, 95u8, 218u8, 116u8,
						],
					)
				}
				#[doc = "Update commission rate"]
				pub fn update_commission_rate(
					&self,
					commission_rate: types::update_commission_rate::CommissionRate,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateCommissionRate>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"update_commission_rate",
						types::UpdateCommissionRate { commission_rate },
						[
							138u8, 184u8, 74u8, 199u8, 5u8, 7u8, 15u8, 191u8, 154u8, 92u8, 100u8,
							84u8, 27u8, 49u8, 125u8, 254u8, 39u8, 250u8, 115u8, 42u8, 199u8, 126u8,
							185u8, 196u8, 89u8, 177u8, 8u8, 118u8, 244u8, 20u8, 88u8, 234u8,
						],
					)
				}
				#[doc = "Fast match unstake through matching pool"]
				pub fn fast_match_unstake(
					&self,
					unstaker_list: types::fast_match_unstake::UnstakerList,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::FastMatchUnstake>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"fast_match_unstake",
						types::FastMatchUnstake { unstaker_list },
						[
							41u8, 138u8, 227u8, 142u8, 117u8, 213u8, 98u8, 139u8, 120u8, 166u8,
							31u8, 226u8, 42u8, 29u8, 169u8, 22u8, 160u8, 115u8, 85u8, 51u8, 184u8,
							130u8, 29u8, 207u8, 167u8, 172u8, 91u8, 123u8, 125u8, 230u8, 11u8,
							240u8,
						],
					)
				}
				#[doc = "Update incentive amount"]
				pub fn update_incentive(
					&self,
					amount: types::update_incentive::Amount,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateIncentive>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"update_incentive",
						types::UpdateIncentive { amount },
						[
							163u8, 207u8, 247u8, 245u8, 125u8, 30u8, 104u8, 217u8, 208u8, 48u8,
							190u8, 123u8, 53u8, 88u8, 44u8, 161u8, 180u8, 12u8, 40u8, 234u8, 127u8,
							101u8, 47u8, 238u8, 147u8, 172u8, 232u8, 67u8, 91u8, 210u8, 74u8,
							190u8,
						],
					)
				}
				pub fn initiate_exchange_rate(
					&self,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::InitiateExchangeRate>
				{
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"initiate_exchange_rate",
						types::InitiateExchangeRate {},
						[
							224u8, 190u8, 23u8, 222u8, 93u8, 76u8, 154u8, 119u8, 111u8, 186u8,
							150u8, 114u8, 188u8, 65u8, 227u8, 53u8, 70u8, 129u8, 91u8, 216u8, 17u8,
							53u8, 168u8, 206u8, 18u8, 89u8, 43u8, 182u8, 174u8, 41u8, 243u8, 172u8,
						],
					)
				}
				pub fn relaychain_storage_proof_key(
					&self,
					derivative_index: types::relaychain_storage_proof_key::DerivativeIndex,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
					types::RelaychainStorageProofKey,
				> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"relaychain_storage_proof_key",
						types::RelaychainStorageProofKey { derivative_index },
						[
							238u8, 70u8, 159u8, 53u8, 208u8, 88u8, 214u8, 249u8, 187u8, 5u8, 121u8,
							156u8, 140u8, 255u8, 103u8, 102u8, 129u8, 207u8, 222u8, 218u8, 168u8,
							230u8, 102u8, 80u8, 251u8, 15u8, 98u8, 240u8, 38u8, 5u8, 67u8, 76u8,
						],
					)
				}
				pub fn set_members(
					&self,
					members: types::set_members::Members,
				) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetMembers> {
					::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
						"PalletLiquidStaking",
						"set_members",
						types::SetMembers { members },
						[
							145u8, 237u8, 113u8, 202u8, 26u8, 87u8, 8u8, 62u8, 35u8, 56u8, 157u8,
							122u8, 112u8, 106u8, 73u8, 5u8, 123u8, 159u8, 93u8, 145u8, 132u8, 24u8,
							85u8, 191u8, 224u8, 48u8, 155u8, 186u8, 224u8, 241u8, 190u8, 114u8,
						],
					)
				}
			}
		}
		#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
		pub type Event = runtime_types::pallet_liquid_staking::pallet::Event;
		pub mod events {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The assets get staked successfully"]
			pub struct Staked(pub staked::Field0, pub staked::Field1);
			pub mod staked {
				use super::runtime_types;
				pub type Field0 = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Field1 = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Staked {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "Staked";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "The derivative get unstaked successfully"]
			pub struct Unstaked(pub unstaked::Field0, pub unstaked::Field1, pub unstaked::Field2);
			pub mod unstaked {
				use super::runtime_types;
				pub type Field0 = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Field1 = ::core::primitive::u128;
				pub type Field2 = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Unstaked {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "Unstaked";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Staking ledger updated"]
			pub struct StakingLedgerUpdated(
				pub staking_ledger_updated::Field0,
				pub staking_ledger_updated::Field1,
			);
			pub mod staking_ledger_updated {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u16;
				pub type Field1 = runtime_types::pallet_liquid_staking::types::StakingLedger<
					::subxt::ext::subxt_core::utils::AccountId32,
					::core::primitive::u128,
				>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for StakingLedgerUpdated {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "StakingLedgerUpdated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Sent staking.bond call to relaychain"]
			pub struct Bonding(
				pub bonding::Field0,
				pub bonding::Field1,
				pub bonding::Field2,
				pub bonding::Field3,
			);
			pub mod bonding {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u16;
				pub type Field1 = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Field2 = ::core::primitive::u128;
				pub type Field3 = runtime_types::pallet_xcm_helper::ump::RewardDestination<
					::subxt::ext::subxt_core::utils::AccountId32,
				>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Bonding {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "Bonding";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Sent staking.bond_extra call to relaychain"]
			pub struct BondingExtra(pub bonding_extra::Field0, pub bonding_extra::Field1);
			pub mod bonding_extra {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u16;
				pub type Field1 = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for BondingExtra {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "BondingExtra";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Sent staking.unbond call to relaychain"]
			pub struct Unbonding(pub unbonding::Field0, pub unbonding::Field1);
			pub mod unbonding {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u16;
				pub type Field1 = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Unbonding {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "Unbonding";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Sent staking.rebond call to relaychain"]
			pub struct Rebonding(pub rebonding::Field0, pub rebonding::Field1);
			pub mod rebonding {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u16;
				pub type Field1 = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Rebonding {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "Rebonding";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Sent staking.withdraw_unbonded call to relaychain"]
			pub struct WithdrawingUnbonded(
				pub withdrawing_unbonded::Field0,
				pub withdrawing_unbonded::Field1,
			);
			pub mod withdrawing_unbonded {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u16;
				pub type Field1 = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for WithdrawingUnbonded {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "WithdrawingUnbonded";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Sent staking.nominate call to relaychain"]
			pub struct Nominating(pub nominating::Field0, pub nominating::Field1);
			pub mod nominating {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u16;
				pub type Field1 = ::subxt::ext::subxt_core::alloc::vec::Vec<
					::subxt::ext::subxt_core::utils::AccountId32,
				>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Nominating {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "Nominating";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Staking ledger's cap was updated"]
			pub struct StakingLedgerCapUpdated(pub staking_ledger_cap_updated::Field0);
			pub mod staking_ledger_cap_updated {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for StakingLedgerCapUpdated {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "StakingLedgerCapUpdated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Reserve_factor was updated"]
			pub struct ReserveFactorUpdated(pub reserve_factor_updated::Field0);
			pub mod reserve_factor_updated {
				use super::runtime_types;
				pub type Field0 = runtime_types::sp_arithmetic::per_things::Permill;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ReserveFactorUpdated {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "ReserveFactorUpdated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Exchange rate was updated"]
			pub struct ExchangeRateUpdated(pub exchange_rate_updated::Field0);
			pub mod exchange_rate_updated {
				use super::runtime_types;
				pub type Field0 = runtime_types::sp_arithmetic::fixed_point::FixedU128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ExchangeRateUpdated {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "ExchangeRateUpdated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Notification received"]
			#[doc = "[multi_location, query_id, res]"]
			pub struct NotificationReceived(
				pub ::subxt::ext::subxt_core::alloc::boxed::Box<notification_received::Field0>,
				pub notification_received::Field1,
				pub notification_received::Field2,
			);
			pub mod notification_received {
				use super::runtime_types;
				pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
				pub type Field1 = ::core::primitive::u64;
				pub type Field2 = ::core::option::Option<(
					::core::primitive::u32,
					runtime_types::xcm::v3::traits::Error,
				)>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NotificationReceived {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "NotificationReceived";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Claim user's unbonded staking assets"]
			#[doc = "[account_id, amount]"]
			pub struct ClaimedFor(pub claimed_for::Field0, pub claimed_for::Field1);
			pub mod claimed_for {
				use super::runtime_types;
				pub type Field0 = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Field1 = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ClaimedFor {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "ClaimedFor";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "New era"]
			#[doc = "[era_index]"]
			pub struct NewEra(pub new_era::Field0);
			pub mod new_era {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NewEra {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "NewEra";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Matching stakes & unstakes for optimizing operations to be done"]
			#[doc = "on relay chain"]
			#[doc = "[bond_amount, rebond_amount, unbond_amount]"]
			pub struct Matching(pub matching::Field0, pub matching::Field1, pub matching::Field2);
			pub mod matching {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u128;
				pub type Field1 = ::core::primitive::u128;
				pub type Field2 = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for Matching {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "Matching";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Event emitted when the reserves are reduced"]
			#[doc = "[receiver, reduced_amount]"]
			pub struct ReservesReduced(pub reserves_reduced::Field0, pub reserves_reduced::Field1);
			pub mod reserves_reduced {
				use super::runtime_types;
				pub type Field0 = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Field1 = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for ReservesReduced {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "ReservesReduced";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Unstake cancelled"]
			#[doc = "[account_id, amount, liquid_amount]"]
			pub struct UnstakeCancelled(
				pub unstake_cancelled::Field0,
				pub unstake_cancelled::Field1,
				pub unstake_cancelled::Field2,
			);
			pub mod unstake_cancelled {
				use super::runtime_types;
				pub type Field0 = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Field1 = ::core::primitive::u128;
				pub type Field2 = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for UnstakeCancelled {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "UnstakeCancelled";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Commission rate was updated"]
			pub struct CommissionRateUpdated(pub commission_rate_updated::Field0);
			pub mod commission_rate_updated {
				use super::runtime_types;
				pub type Field0 = runtime_types::sp_arithmetic::fixed_point::FixedU128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for CommissionRateUpdated {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "CommissionRateUpdated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Fast Unstake Matched"]
			#[doc = "[unstaker, received_staking_amount, matched_liquid_amount, fee_in_liquid_currency]"]
			pub struct FastUnstakeMatched(
				pub fast_unstake_matched::Field0,
				pub fast_unstake_matched::Field1,
				pub fast_unstake_matched::Field2,
				pub fast_unstake_matched::Field3,
			);
			pub mod fast_unstake_matched {
				use super::runtime_types;
				pub type Field0 = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type Field1 = ::core::primitive::u128;
				pub type Field2 = ::core::primitive::u128;
				pub type Field3 = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for FastUnstakeMatched {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "FastUnstakeMatched";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Incentive amount was updated"]
			pub struct IncentiveUpdated(pub incentive_updated::Field0);
			pub mod incentive_updated {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u128;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for IncentiveUpdated {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "IncentiveUpdated";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			#[doc = "Not the ideal staking ledger"]
			pub struct NonIdealStakingLedger(pub non_ideal_staking_ledger::Field0);
			pub mod non_ideal_staking_ledger {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u16;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for NonIdealStakingLedger {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "NonIdealStakingLedger";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct RelaychainStorageProofKey(
				pub relaychain_storage_proof_key::Field0,
				pub relaychain_storage_proof_key::Field1,
				pub relaychain_storage_proof_key::Field2,
			);
			pub mod relaychain_storage_proof_key {
				use super::runtime_types;
				pub type Field0 = ::core::primitive::u16;
				pub type Field1 = ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
				pub type Field2 = ::subxt::ext::subxt_core::utils::AccountId32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for RelaychainStorageProofKey {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "RelaychainStorageProofKey";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct SetStakingLedgerTry {
				pub origin: set_staking_ledger_try::Origin,
				pub derivative_index: set_staking_ledger_try::DerivativeIndex,
				pub staking_ledger: set_staking_ledger_try::StakingLedger,
				pub proof: set_staking_ledger_try::Proof,
			}
			pub mod set_staking_ledger_try {
				use super::runtime_types;
				pub type Origin = ::subxt::ext::subxt_core::utils::AccountId32;
				pub type DerivativeIndex = ::core::primitive::u16;
				pub type StakingLedger = runtime_types::pallet_liquid_staking::types::StakingLedger<
					::subxt::ext::subxt_core::utils::AccountId32,
					::core::primitive::u128,
				>;
				pub type Proof = ::subxt::ext::subxt_core::alloc::vec::Vec<
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
				>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for SetStakingLedgerTry {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "SetStakingLedgerTry";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct OnInitializeHook {
				pub relay_block_number: on_initialize_hook::RelayBlockNumber,
				pub era: on_initialize_hook::Era,
			}
			pub mod on_initialize_hook {
				use super::runtime_types;
				pub type RelayBlockNumber = ::core::primitive::u32;
				pub type Era = ::core::primitive::u32;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for OnInitializeHook {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "OnInitializeHook";
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct SetMembers {
				pub members: set_members::Members,
			}
			pub mod set_members {
				use super::runtime_types;
				pub type Members = ::subxt::ext::subxt_core::alloc::vec::Vec<
					::subxt::ext::subxt_core::utils::AccountId32,
				>;
			}
			impl ::subxt::ext::subxt_core::events::StaticEvent for SetMembers {
				const PALLET: &'static str = "PalletLiquidStaking";
				const EVENT: &'static str = "SetMembers";
			}
		}
		pub mod storage {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				pub mod exchange_rate {
					use super::runtime_types;
					pub type ExchangeRate = runtime_types::sp_arithmetic::fixed_point::FixedU128;
				}
				pub mod commission_rate {
					use super::runtime_types;
					pub type CommissionRate = runtime_types::sp_arithmetic::fixed_point::FixedU128;
				}
				pub mod validation_data {
					use super::runtime_types;
					pub type ValidationData =
						runtime_types::polkadot_primitives::v4::PersistedValidationData<
							::subxt::ext::subxt_core::utils::H256,
							::core::primitive::u32,
						>;
				}
				pub mod reserve_factor {
					use super::runtime_types;
					pub type ReserveFactor = runtime_types::sp_arithmetic::per_things::Permill;
				}
				pub mod total_reserves {
					use super::runtime_types;
					pub type TotalReserves = ::core::primitive::u128;
				}
				pub mod matching_pool {
					use super::runtime_types;
					pub type MatchingPool =
						runtime_types::pallet_liquid_staking::types::MatchingLedger<
							::core::primitive::u128,
						>;
				}
				pub mod staking_ledger_cap {
					use super::runtime_types;
					pub type StakingLedgerCap = ::core::primitive::u128;
				}
				pub mod xcm_requests {
					use super::runtime_types;
					pub type XcmRequests = runtime_types::pallet_liquid_staking::types::XcmRequest;
					pub type Param0 = ::core::primitive::u64;
				}
				pub mod fast_unstake_requests {
					use super::runtime_types;
					pub type FastUnstakeRequests = ::core::primitive::u128;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod current_era {
					use super::runtime_types;
					pub type CurrentEra = ::core::primitive::u32;
				}
				pub mod era_start_block {
					use super::runtime_types;
					pub type EraStartBlock = ::core::primitive::u32;
				}
				pub mod unlockings {
					use super::runtime_types;
					pub type Unlockings = ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::pallet_liquid_staking::types::UnlockChunk<
							::core::primitive::u128,
						>,
					>;
					pub type Param0 = ::subxt::ext::subxt_core::utils::AccountId32;
				}
				pub mod members {
					use super::runtime_types;
					pub type Members = ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::AccountId32,
					>;
				}
				pub mod staking_ledgers {
					use super::runtime_types;
					pub type StakingLedgers =
						runtime_types::pallet_liquid_staking::types::StakingLedger<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u128,
						>;
					pub type Param0 = ::core::primitive::u16;
				}
				pub mod is_updated {
					use super::runtime_types;
					pub type IsUpdated = ::core::primitive::bool;
					pub type Param0 = ::core::primitive::u16;
				}
				pub mod storage_version {
					use super::runtime_types;
					pub type StorageVersion =
						runtime_types::pallet_liquid_staking::pallet::Versions;
				}
				pub mod is_matched {
					use super::runtime_types;
					pub type IsMatched = ::core::primitive::bool;
				}
				pub mod incentive {
					use super::runtime_types;
					pub type Incentive = ::core::primitive::u128;
				}
			}
			pub struct StorageApi;
			impl StorageApi {
				#[doc = " The exchange rate between relaychain native asset and the voucher."]
				pub fn exchange_rate(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::exchange_rate::ExchangeRate,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"ExchangeRate",
						(),
						[
							175u8, 191u8, 177u8, 196u8, 164u8, 50u8, 221u8, 19u8, 219u8, 69u8,
							10u8, 163u8, 32u8, 30u8, 90u8, 44u8, 47u8, 195u8, 232u8, 23u8, 102u8,
							86u8, 206u8, 90u8, 242u8, 150u8, 41u8, 181u8, 26u8, 27u8, 99u8, 174u8,
						],
					)
				}
				#[doc = " The commission rate charge for staking total rewards."]
				pub fn commission_rate(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::commission_rate::CommissionRate,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"CommissionRate",
						(),
						[
							140u8, 10u8, 169u8, 77u8, 153u8, 97u8, 179u8, 219u8, 248u8, 188u8,
							134u8, 231u8, 68u8, 117u8, 11u8, 85u8, 178u8, 219u8, 14u8, 179u8,
							248u8, 34u8, 114u8, 40u8, 39u8, 221u8, 255u8, 152u8, 161u8, 219u8,
							91u8, 207u8,
						],
					)
				}
				#[doc = " ValidationData of previous block"]
				#[doc = ""]
				#[doc = " This is needed since validation data from cumulus_pallet_parachain_system"]
				#[doc = " will be updated in set_validation_data Inherent which happens before external"]
				#[doc = " extrinsics"]
				pub fn validation_data(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::validation_data::ValidationData,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"ValidationData",
						(),
						[
							193u8, 240u8, 25u8, 56u8, 103u8, 173u8, 56u8, 56u8, 229u8, 243u8, 91u8,
							25u8, 249u8, 95u8, 122u8, 93u8, 37u8, 181u8, 54u8, 244u8, 217u8, 200u8,
							62u8, 136u8, 80u8, 148u8, 16u8, 177u8, 124u8, 211u8, 95u8, 24u8,
						],
					)
				}
				#[doc = " Fraction of reward currently set aside for reserves."]
				pub fn reserve_factor(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::reserve_factor::ReserveFactor,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"ReserveFactor",
						(),
						[
							74u8, 214u8, 31u8, 239u8, 227u8, 144u8, 113u8, 180u8, 244u8, 3u8, 87u8,
							246u8, 41u8, 119u8, 132u8, 255u8, 7u8, 191u8, 189u8, 64u8, 167u8,
							159u8, 132u8, 6u8, 166u8, 48u8, 96u8, 84u8, 10u8, 72u8, 100u8, 242u8,
						],
					)
				}
				pub fn total_reserves(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::total_reserves::TotalReserves,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"TotalReserves",
						(),
						[
							108u8, 232u8, 216u8, 26u8, 22u8, 13u8, 170u8, 249u8, 156u8, 82u8,
							157u8, 169u8, 55u8, 237u8, 194u8, 100u8, 21u8, 158u8, 0u8, 152u8,
							123u8, 144u8, 203u8, 8u8, 47u8, 145u8, 147u8, 121u8, 28u8, 83u8, 199u8,
							190u8,
						],
					)
				}
				#[doc = " Store total stake amount and unstake amount in each era,"]
				#[doc = " And will update when stake/unstake occurred."]
				pub fn matching_pool(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::matching_pool::MatchingPool,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"MatchingPool",
						(),
						[
							119u8, 213u8, 238u8, 211u8, 176u8, 61u8, 177u8, 196u8, 245u8, 136u8,
							44u8, 52u8, 45u8, 20u8, 9u8, 11u8, 9u8, 202u8, 63u8, 143u8, 34u8, 61u8,
							41u8, 117u8, 22u8, 82u8, 45u8, 102u8, 242u8, 245u8, 72u8, 44u8,
						],
					)
				}
				#[doc = " Staking ledger's cap"]
				pub fn staking_ledger_cap(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::staking_ledger_cap::StakingLedgerCap,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"StakingLedgerCap",
						(),
						[
							88u8, 229u8, 151u8, 0u8, 55u8, 68u8, 184u8, 22u8, 164u8, 69u8, 27u8,
							77u8, 37u8, 2u8, 75u8, 49u8, 43u8, 211u8, 55u8, 132u8, 223u8, 209u8,
							166u8, 246u8, 25u8, 142u8, 21u8, 6u8, 248u8, 179u8, 254u8, 181u8,
						],
					)
				}
				#[doc = " Flying & failed xcm requests"]
				pub fn xcm_requests_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::xcm_requests::XcmRequests,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"XcmRequests",
						(),
						[
							202u8, 100u8, 131u8, 173u8, 201u8, 207u8, 212u8, 10u8, 185u8, 106u8,
							254u8, 215u8, 115u8, 124u8, 19u8, 165u8, 243u8, 142u8, 195u8, 132u8,
							254u8, 215u8, 63u8, 41u8, 57u8, 12u8, 18u8, 123u8, 186u8, 158u8, 96u8,
							104u8,
						],
					)
				}
				#[doc = " Flying & failed xcm requests"]
				pub fn xcm_requests(
					&self,
					_0: impl ::core::borrow::Borrow<types::xcm_requests::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::xcm_requests::Param0,
					>,
					types::xcm_requests::XcmRequests,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"XcmRequests",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							202u8, 100u8, 131u8, 173u8, 201u8, 207u8, 212u8, 10u8, 185u8, 106u8,
							254u8, 215u8, 115u8, 124u8, 19u8, 165u8, 243u8, 142u8, 195u8, 132u8,
							254u8, 215u8, 63u8, 41u8, 57u8, 12u8, 18u8, 123u8, 186u8, 158u8, 96u8,
							104u8,
						],
					)
				}
				#[doc = " Users' fast unstake requests in liquid currency"]
				pub fn fast_unstake_requests_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::fast_unstake_requests::FastUnstakeRequests,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"FastUnstakeRequests",
						(),
						[
							74u8, 162u8, 233u8, 129u8, 75u8, 253u8, 87u8, 53u8, 39u8, 232u8, 93u8,
							159u8, 82u8, 117u8, 79u8, 71u8, 200u8, 116u8, 122u8, 106u8, 69u8,
							209u8, 184u8, 210u8, 237u8, 142u8, 151u8, 187u8, 180u8, 17u8, 89u8,
							121u8,
						],
					)
				}
				#[doc = " Users' fast unstake requests in liquid currency"]
				pub fn fast_unstake_requests(
					&self,
					_0: impl ::core::borrow::Borrow<types::fast_unstake_requests::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::fast_unstake_requests::Param0,
					>,
					types::fast_unstake_requests::FastUnstakeRequests,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"FastUnstakeRequests",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							74u8, 162u8, 233u8, 129u8, 75u8, 253u8, 87u8, 53u8, 39u8, 232u8, 93u8,
							159u8, 82u8, 117u8, 79u8, 71u8, 200u8, 116u8, 122u8, 106u8, 69u8,
							209u8, 184u8, 210u8, 237u8, 142u8, 151u8, 187u8, 180u8, 17u8, 89u8,
							121u8,
						],
					)
				}
				#[doc = " Current era index"]
				#[doc = " Users can come to claim their unbonded staking assets back once this value arrived"]
				#[doc = " at certain height decided by `BondingDuration` and `EraLength`"]
				pub fn current_era(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::current_era::CurrentEra,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"CurrentEra",
						(),
						[
							106u8, 2u8, 131u8, 81u8, 131u8, 233u8, 53u8, 167u8, 151u8, 52u8, 82u8,
							206u8, 129u8, 114u8, 216u8, 45u8, 97u8, 230u8, 194u8, 255u8, 204u8,
							239u8, 31u8, 162u8, 199u8, 71u8, 34u8, 202u8, 84u8, 73u8, 186u8, 78u8,
						],
					)
				}
				#[doc = " Current era's start relaychain block"]
				pub fn era_start_block(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::era_start_block::EraStartBlock,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"EraStartBlock",
						(),
						[
							54u8, 228u8, 185u8, 33u8, 179u8, 22u8, 142u8, 72u8, 87u8, 95u8, 105u8,
							99u8, 34u8, 232u8, 234u8, 35u8, 182u8, 67u8, 142u8, 53u8, 139u8, 4u8,
							145u8, 153u8, 20u8, 121u8, 36u8, 48u8, 77u8, 133u8, 23u8, 83u8,
						],
					)
				}
				#[doc = " Unbonding requests to be handled after arriving at target era"]
				pub fn unlockings_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::unlockings::Unlockings,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"Unlockings",
						(),
						[
							165u8, 229u8, 240u8, 100u8, 60u8, 218u8, 84u8, 239u8, 167u8, 134u8,
							131u8, 23u8, 140u8, 149u8, 165u8, 190u8, 152u8, 180u8, 16u8, 78u8,
							70u8, 14u8, 133u8, 58u8, 144u8, 191u8, 91u8, 25u8, 96u8, 128u8, 188u8,
							53u8,
						],
					)
				}
				#[doc = " Unbonding requests to be handled after arriving at target era"]
				pub fn unlockings(
					&self,
					_0: impl ::core::borrow::Borrow<types::unlockings::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::unlockings::Param0,
					>,
					types::unlockings::Unlockings,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"Unlockings",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							165u8, 229u8, 240u8, 100u8, 60u8, 218u8, 84u8, 239u8, 167u8, 134u8,
							131u8, 23u8, 140u8, 149u8, 165u8, 190u8, 152u8, 180u8, 16u8, 78u8,
							70u8, 14u8, 133u8, 58u8, 144u8, 191u8, 91u8, 25u8, 96u8, 128u8, 188u8,
							53u8,
						],
					)
				}
				pub fn members(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::members::Members,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"Members",
						(),
						[
							16u8, 29u8, 32u8, 222u8, 175u8, 136u8, 111u8, 101u8, 43u8, 74u8, 209u8,
							81u8, 47u8, 97u8, 129u8, 39u8, 225u8, 243u8, 110u8, 229u8, 237u8, 21u8,
							90u8, 127u8, 80u8, 239u8, 156u8, 32u8, 90u8, 109u8, 179u8, 0u8,
						],
					)
				}
				#[doc = " Platform's staking ledgers"]
				pub fn staking_ledgers_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::staking_ledgers::StakingLedgers,
					(),
					(),
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"StakingLedgers",
						(),
						[
							68u8, 35u8, 227u8, 120u8, 25u8, 177u8, 50u8, 134u8, 149u8, 252u8,
							169u8, 165u8, 114u8, 42u8, 43u8, 13u8, 125u8, 192u8, 68u8, 100u8,
							173u8, 46u8, 60u8, 213u8, 63u8, 86u8, 56u8, 213u8, 129u8, 108u8, 119u8,
							211u8,
						],
					)
				}
				#[doc = " Platform's staking ledgers"]
				pub fn staking_ledgers(
					&self,
					_0: impl ::core::borrow::Borrow<types::staking_ledgers::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::staking_ledgers::Param0,
					>,
					types::staking_ledgers::StakingLedgers,
					::subxt::ext::subxt_core::utils::Yes,
					(),
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"StakingLedgers",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							68u8, 35u8, 227u8, 120u8, 25u8, 177u8, 50u8, 134u8, 149u8, 252u8,
							169u8, 165u8, 114u8, 42u8, 43u8, 13u8, 125u8, 192u8, 68u8, 100u8,
							173u8, 46u8, 60u8, 213u8, 63u8, 86u8, 56u8, 213u8, 129u8, 108u8, 119u8,
							211u8,
						],
					)
				}
				#[doc = " Set to true if staking ledger has been modified in this block"]
				pub fn is_updated_iter(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::is_updated::IsUpdated,
					(),
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"IsUpdated",
						(),
						[
							68u8, 193u8, 4u8, 235u8, 150u8, 197u8, 69u8, 3u8, 68u8, 146u8, 28u8,
							247u8, 149u8, 239u8, 137u8, 102u8, 56u8, 0u8, 50u8, 13u8, 164u8, 185u8,
							109u8, 159u8, 84u8, 20u8, 187u8, 145u8, 43u8, 12u8, 92u8, 88u8,
						],
					)
				}
				#[doc = " Set to true if staking ledger has been modified in this block"]
				pub fn is_updated(
					&self,
					_0: impl ::core::borrow::Borrow<types::is_updated::Param0>,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					::subxt::ext::subxt_core::storage::address::StaticStorageKey<
						types::is_updated::Param0,
					>,
					types::is_updated::IsUpdated,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"IsUpdated",
						::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
							_0.borrow(),
						),
						[
							68u8, 193u8, 4u8, 235u8, 150u8, 197u8, 69u8, 3u8, 68u8, 146u8, 28u8,
							247u8, 149u8, 239u8, 137u8, 102u8, 56u8, 0u8, 50u8, 13u8, 164u8, 185u8,
							109u8, 159u8, 84u8, 20u8, 187u8, 145u8, 43u8, 12u8, 92u8, 88u8,
						],
					)
				}
				#[doc = " Storage version of the pallet."]
				pub fn storage_version(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::storage_version::StorageVersion,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"StorageVersion",
						(),
						[
							117u8, 175u8, 216u8, 139u8, 39u8, 150u8, 157u8, 83u8, 117u8, 187u8,
							202u8, 100u8, 143u8, 178u8, 242u8, 140u8, 119u8, 118u8, 233u8, 122u8,
							4u8, 23u8, 130u8, 14u8, 185u8, 207u8, 34u8, 131u8, 29u8, 120u8, 164u8,
							168u8,
						],
					)
				}
				#[doc = " Set to true if already do matching in current era"]
				#[doc = " clear after arriving at next era"]
				pub fn is_matched(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::is_matched::IsMatched,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"IsMatched",
						(),
						[
							78u8, 133u8, 131u8, 52u8, 108u8, 9u8, 75u8, 104u8, 23u8, 254u8, 108u8,
							184u8, 117u8, 118u8, 102u8, 21u8, 83u8, 197u8, 115u8, 149u8, 89u8,
							27u8, 126u8, 81u8, 149u8, 160u8, 112u8, 113u8, 112u8, 137u8, 116u8,
							103u8,
						],
					)
				}
				#[doc = " Incentive for users who successfully update era/ledger"]
				pub fn incentive(
					&self,
				) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
					(),
					types::incentive::Incentive,
					::subxt::ext::subxt_core::utils::Yes,
					::subxt::ext::subxt_core::utils::Yes,
					(),
				> {
					::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"Incentive",
						(),
						[
							141u8, 65u8, 80u8, 129u8, 243u8, 182u8, 243u8, 181u8, 66u8, 138u8,
							104u8, 77u8, 102u8, 251u8, 98u8, 177u8, 123u8, 69u8, 210u8, 58u8,
							176u8, 155u8, 7u8, 126u8, 229u8, 37u8, 213u8, 79u8, 185u8, 52u8, 185u8,
							97u8,
						],
					)
				}
			}
		}
		pub mod constants {
			use super::runtime_types;
			pub struct ConstantsApi;
			impl ConstantsApi {
				#[doc = " The pallet id of liquid staking, keeps all the staking assets"]
				pub fn pallet_id(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::frame_support::PalletId,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"PalletId",
						[
							56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
							161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
							129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
						],
					)
				}
				#[doc = " Returns the parachain ID we are running with."]
				pub fn self_para_id(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::polkadot_parachain::primitives::Id,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"SelfParaId",
						[
							65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
							114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
							200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
						],
					)
				}
				#[doc = " Derivative index list"]
				pub fn derivative_index_list(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u16>,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"DerivativeIndexList",
						[
							107u8, 230u8, 143u8, 101u8, 85u8, 123u8, 35u8, 95u8, 159u8, 219u8,
							51u8, 197u8, 99u8, 213u8, 178u8, 46u8, 191u8, 191u8, 254u8, 16u8,
							219u8, 228u8, 22u8, 113u8, 131u8, 244u8, 93u8, 96u8, 155u8, 29u8,
							119u8, 75u8,
						],
					)
				}
				#[doc = " Xcm fees"]
				pub fn xcm_fees(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"XcmFees",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " MatchingPool fast unstake fee"]
				pub fn matching_pool_fast_unstake_fee(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::sp_arithmetic::fixed_point::FixedU128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"MatchingPoolFastUnstakeFee",
						[
							62u8, 145u8, 102u8, 227u8, 159u8, 92u8, 27u8, 54u8, 159u8, 228u8,
							193u8, 99u8, 75u8, 196u8, 26u8, 250u8, 229u8, 230u8, 88u8, 109u8,
							246u8, 100u8, 152u8, 158u8, 14u8, 25u8, 224u8, 173u8, 224u8, 41u8,
							105u8, 231u8,
						],
					)
				}
				#[doc = " Staking currency"]
				pub fn staking_currency(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::primitives::currency::CurrencyId,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"StakingCurrency",
						[
							62u8, 145u8, 102u8, 227u8, 159u8, 92u8, 27u8, 54u8, 159u8, 228u8,
							193u8, 99u8, 75u8, 196u8, 26u8, 250u8, 229u8, 230u8, 88u8, 109u8,
							246u8, 100u8, 152u8, 158u8, 14u8, 25u8, 224u8, 173u8, 224u8, 41u8,
							105u8, 231u8,
						],
					)
				}
				#[doc = " Liquid currency"]
				pub fn liquid_currency(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::primitives::currency::CurrencyId,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"LiquidCurrency",
						[
							62u8, 145u8, 102u8, 227u8, 159u8, 92u8, 27u8, 54u8, 159u8, 228u8,
							193u8, 99u8, 75u8, 196u8, 26u8, 250u8, 229u8, 230u8, 88u8, 109u8,
							246u8, 100u8, 152u8, 158u8, 14u8, 25u8, 224u8, 173u8, 224u8, 41u8,
							105u8, 231u8,
						],
					)
				}
				#[doc = " Minimum stake amount"]
				pub fn min_stake(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"MinStake",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Minimum unstake amount"]
				pub fn min_unstake(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"MinUnstake",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Number of unbond indexes for unlocking."]
				pub fn bonding_duration(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"BondingDuration",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " The minimum active bond to become and maintain the role of a nominator."]
				pub fn min_nominator_bond(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u128,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"MinNominatorBond",
						[
							84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
							27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
							136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
						],
					)
				}
				#[doc = " Number of blocknumbers that each period contains."]
				#[doc = " SessionsPerEra * EpochDuration / MILLISECS_PER_BLOCK"]
				pub fn era_length(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"EraLength",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				pub fn num_slashing_spans(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"NumSlashingSpans",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Number of blocknumbers that do_matching after each era updated."]
				#[doc = " Need to do_bond before relaychain store npos solution"]
				pub fn election_solution_stored_offset(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::core::primitive::u32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"ElectionSolutionStoredOffset",
						[
							98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
							125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
							178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
							145u8,
						],
					)
				}
				#[doc = " Who/where to send the protocol fees"]
				pub fn protocol_fee_receiver(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					::subxt::ext::subxt_core::utils::AccountId32,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"ProtocolFeeReceiver",
						[
							115u8, 233u8, 13u8, 223u8, 88u8, 20u8, 202u8, 139u8, 153u8, 28u8,
							155u8, 157u8, 224u8, 66u8, 3u8, 250u8, 23u8, 53u8, 88u8, 168u8, 211u8,
							204u8, 122u8, 166u8, 248u8, 23u8, 174u8, 225u8, 99u8, 108u8, 89u8,
							135u8,
						],
					)
				}
				#[doc = " The asset id for native currency."]
				pub fn native_currency(
					&self,
				) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
					runtime_types::primitives::currency::CurrencyId,
				> {
					::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
						"PalletLiquidStaking",
						"NativeCurrency",
						[
							62u8, 145u8, 102u8, 227u8, 159u8, 92u8, 27u8, 54u8, 159u8, 228u8,
							193u8, 99u8, 75u8, 196u8, 26u8, 250u8, 229u8, 230u8, 88u8, 109u8,
							246u8, 100u8, 152u8, 158u8, 14u8, 25u8, 224u8, 173u8, 224u8, 41u8,
							105u8, 231u8,
						],
					)
				}
			}
		}
	}
	pub mod runtime_types {
		use super::runtime_types;
		pub mod bounded_collections {
			use super::runtime_types;
			pub mod bounded_btree_set {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct BoundedBTreeSet<_0>(pub ::subxt::ext::subxt_core::alloc::vec::Vec<_0>);
			}
			pub mod bounded_vec {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct BoundedVec<_0>(pub ::subxt::ext::subxt_core::alloc::vec::Vec<_0>);
			}
			pub mod weak_bounded_vec {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct WeakBoundedVec<_0>(pub ::subxt::ext::subxt_core::alloc::vec::Vec<_0>);
			}
		}
		pub mod common {
			use super::runtime_types;
			pub mod ibc {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct RawMemo(pub ::subxt::ext::subxt_core::alloc::string::String);
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct MaxStringSize;
		}
		pub mod composable_runtime {
			use super::runtime_types;
			pub mod opaque {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct SessionKeys {
					pub aura: runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum OriginCaller {
				#[codec(index = 0)]
				system(
					runtime_types::frame_support::dispatch::RawOrigin<
						::subxt::ext::subxt_core::utils::AccountId32,
					>,
				),
				#[codec(index = 30)]
				Council(
					runtime_types::pallet_collective::RawOrigin<
						::subxt::ext::subxt_core::utils::AccountId32,
					>,
				),
				#[codec(index = 72)]
				TechnicalCommittee(
					runtime_types::pallet_collective::RawOrigin<
						::subxt::ext::subxt_core::utils::AccountId32,
					>,
				),
				#[codec(index = 74)]
				ReleaseCommittee(
					runtime_types::pallet_collective::RawOrigin<
						::subxt::ext::subxt_core::utils::AccountId32,
					>,
				),
				#[codec(index = 41)]
				PolkadotXcm(runtime_types::pallet_xcm::pallet::Origin),
				#[codec(index = 42)]
				CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Origin),
				#[codec(index = 79)]
				Origins(runtime_types::pallet_custom_origins::pallet::Origin),
				#[codec(index = 7)]
				Void(runtime_types::sp_core::Void),
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct Runtime;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum RuntimeCall {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Call),
				#[codec(index = 1)]
				Timestamp(runtime_types::pallet_timestamp::pallet::Call),
				#[codec(index = 2)]
				Sudo(runtime_types::pallet_sudo::pallet::Call),
				#[codec(index = 12)]
				AssetTxPayment(runtime_types::pallet_asset_tx_payment::pallet::Call),
				#[codec(index = 5)]
				Indices(runtime_types::pallet_indices::pallet::Call),
				#[codec(index = 6)]
				Balances(runtime_types::pallet_balances::pallet::Call),
				#[codec(index = 8)]
				Multisig(runtime_types::pallet_multisig::pallet::Call),
				#[codec(index = 10)]
				ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Call),
				#[codec(index = 11)]
				ParachainInfo(runtime_types::parachain_info::pallet::Call),
				#[codec(index = 21)]
				CollatorSelection(runtime_types::pallet_collator_selection::pallet::Call),
				#[codec(index = 22)]
				Session(runtime_types::pallet_session::pallet::Call),
				#[codec(index = 30)]
				Council(runtime_types::pallet_collective::pallet::Call),
				#[codec(index = 31)]
				CouncilMembership(runtime_types::pallet_membership::pallet::Call),
				#[codec(index = 32)]
				Treasury(runtime_types::pallet_treasury::pallet::Call),
				#[codec(index = 33)]
				Democracy(runtime_types::pallet_democracy::pallet::Call),
				#[codec(index = 72)]
				TechnicalCommittee(runtime_types::pallet_collective::pallet::Call),
				#[codec(index = 73)]
				TechnicalCommitteeMembership(runtime_types::pallet_membership::pallet::Call),
				#[codec(index = 74)]
				ReleaseCommittee(runtime_types::pallet_collective::pallet::Call),
				#[codec(index = 75)]
				ReleaseMembership(runtime_types::pallet_membership::pallet::Call),
				#[codec(index = 34)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Call),
				#[codec(index = 35)]
				Utility(runtime_types::pallet_utility::pallet::Call),
				#[codec(index = 36)]
				Preimage(runtime_types::pallet_preimage::pallet::Call),
				#[codec(index = 37)]
				Proxy(runtime_types::pallet_proxy::pallet::Call),
				#[codec(index = 40)]
				XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Call),
				#[codec(index = 41)]
				PolkadotXcm(runtime_types::pallet_xcm::pallet::Call),
				#[codec(index = 42)]
				CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Call),
				#[codec(index = 43)]
				DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Call),
				#[codec(index = 44)]
				XTokens(runtime_types::orml_xtokens::module::Call),
				#[codec(index = 45)]
				UnknownTokens(runtime_types::orml_unknown_tokens::module::Call),
				#[codec(index = 52)]
				Tokens(runtime_types::orml_tokens::module::Call),
				#[codec(index = 56)]
				CrowdloanRewards(runtime_types::pallet_crowdloan_rewards::pallet::Call),
				#[codec(index = 57)]
				Assets(runtime_types::pallet_assets::pallet::Call),
				#[codec(index = 59)]
				AssetsRegistry(runtime_types::pallet_assets_registry::pallet::Call),
				#[codec(index = 76)]
				Referenda(runtime_types::pallet_referenda::pallet::Call),
				#[codec(index = 77)]
				ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Call),
				#[codec(index = 78)]
				OpenGovBalances(runtime_types::pallet_balances::pallet::Call),
				#[codec(index = 80)]
				Whitelist(runtime_types::pallet_whitelist::pallet::Call),
				#[codec(index = 100)]
				CallFilter(runtime_types::pallet_call_filter::pallet::Call),
				#[codec(index = 190)]
				Ibc(runtime_types::pallet_ibc::pallet::Call),
				#[codec(index = 191)]
				Ics20Fee(runtime_types::pallet_ibc::ics20_fee::pallet::Call),
				#[codec(index = 192)]
				PalletMultihopXcmIbc(runtime_types::pallet_multihop_xcm_ibc::pallet::Call),
				#[codec(index = 193)]
				PalletXcmHelper(runtime_types::pallet_xcm_helper::pallet::Call),
				#[codec(index = 194)]
				PalletLiquidStaking(runtime_types::pallet_liquid_staking::pallet::Call),
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum RuntimeError {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Error),
				#[codec(index = 2)]
				Sudo(runtime_types::pallet_sudo::pallet::Error),
				#[codec(index = 5)]
				Indices(runtime_types::pallet_indices::pallet::Error),
				#[codec(index = 6)]
				Balances(runtime_types::pallet_balances::pallet::Error),
				#[codec(index = 8)]
				Multisig(runtime_types::pallet_multisig::pallet::Error),
				#[codec(index = 10)]
				ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Error),
				#[codec(index = 21)]
				CollatorSelection(runtime_types::pallet_collator_selection::pallet::Error),
				#[codec(index = 22)]
				Session(runtime_types::pallet_session::pallet::Error),
				#[codec(index = 30)]
				Council(runtime_types::pallet_collective::pallet::Error),
				#[codec(index = 31)]
				CouncilMembership(runtime_types::pallet_membership::pallet::Error),
				#[codec(index = 32)]
				Treasury(runtime_types::pallet_treasury::pallet::Error),
				#[codec(index = 33)]
				Democracy(runtime_types::pallet_democracy::pallet::Error),
				#[codec(index = 72)]
				TechnicalCommittee(runtime_types::pallet_collective::pallet::Error),
				#[codec(index = 73)]
				TechnicalCommitteeMembership(runtime_types::pallet_membership::pallet::Error),
				#[codec(index = 74)]
				ReleaseCommittee(runtime_types::pallet_collective::pallet::Error),
				#[codec(index = 75)]
				ReleaseMembership(runtime_types::pallet_membership::pallet::Error),
				#[codec(index = 34)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Error),
				#[codec(index = 35)]
				Utility(runtime_types::pallet_utility::pallet::Error),
				#[codec(index = 36)]
				Preimage(runtime_types::pallet_preimage::pallet::Error),
				#[codec(index = 37)]
				Proxy(runtime_types::pallet_proxy::pallet::Error),
				#[codec(index = 40)]
				XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Error),
				#[codec(index = 41)]
				PolkadotXcm(runtime_types::pallet_xcm::pallet::Error),
				#[codec(index = 42)]
				CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Error),
				#[codec(index = 43)]
				DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Error),
				#[codec(index = 44)]
				XTokens(runtime_types::orml_xtokens::module::Error),
				#[codec(index = 45)]
				UnknownTokens(runtime_types::orml_unknown_tokens::module::Error),
				#[codec(index = 52)]
				Tokens(runtime_types::orml_tokens::module::Error),
				#[codec(index = 56)]
				CrowdloanRewards(runtime_types::pallet_crowdloan_rewards::pallet::Error),
				#[codec(index = 57)]
				Assets(runtime_types::pallet_assets::pallet::Error),
				#[codec(index = 59)]
				AssetsRegistry(runtime_types::pallet_assets_registry::pallet::Error),
				#[codec(index = 76)]
				Referenda(runtime_types::pallet_referenda::pallet::Error),
				#[codec(index = 77)]
				ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Error),
				#[codec(index = 78)]
				OpenGovBalances(runtime_types::pallet_balances::pallet::Error),
				#[codec(index = 80)]
				Whitelist(runtime_types::pallet_whitelist::pallet::Error),
				#[codec(index = 100)]
				CallFilter(runtime_types::pallet_call_filter::pallet::Error),
				#[codec(index = 190)]
				Ibc(runtime_types::pallet_ibc::pallet::Error),
				#[codec(index = 192)]
				PalletMultihopXcmIbc(runtime_types::pallet_multihop_xcm_ibc::pallet::Error),
				#[codec(index = 193)]
				PalletXcmHelper(runtime_types::pallet_xcm_helper::pallet::Error),
				#[codec(index = 194)]
				PalletLiquidStaking(runtime_types::pallet_liquid_staking::pallet::Error),
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum RuntimeEvent {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Event),
				#[codec(index = 2)]
				Sudo(runtime_types::pallet_sudo::pallet::Event),
				#[codec(index = 4)]
				TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
				#[codec(index = 5)]
				Indices(runtime_types::pallet_indices::pallet::Event),
				#[codec(index = 6)]
				Balances(runtime_types::pallet_balances::pallet::Event),
				#[codec(index = 8)]
				Multisig(runtime_types::pallet_multisig::pallet::Event),
				#[codec(index = 10)]
				ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Event),
				#[codec(index = 21)]
				CollatorSelection(runtime_types::pallet_collator_selection::pallet::Event),
				#[codec(index = 22)]
				Session(runtime_types::pallet_session::pallet::Event),
				#[codec(index = 30)]
				Council(runtime_types::pallet_collective::pallet::Event),
				#[codec(index = 31)]
				CouncilMembership(runtime_types::pallet_membership::pallet::Event),
				#[codec(index = 32)]
				Treasury(runtime_types::pallet_treasury::pallet::Event),
				#[codec(index = 33)]
				Democracy(runtime_types::pallet_democracy::pallet::Event),
				#[codec(index = 72)]
				TechnicalCommittee(runtime_types::pallet_collective::pallet::Event),
				#[codec(index = 73)]
				TechnicalCommitteeMembership(runtime_types::pallet_membership::pallet::Event),
				#[codec(index = 74)]
				ReleaseCommittee(runtime_types::pallet_collective::pallet::Event),
				#[codec(index = 75)]
				ReleaseMembership(runtime_types::pallet_membership::pallet::Event),
				#[codec(index = 34)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Event),
				#[codec(index = 35)]
				Utility(runtime_types::pallet_utility::pallet::Event),
				#[codec(index = 36)]
				Preimage(runtime_types::pallet_preimage::pallet::Event),
				#[codec(index = 37)]
				Proxy(runtime_types::pallet_proxy::pallet::Event),
				#[codec(index = 40)]
				XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Event),
				#[codec(index = 41)]
				PolkadotXcm(runtime_types::pallet_xcm::pallet::Event),
				#[codec(index = 42)]
				CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Event),
				#[codec(index = 43)]
				DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Event),
				#[codec(index = 44)]
				XTokens(runtime_types::orml_xtokens::module::Event),
				#[codec(index = 45)]
				UnknownTokens(runtime_types::orml_unknown_tokens::module::Event),
				#[codec(index = 52)]
				Tokens(runtime_types::orml_tokens::module::Event),
				#[codec(index = 56)]
				CrowdloanRewards(runtime_types::pallet_crowdloan_rewards::pallet::Event),
				#[codec(index = 59)]
				AssetsRegistry(runtime_types::pallet_assets_registry::pallet::Event),
				#[codec(index = 76)]
				Referenda(runtime_types::pallet_referenda::pallet::Event),
				#[codec(index = 77)]
				ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Event),
				#[codec(index = 78)]
				OpenGovBalances(runtime_types::pallet_balances::pallet::Event),
				#[codec(index = 80)]
				Whitelist(runtime_types::pallet_whitelist::pallet::Event),
				#[codec(index = 100)]
				CallFilter(runtime_types::pallet_call_filter::pallet::Event),
				#[codec(index = 190)]
				Ibc(runtime_types::pallet_ibc::pallet::Event),
				#[codec(index = 191)]
				Ics20Fee(runtime_types::pallet_ibc::ics20_fee::pallet::Event),
				#[codec(index = 192)]
				PalletMultihopXcmIbc(runtime_types::pallet_multihop_xcm_ibc::pallet::Event),
				#[codec(index = 193)]
				PalletXcmHelper(runtime_types::pallet_xcm_helper::pallet::Event),
				#[codec(index = 194)]
				PalletLiquidStaking(runtime_types::pallet_liquid_staking::pallet::Event),
			}
		}
		pub mod composable_support {
			use super::runtime_types;
			pub mod collections {
				use super::runtime_types;
				pub mod vec {
					use super::runtime_types;
					pub mod bounded {
						use super::runtime_types;
						pub mod bi_bounded_vec {
							use super::runtime_types;
							#[derive(
								:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
								:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
								:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
								:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
								Clone,
								Debug,
								Eq,
								PartialEq,
							)]
							# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
							#[decode_as_type(
								crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
							)]
							#[encode_as_type(
								crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
							)]
							pub struct BiBoundedVec<_0> {
								pub inner: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
							}
						}
					}
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct EcdsaSignature(pub [::core::primitive::u8; 65usize]);
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct EthereumAddress(pub [::core::primitive::u8; 20usize]);
			}
		}
		pub mod composable_traits {
			use super::runtime_types;
			pub mod account_proxy {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum ProxyType {
					#[codec(index = 0)]
					Any,
					#[codec(index = 1)]
					Governance,
					#[codec(index = 2)]
					CancelProxy,
					#[codec(index = 3)]
					Bridge,
					#[codec(index = 4)]
					Assets,
					#[codec(index = 5)]
					Defi,
					#[codec(index = 6)]
					Oracle,
					#[codec(index = 7)]
					Contracts,
				}
			}
			pub mod assets {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct AssetInfo < _0 > { pub name : :: core :: option :: Option < runtime_types :: composable_support :: collections :: vec :: bounded :: bi_bounded_vec :: BiBoundedVec < :: core :: primitive :: u8 > > , pub symbol : :: core :: option :: Option < runtime_types :: composable_support :: collections :: vec :: bounded :: bi_bounded_vec :: BiBoundedVec < :: core :: primitive :: u8 > > , pub decimals : :: core :: option :: Option < :: core :: primitive :: u8 > , pub existential_deposit : _0 , pub ratio : :: core :: option :: Option < runtime_types :: composable_traits :: currency :: Rational64 > , }
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct AssetInfoUpdate < _0 > { pub name : runtime_types :: composable_traits :: storage :: UpdateValue < :: core :: option :: Option < runtime_types :: composable_support :: collections :: vec :: bounded :: bi_bounded_vec :: BiBoundedVec < :: core :: primitive :: u8 > > > , pub symbol : runtime_types :: composable_traits :: storage :: UpdateValue < :: core :: option :: Option < runtime_types :: composable_support :: collections :: vec :: bounded :: bi_bounded_vec :: BiBoundedVec < :: core :: primitive :: u8 > > > , pub decimals : runtime_types :: composable_traits :: storage :: UpdateValue < :: core :: option :: Option < :: core :: primitive :: u8 > > , pub existential_deposit : runtime_types :: composable_traits :: storage :: UpdateValue < _0 > , pub ratio : runtime_types :: composable_traits :: storage :: UpdateValue < :: core :: option :: Option < runtime_types :: composable_traits :: currency :: Rational64 > > , }
			}
			pub mod currency {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Rational64 {
					pub n: ::core::primitive::u64,
					pub d: ::core::primitive::u64,
				}
			}
			pub mod storage {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum UpdateValue<_0> {
					#[codec(index = 0)]
					Ignore,
					#[codec(index = 1)]
					Set(_0),
				}
			}
			pub mod xcm {
				use super::runtime_types;
				pub mod memo {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum ChainHop {
						#[codec(index = 0)]
						SubstrateIbc,
						#[codec(index = 1)]
						CosmosIbc,
						#[codec(index = 2)]
						Xcm,
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct ChainInfo {
						pub chain_id: ::core::primitive::u32,
						pub order: ::core::primitive::u8,
						pub channel_id: ::core::primitive::u64,
						pub timestamp: ::core::option::Option<::core::primitive::u64>,
						pub height: ::core::option::Option<::core::primitive::u64>,
						pub retries: ::core::option::Option<::core::primitive::u8>,
						pub timeout: ::core::option::Option<::core::primitive::u64>,
						pub chain_hop: runtime_types::composable_traits::xcm::memo::ChainHop,
						pub para_id: ::core::option::Option<::core::primitive::u32>,
					}
				}
			}
		}
		pub mod cumulus_pallet_dmp_queue {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Service a single overweight message."]
					service_overweight {
						index: ::core::primitive::u64,
						weight_limit: runtime_types::sp_weights::weight_v2::Weight,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The message index given is unknown."]
					Unknown,
					#[codec(index = 1)]
					#[doc = "The amount of weight given is possibly not enough for executing the message."]
					OverLimit,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Downward message is invalid XCM."]
					InvalidFormat { message_id: [::core::primitive::u8; 32usize] },
					#[codec(index = 1)]
					#[doc = "Downward message is unsupported version of XCM."]
					UnsupportedVersion { message_id: [::core::primitive::u8; 32usize] },
					#[codec(index = 2)]
					#[doc = "Downward message executed with the given outcome."]
					ExecutedDownward {
						message_id: [::core::primitive::u8; 32usize],
						outcome: runtime_types::xcm::v3::traits::Outcome,
					},
					#[codec(index = 3)]
					#[doc = "The weight limit for handling downward messages was reached."]
					WeightExhausted {
						message_id: [::core::primitive::u8; 32usize],
						remaining_weight: runtime_types::sp_weights::weight_v2::Weight,
						required_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 4)]
					#[doc = "Downward message is overweight and was placed in the overweight queue."]
					OverweightEnqueued {
						message_id: [::core::primitive::u8; 32usize],
						overweight_index: ::core::primitive::u64,
						required_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 5)]
					#[doc = "Downward message from the overweight queue was executed."]
					OverweightServiced {
						overweight_index: ::core::primitive::u64,
						weight_used: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 6)]
					#[doc = "The maximum number of downward messages was."]
					MaxMessagesExhausted { message_id: [::core::primitive::u8; 32usize] },
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ConfigData {
				pub max_individual: runtime_types::sp_weights::weight_v2::Weight,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct PageIndexData {
				pub begin_used: ::core::primitive::u32,
				pub end_used: ::core::primitive::u32,
				pub overweight_count: ::core::primitive::u64,
			}
		}
		pub mod cumulus_pallet_parachain_system {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					# [codec (index = 0)] # [doc = "Set the current validation data."] # [doc = ""] # [doc = "This should be invoked exactly once per block. It will panic at the finalization"] # [doc = "phase if the call was not invoked."] # [doc = ""] # [doc = "The dispatch origin for this call must be `Inherent`"] # [doc = ""] # [doc = "As a side effect, this function upgrades the current validation function"] # [doc = "if the appropriate time has come."] set_validation_data { data : runtime_types :: cumulus_primitives_parachain_inherent :: ParachainInherentData , } , # [codec (index = 1)] sudo_send_upward_message { message : :: subxt :: ext :: subxt_core :: alloc :: vec :: Vec < :: core :: primitive :: u8 > , } , # [codec (index = 2)] # [doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"] # [doc = "later."] # [doc = ""] # [doc = "The `check_version` parameter sets a boolean flag for whether or not the runtime's spec"] # [doc = "version and name should be verified on upgrade. Since the authorization only has a hash,"] # [doc = "it cannot actually perform the verification."] # [doc = ""] # [doc = "This call requires Root origin."] authorize_upgrade { code_hash : :: subxt :: ext :: subxt_core :: utils :: H256 , check_version : :: core :: primitive :: bool , } , # [codec (index = 3)] # [doc = "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized."] # [doc = ""] # [doc = "If the authorization required a version check, this call will ensure the spec name"] # [doc = "remains unchanged and that the spec version has increased."] # [doc = ""] # [doc = "Note that this function will not apply the new `code`, but only attempt to schedule the"] # [doc = "upgrade with the Relay Chain."] # [doc = ""] # [doc = "All origins are allowed."] enact_authorized_upgrade { code : :: subxt :: ext :: subxt_core :: alloc :: vec :: Vec < :: core :: primitive :: u8 > , } , }
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Attempt to upgrade validation function while existing upgrade pending."]
					OverlappingUpgrades,
					#[codec(index = 1)]
					#[doc = "Polkadot currently prohibits this parachain from upgrading its validation function."]
					ProhibitedByPolkadot,
					#[codec(index = 2)]
					#[doc = "The supplied validation function has compiled into a blob larger than Polkadot is"]
					#[doc = "willing to run."]
					TooBig,
					#[codec(index = 3)]
					#[doc = "The inherent which supplies the validation data did not run this block."]
					ValidationDataNotAvailable,
					#[codec(index = 4)]
					#[doc = "The inherent which supplies the host configuration did not run this block."]
					HostConfigurationNotAvailable,
					#[codec(index = 5)]
					#[doc = "No validation function upgrade is currently scheduled."]
					NotScheduled,
					#[codec(index = 6)]
					#[doc = "No code upgrade has been authorized."]
					NothingAuthorized,
					#[codec(index = 7)]
					#[doc = "The given code upgrade has not been authorized."]
					Unauthorized,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "The validation function has been scheduled to apply."]
					ValidationFunctionStored,
					#[codec(index = 1)]
					#[doc = "The validation function was applied as of the contained relay chain block number."]
					ValidationFunctionApplied { relay_chain_block_num: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "The relay-chain aborted the upgrade process."]
					ValidationFunctionDiscarded,
					#[codec(index = 3)]
					#[doc = "An upgrade has been authorized."]
					UpgradeAuthorized { code_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 4)]
					#[doc = "Some downward messages have been received and will be processed."]
					DownwardMessagesReceived { count: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "Downward messages were processed using the given weight."]
					DownwardMessagesProcessed {
						weight_used: runtime_types::sp_weights::weight_v2::Weight,
						dmq_head: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 6)]
					#[doc = "An upward message was sent to the relay chain."]
					UpwardMessageSent {
						message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
				}
			}
			pub mod relay_state_snapshot {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct MessagingStateSnapshot { pub dmq_mqc_head : :: subxt :: ext :: subxt_core :: utils :: H256 , pub relay_dispatch_queue_size : runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: RelayDispachQueueSize , pub ingress_channels : :: subxt :: ext :: subxt_core :: alloc :: vec :: Vec < (runtime_types :: polkadot_parachain :: primitives :: Id , runtime_types :: polkadot_primitives :: v4 :: AbridgedHrmpChannel ,) > , pub egress_channels : :: subxt :: ext :: subxt_core :: alloc :: vec :: Vec < (runtime_types :: polkadot_parachain :: primitives :: Id , runtime_types :: polkadot_primitives :: v4 :: AbridgedHrmpChannel ,) > , }
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct RelayDispachQueueSize {
					pub remaining_count: ::core::primitive::u32,
					pub remaining_size: ::core::primitive::u32,
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct CodeUpgradeAuthorization {
				pub code_hash: ::subxt::ext::subxt_core::utils::H256,
				pub check_version: ::core::primitive::bool,
			}
		}
		pub mod cumulus_pallet_xcm {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Downward message is invalid XCM."]
					#[doc = "\\[ id \\]"]
					InvalidFormat([::core::primitive::u8; 32usize]),
					#[codec(index = 1)]
					#[doc = "Downward message is unsupported version of XCM."]
					#[doc = "\\[ id \\]"]
					UnsupportedVersion([::core::primitive::u8; 32usize]),
					#[codec(index = 2)]
					#[doc = "Downward message executed with the given outcome."]
					#[doc = "\\[ id, outcome \\]"]
					ExecutedDownward(
						[::core::primitive::u8; 32usize],
						runtime_types::xcm::v3::traits::Outcome,
					),
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Origin {
					#[codec(index = 0)]
					Relay,
					#[codec(index = 1)]
					SiblingParachain(runtime_types::polkadot_parachain::primitives::Id),
				}
			}
		}
		pub mod cumulus_pallet_xcmp_queue {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Services a single overweight XCM."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
					#[doc = "- `index`: The index of the overweight XCM to service"]
					#[doc = "- `weight_limit`: The amount of weight that XCM execution may take."]
					#[doc = ""]
					#[doc = "Errors:"]
					#[doc = "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map."]
					#[doc = "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format."]
					#[doc = "- `WeightOverLimit`: XCM execution may use greater `weight_limit`."]
					#[doc = ""]
					#[doc = "Events:"]
					#[doc = "- `OverweightServiced`: On success."]
					service_overweight {
						index: ::core::primitive::u64,
						weight_limit: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 1)]
					#[doc = "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `ControllerOrigin`."]
					suspend_xcm_execution,
					#[codec(index = 2)]
					#[doc = "Resumes all XCM executions for the XCMP queue."]
					#[doc = ""]
					#[doc = "Note that this function doesn't change the status of the in/out bound channels."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `ControllerOrigin`."]
					resume_xcm_execution,
					#[codec(index = 3)]
					#[doc = "Overwrites the number of pages of messages which must be in the queue for the other side to be told to"]
					#[doc = "suspend their sending."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `Root`."]
					#[doc = "- `new`: Desired value for `QueueConfigData.suspend_value`"]
					update_suspend_threshold { new: ::core::primitive::u32 },
					#[codec(index = 4)]
					#[doc = "Overwrites the number of pages of messages which must be in the queue after which we drop any further"]
					#[doc = "messages from the channel."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `Root`."]
					#[doc = "- `new`: Desired value for `QueueConfigData.drop_threshold`"]
					update_drop_threshold { new: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "Overwrites the number of pages of messages which the queue must be reduced to before it signals that"]
					#[doc = "message sending may recommence after it has been suspended."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `Root`."]
					#[doc = "- `new`: Desired value for `QueueConfigData.resume_threshold`"]
					update_resume_threshold { new: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "Overwrites the amount of remaining weight under which we stop processing messages."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `Root`."]
					#[doc = "- `new`: Desired value for `QueueConfigData.threshold_weight`"]
					update_threshold_weight { new: runtime_types::sp_weights::weight_v2::Weight },
					#[codec(index = 7)]
					#[doc = "Overwrites the speed to which the available weight approaches the maximum weight."]
					#[doc = "A lower number results in a faster progression. A value of 1 makes the entire weight available initially."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `Root`."]
					#[doc = "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."]
					update_weight_restrict_decay {
						new: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 8)]
					#[doc = "Overwrite the maximum amount of weight any individual message may consume."]
					#[doc = "Messages above this weight go into the overweight queue and may only be serviced explicitly."]
					#[doc = ""]
					#[doc = "- `origin`: Must pass `Root`."]
					#[doc = "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."]
					update_xcmp_max_individual_weight {
						new: runtime_types::sp_weights::weight_v2::Weight,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Failed to send XCM message."]
					FailedToSend,
					#[codec(index = 1)]
					#[doc = "Bad XCM origin."]
					BadXcmOrigin,
					#[codec(index = 2)]
					#[doc = "Bad XCM data."]
					BadXcm,
					#[codec(index = 3)]
					#[doc = "Bad overweight index."]
					BadOverweightIndex,
					#[codec(index = 4)]
					#[doc = "Provided weight is possibly not enough to execute the message."]
					WeightOverLimit,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Some XCM was executed ok."]
					Success {
						message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
						weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 1)]
					#[doc = "Some XCM failed."]
					Fail {
						message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
						error: runtime_types::xcm::v3::traits::Error,
						weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 2)]
					#[doc = "Bad XCM version used."]
					BadVersion {
						message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 3)]
					#[doc = "Bad XCM format used."]
					BadFormat {
						message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 4)]
					#[doc = "An HRMP message was sent to a sibling parachain."]
					XcmpMessageSent {
						message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 5)]
					#[doc = "An XCM exceeded the individual message weight budget."]
					OverweightEnqueued {
						sender: runtime_types::polkadot_parachain::primitives::Id,
						sent_at: ::core::primitive::u32,
						index: ::core::primitive::u64,
						required: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 6)]
					#[doc = "An XCM from the overweight queue was executed with the given actual weight used."]
					OverweightServiced {
						index: ::core::primitive::u64,
						used: runtime_types::sp_weights::weight_v2::Weight,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct InboundChannelDetails {
				pub sender: runtime_types::polkadot_parachain::primitives::Id,
				pub state: runtime_types::cumulus_pallet_xcmp_queue::InboundState,
				pub message_metadata: ::subxt::ext::subxt_core::alloc::vec::Vec<(
					::core::primitive::u32,
					runtime_types::polkadot_parachain::primitives::XcmpMessageFormat,
				)>,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum InboundState {
				#[codec(index = 0)]
				Ok,
				#[codec(index = 1)]
				Suspended,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct OutboundChannelDetails {
				pub recipient: runtime_types::polkadot_parachain::primitives::Id,
				pub state: runtime_types::cumulus_pallet_xcmp_queue::OutboundState,
				pub signals_exist: ::core::primitive::bool,
				pub first_index: ::core::primitive::u16,
				pub last_index: ::core::primitive::u16,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum OutboundState {
				#[codec(index = 0)]
				Ok,
				#[codec(index = 1)]
				Suspended,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct QueueConfigData {
				pub suspend_threshold: ::core::primitive::u32,
				pub drop_threshold: ::core::primitive::u32,
				pub resume_threshold: ::core::primitive::u32,
				pub threshold_weight: runtime_types::sp_weights::weight_v2::Weight,
				pub weight_restrict_decay: runtime_types::sp_weights::weight_v2::Weight,
				pub xcmp_max_individual_weight: runtime_types::sp_weights::weight_v2::Weight,
			}
		}
		pub mod cumulus_primitives_parachain_inherent {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct MessageQueueChain(pub ::subxt::ext::subxt_core::utils::H256);
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ParachainInherentData {
				pub validation_data:
					runtime_types::polkadot_primitives::v4::PersistedValidationData<
						::subxt::ext::subxt_core::utils::H256,
						::core::primitive::u32,
					>,
				pub relay_chain_state: runtime_types::sp_trie::storage_proof::StorageProof,
				pub downward_messages: ::subxt::ext::subxt_core::alloc::vec::Vec<
					runtime_types::polkadot_core_primitives::InboundDownwardMessage<
						::core::primitive::u32,
					>,
				>,
				pub horizontal_messages: ::subxt::ext::subxt_core::utils::KeyedVec<
					runtime_types::polkadot_parachain::primitives::Id,
					::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::polkadot_core_primitives::InboundHrmpMessage<
							::core::primitive::u32,
						>,
					>,
				>,
			}
		}
		pub mod frame_support {
			use super::runtime_types;
			pub mod dispatch {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum DispatchClass {
					#[codec(index = 0)]
					Normal,
					#[codec(index = 1)]
					Operational,
					#[codec(index = 2)]
					Mandatory,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct DispatchInfo {
					pub weight: runtime_types::sp_weights::weight_v2::Weight,
					pub class: runtime_types::frame_support::dispatch::DispatchClass,
					pub pays_fee: runtime_types::frame_support::dispatch::Pays,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Pays {
					#[codec(index = 0)]
					Yes,
					#[codec(index = 1)]
					No,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct PerDispatchClass<_0> {
					pub normal: _0,
					pub operational: _0,
					pub mandatory: _0,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct PostDispatchInfo {
					pub actual_weight:
						::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
					pub pays_fee: runtime_types::frame_support::dispatch::Pays,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum RawOrigin<_0> {
					#[codec(index = 0)]
					Root,
					#[codec(index = 1)]
					Signed(_0),
					#[codec(index = 2)]
					None,
				}
			}
			pub mod traits {
				use super::runtime_types;
				pub mod preimages {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum Bounded<_0> {
						#[codec(index = 0)]
						Legacy {
							hash: ::subxt::ext::subxt_core::utils::H256,
						},
						#[codec(index = 1)]
						Inline(
							runtime_types::bounded_collections::bounded_vec::BoundedVec<
								::core::primitive::u8,
							>,
						),
						#[codec(index = 2)]
						Lookup {
							hash: ::subxt::ext::subxt_core::utils::H256,
							len: ::core::primitive::u32,
						},
						__Ignore(::core::marker::PhantomData<_0>),
					}
				}
				pub mod schedule {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum DispatchTime<_0> {
						#[codec(index = 0)]
						At(_0),
						#[codec(index = 1)]
						After(_0),
					}
				}
				pub mod tokens {
					use super::runtime_types;
					pub mod misc {
						use super::runtime_types;
						#[derive(
							:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
							:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
							:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
							:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
							Clone,
							Debug,
							Eq,
							PartialEq,
						)]
						# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
						#[decode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
						)]
						#[encode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
						)]
						pub enum BalanceStatus {
							#[codec(index = 0)]
							Free,
							#[codec(index = 1)]
							Reserved,
						}
					}
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct PalletId(pub [::core::primitive::u8; 8usize]);
		}
		pub mod frame_system {
			use super::runtime_types;
			pub mod extensions {
				use super::runtime_types;
				pub mod check_genesis {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct CheckGenesis;
				}
				pub mod check_mortality {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
				}
				pub mod check_non_zero_sender {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct CheckNonZeroSender;
				}
				pub mod check_nonce {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
				}
				pub mod check_spec_version {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct CheckSpecVersion;
				}
				pub mod check_tx_version {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct CheckTxVersion;
				}
				pub mod check_weight {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct CheckWeight;
				}
			}
			pub mod limits {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct BlockLength {
					pub max: runtime_types::frame_support::dispatch::PerDispatchClass<
						::core::primitive::u32,
					>,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct BlockWeights {
					pub base_block: runtime_types::sp_weights::weight_v2::Weight,
					pub max_block: runtime_types::sp_weights::weight_v2::Weight,
					pub per_class: runtime_types::frame_support::dispatch::PerDispatchClass<
						runtime_types::frame_system::limits::WeightsPerClass,
					>,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct WeightsPerClass {
					pub base_extrinsic: runtime_types::sp_weights::weight_v2::Weight,
					pub max_extrinsic:
						::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
					pub max_total:
						::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
					pub reserved:
						::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Make some on-chain remark."]
					#[doc = ""]
					#[doc = "- `O(1)`"]
					remark {
						remark: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					#[doc = "Set the number of pages in the WebAssembly environment's heap."]
					set_heap_pages { pages: ::core::primitive::u64 },
					#[codec(index = 2)]
					#[doc = "Set the new runtime code."]
					set_code {
						code: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 3)]
					#[doc = "Set the new runtime code without doing any checks of the given `code`."]
					set_code_without_checks {
						code: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 4)]
					#[doc = "Set some items of storage."]
					set_storage {
						items: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						)>,
					},
					#[codec(index = 5)]
					#[doc = "Kill some items from storage."]
					kill_storage {
						keys: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
					},
					#[codec(index = 6)]
					#[doc = "Kill all storage items with a key that starts with the given prefix."]
					#[doc = ""]
					#[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
					#[doc = "the prefix we are removing to accurately calculate the weight of this function."]
					kill_prefix {
						prefix: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						subkeys: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					#[doc = "Make some on-chain remark and emit event."]
					remark_with_event {
						remark: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Error for the System pallet"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The name of specification does not match between the current runtime"]
					#[doc = "and the new runtime."]
					InvalidSpecName,
					#[codec(index = 1)]
					#[doc = "The specification version is not allowed to decrease between the current runtime"]
					#[doc = "and the new runtime."]
					SpecVersionNeedsToIncrease,
					#[codec(index = 2)]
					#[doc = "Failed to extract the runtime version from the new runtime."]
					#[doc = ""]
					#[doc = "Either calling `Core_version` or decoding `RuntimeVersion` failed."]
					FailedToExtractRuntimeVersion,
					#[codec(index = 3)]
					#[doc = "Suicide called when the account has non-default composite data."]
					NonDefaultComposite,
					#[codec(index = 4)]
					#[doc = "There is a non-zero reference count preventing the account from being purged."]
					NonZeroRefCount,
					#[codec(index = 5)]
					#[doc = "The origin filter prevent the call to be dispatched."]
					CallFiltered,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Event for the System pallet."]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "An extrinsic completed successfully."]
					ExtrinsicSuccess {
						dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
					},
					#[codec(index = 1)]
					#[doc = "An extrinsic failed."]
					ExtrinsicFailed {
						dispatch_error: runtime_types::sp_runtime::DispatchError,
						dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
					},
					#[codec(index = 2)]
					#[doc = "`:code` was updated."]
					CodeUpdated,
					#[codec(index = 3)]
					#[doc = "A new account was created."]
					NewAccount { account: ::subxt::ext::subxt_core::utils::AccountId32 },
					#[codec(index = 4)]
					#[doc = "An account was reaped."]
					KilledAccount { account: ::subxt::ext::subxt_core::utils::AccountId32 },
					#[codec(index = 5)]
					#[doc = "On on-chain remark happened."]
					Remarked {
						sender: ::subxt::ext::subxt_core::utils::AccountId32,
						hash: ::subxt::ext::subxt_core::utils::H256,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct AccountInfo<_0, _1> {
				pub nonce: _0,
				pub consumers: ::core::primitive::u32,
				pub providers: ::core::primitive::u32,
				pub sufficients: ::core::primitive::u32,
				pub data: _1,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct EventRecord<_0, _1> {
				pub phase: runtime_types::frame_system::Phase,
				pub event: _0,
				pub topics: ::subxt::ext::subxt_core::alloc::vec::Vec<_1>,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct LastRuntimeUpgradeInfo {
				#[codec(compact)]
				pub spec_version: ::core::primitive::u32,
				pub spec_name: ::subxt::ext::subxt_core::alloc::string::String,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum Phase {
				#[codec(index = 0)]
				ApplyExtrinsic(::core::primitive::u32),
				#[codec(index = 1)]
				Finalization,
				#[codec(index = 2)]
				Initialization,
			}
		}
		pub mod ibc {
			use super::runtime_types;
			pub mod applications {
				use super::runtime_types;
				pub mod transfer {
					use super::runtime_types;
					pub mod denom {
						use super::runtime_types;
						#[derive(
							:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
							:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
							:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
							:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
							Clone,
							Debug,
							Eq,
							PartialEq,
						)]
						# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
						#[decode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
						)]
						#[encode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
						)]
						pub struct BaseDenom(pub ::subxt::ext::subxt_core::alloc::string::String);
						#[derive(
							:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
							:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
							:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
							:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
							Clone,
							Debug,
							Eq,
							PartialEq,
						)]
						# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
						#[decode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
						)]
						#[encode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
						)]
						pub struct PrefixedDenom {
							pub trace_path:
								runtime_types::ibc::applications::transfer::denom::TracePath,
							pub base_denom:
								runtime_types::ibc::applications::transfer::denom::BaseDenom,
						}
						#[derive(
							:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
							:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
							:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
							:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
							Clone,
							Debug,
							Eq,
							PartialEq,
						)]
						# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
						#[decode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
						)]
						#[encode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
						)]
						pub struct TracePath(
							pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
								runtime_types::ibc::applications::transfer::denom::TracePrefix,
							>,
						);
						#[derive(
							:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
							:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
							:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
							:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
							Clone,
							Debug,
							Eq,
							PartialEq,
						)]
						# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
						#[decode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
						)]
						#[encode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
						)]
						pub struct TracePrefix {
							pub port_id: runtime_types::ibc::core::ics24_host::identifier::PortId,
							pub channel_id:
								runtime_types::ibc::core::ics24_host::identifier::ChannelId,
						}
					}
				}
			}
			pub mod core {
				use super::runtime_types;
				pub mod ics02_client {
					use super::runtime_types;
					pub mod height {
						use super::runtime_types;
						#[derive(
							:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
							:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
							:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
							:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
							Clone,
							Debug,
							Eq,
							PartialEq,
						)]
						# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
						#[decode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
						)]
						#[encode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
						)]
						pub struct Height {
							pub revision_number: ::core::primitive::u64,
							pub revision_height: ::core::primitive::u64,
						}
					}
				}
				pub mod ics24_host {
					use super::runtime_types;
					pub mod identifier {
						use super::runtime_types;
						#[derive(
							:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
							:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
							:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
							:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
							Clone,
							Debug,
							Eq,
							PartialEq,
						)]
						# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
						#[decode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
						)]
						#[encode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
						)]
						pub struct ChannelId(pub ::subxt::ext::subxt_core::alloc::string::String);
						#[derive(
							:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
							:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
							:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
							:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
							Clone,
							Debug,
							Eq,
							PartialEq,
						)]
						# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
						#[decode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
						)]
						#[encode_as_type(
							crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
						)]
						pub struct PortId(pub ::subxt::ext::subxt_core::alloc::string::String);
					}
				}
			}
			pub mod signer {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Signer(pub ::subxt::ext::subxt_core::alloc::string::String);
			}
		}
		pub mod ibc_primitives {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum Timeout {
				#[codec(index = 0)]
				Offset {
					timestamp: ::core::option::Option<::core::primitive::u64>,
					height: ::core::option::Option<::core::primitive::u64>,
				},
				#[codec(index = 1)]
				Absolute {
					timestamp: ::core::option::Option<::core::primitive::u64>,
					height: ::core::option::Option<::core::primitive::u64>,
				},
			}
		}
		pub mod orml_tokens {
			use super::runtime_types;
			pub mod module {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Transfer some liquid free balance to another account."]
					#[doc = ""]
					#[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
					#[doc = "It will decrease the total issuance of the system by the"]
					#[doc = "`TransferFee`. If the sender's account is below the existential"]
					#[doc = "deposit as a result of the transfer, the account will be reaped."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be `Signed` by the"]
					#[doc = "transactor."]
					#[doc = ""]
					#[doc = "- `dest`: The recipient of the transfer."]
					#[doc = "- `currency_id`: currency type."]
					#[doc = "- `amount`: free balance amount to tranfer."]
					transfer {
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "Transfer all remaining balance to the given account."]
					#[doc = ""]
					#[doc = "NOTE: This function only attempts to transfer _transferable_"]
					#[doc = "balances. This means that any locked, reserved, or existential"]
					#[doc = "deposits (when `keep_alive` is `true`), will not be transferred by"]
					#[doc = "this function. To ensure that this function results in a killed"]
					#[doc = "account, you might need to prepare the account by removing any"]
					#[doc = "reference counters, storage deposits, etc..."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be `Signed` by the"]
					#[doc = "transactor."]
					#[doc = ""]
					#[doc = "- `dest`: The recipient of the transfer."]
					#[doc = "- `currency_id`: currency type."]
					#[doc = "- `keep_alive`: A boolean to determine if the `transfer_all`"]
					#[doc = "  operation should send all of the funds the account has, causing"]
					#[doc = "  the sender account to be killed (false), or transfer everything"]
					#[doc = "  except at least the existential deposit, which will guarantee to"]
					#[doc = "  keep the sender account alive (true)."]
					transfer_all {
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::primitives::currency::CurrencyId,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					#[doc = "Same as the [`transfer`] call, but with a check that the transfer"]
					#[doc = "will not kill the origin account."]
					#[doc = ""]
					#[doc = "99% of the time you want [`transfer`] instead."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be `Signed` by the"]
					#[doc = "transactor."]
					#[doc = ""]
					#[doc = "- `dest`: The recipient of the transfer."]
					#[doc = "- `currency_id`: currency type."]
					#[doc = "- `amount`: free balance amount to tranfer."]
					transfer_keep_alive {
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Exactly as `transfer`, except the origin must be root and the source"]
					#[doc = "account may be specified."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Root_."]
					#[doc = ""]
					#[doc = "- `source`: The sender of the transfer."]
					#[doc = "- `dest`: The recipient of the transfer."]
					#[doc = "- `currency_id`: currency type."]
					#[doc = "- `amount`: free balance amount to tranfer."]
					force_transfer {
						source: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::primitives::currency::CurrencyId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Set the balances of a given account."]
					#[doc = ""]
					#[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it"]
					#[doc = "will also decrease the total issuance of the system"]
					#[doc = "(`TotalIssuance`). If the new free or reserved balance is below the"]
					#[doc = "existential deposit, it will reap the `AccountInfo`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call is `root`."]
					set_balance {
						who: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						currency_id: runtime_types::primitives::currency::CurrencyId,
						#[codec(compact)]
						new_free: ::core::primitive::u128,
						#[codec(compact)]
						new_reserved: ::core::primitive::u128,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The balance is too low"]
					BalanceTooLow,
					#[codec(index = 1)]
					#[doc = "Cannot convert Amount into Balance type"]
					AmountIntoBalanceFailed,
					#[codec(index = 2)]
					#[doc = "Failed because liquidity restrictions due to locking"]
					LiquidityRestrictions,
					#[codec(index = 3)]
					#[doc = "Failed because the maximum locks was exceeded"]
					MaxLocksExceeded,
					#[codec(index = 4)]
					#[doc = "Transfer/payment would kill account"]
					KeepAlive,
					#[codec(index = 5)]
					#[doc = "Value too low to create account due to existential deposit"]
					ExistentialDeposit,
					#[codec(index = 6)]
					#[doc = "Beneficiary account must pre-exist"]
					DeadAccount,
					#[codec(index = 7)]
					TooManyReserves,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "An account was created with some free balance."]
					Endowed {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "An account was removed whose balance was non-zero but below"]
					#[doc = "ExistentialDeposit, resulting in an outright loss."]
					DustLost {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Transfer succeeded."]
					Transfer {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						from: ::subxt::ext::subxt_core::utils::AccountId32,
						to: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Some balance was reserved (moved from free to reserved)."]
					Reserved {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Some balance was unreserved (moved from reserved to free)."]
					Unreserved {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					#[doc = "Some reserved balance was repatriated (moved from reserved to"]
					#[doc = "another account)."]
					ReserveRepatriated {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						from: ::subxt::ext::subxt_core::utils::AccountId32,
						to: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
						status: runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
					},
					#[codec(index = 6)]
					#[doc = "A balance was set by root."]
					BalanceSet {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						free: ::core::primitive::u128,
						reserved: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					#[doc = "The total issuance of an currency has been set"]
					TotalIssuanceSet {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					#[doc = "Some balances were withdrawn (e.g. pay for transaction fee)"]
					Withdrawn {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					#[doc = "Some balances were slashed (e.g. due to mis-behavior)"]
					Slashed {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						free_amount: ::core::primitive::u128,
						reserved_amount: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					#[doc = "Deposited some balance into an account"]
					Deposited {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					#[doc = "Some funds are locked"]
					LockSet {
						lock_id: [::core::primitive::u8; 8usize],
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 12)]
					#[doc = "Some locked funds were unlocked"]
					LockRemoved {
						lock_id: [::core::primitive::u8; 8usize],
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
					},
					#[codec(index = 13)]
					#[doc = "Some free balance was locked."]
					Locked {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 14)]
					#[doc = "Some locked balance was freed."]
					Unlocked {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 15)]
					Issued {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 16)]
					Rescinded {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct AccountData<_0> {
				pub free: _0,
				pub reserved: _0,
				pub frozen: _0,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct BalanceLock<_0> {
				pub id: [::core::primitive::u8; 8usize],
				pub amount: _0,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ReserveData<_0, _1> {
				pub id: _0,
				pub amount: _1,
			}
		}
		pub mod orml_unknown_tokens {
			use super::runtime_types;
			pub mod module {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The balance is too low."]
					BalanceTooLow,
					#[codec(index = 1)]
					#[doc = "The operation will cause balance to overflow."]
					BalanceOverflow,
					#[codec(index = 2)]
					#[doc = "Unhandled asset."]
					UnhandledAsset,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Deposit success."]
					Deposited {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						who: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 1)]
					#[doc = "Withdraw success."]
					Withdrawn {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						who: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
				}
			}
		}
		pub mod orml_xtokens {
			use super::runtime_types;
			pub mod module {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Transfer native currencies."]
					#[doc = ""]
					#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
					#[doc = "chain, and it would be charged from the transferred assets. If set"]
					#[doc = "below requirements, the execution may fail and assets wouldn't be"]
					#[doc = "received."]
					#[doc = ""]
					#[doc = "It's a no-op if any error on local XCM execution or message sending."]
					#[doc = "Note sending assets out per se doesn't guarantee they would be"]
					#[doc = "received. Receiving depends on if the XCM message could be delivered"]
					#[doc = "by the network, and if the receiving chain would handle"]
					#[doc = "messages correctly."]
					transfer {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
						dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 1)]
					#[doc = "Transfer `MultiAsset`."]
					#[doc = ""]
					#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
					#[doc = "chain, and it would be charged from the transferred assets. If set"]
					#[doc = "below requirements, the execution may fail and assets wouldn't be"]
					#[doc = "received."]
					#[doc = ""]
					#[doc = "It's a no-op if any error on local XCM execution or message sending."]
					#[doc = "Note sending assets out per se doesn't guarantee they would be"]
					#[doc = "received. Receiving depends on if the XCM message could be delivered"]
					#[doc = "by the network, and if the receiving chain would handle"]
					#[doc = "messages correctly."]
					transfer_multiasset {
						asset: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiAsset,
						>,
						dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 2)]
					#[doc = "Transfer native currencies specifying the fee and amount as"]
					#[doc = "separate."]
					#[doc = ""]
					#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
					#[doc = "chain, and it would be charged from the transferred assets. If set"]
					#[doc = "below requirements, the execution may fail and assets wouldn't be"]
					#[doc = "received."]
					#[doc = ""]
					#[doc = "`fee` is the amount to be spent to pay for execution in destination"]
					#[doc = "chain. Both fee and amount will be subtracted form the callers"]
					#[doc = "balance."]
					#[doc = ""]
					#[doc = "If `fee` is not high enough to cover for the execution costs in the"]
					#[doc = "destination chain, then the assets will be trapped in the"]
					#[doc = "destination chain"]
					#[doc = ""]
					#[doc = "It's a no-op if any error on local XCM execution or message sending."]
					#[doc = "Note sending assets out per se doesn't guarantee they would be"]
					#[doc = "received. Receiving depends on if the XCM message could be delivered"]
					#[doc = "by the network, and if the receiving chain would handle"]
					#[doc = "messages correctly."]
					transfer_with_fee {
						currency_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
						fee: ::core::primitive::u128,
						dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 3)]
					#[doc = "Transfer `MultiAsset` specifying the fee and amount as separate."]
					#[doc = ""]
					#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
					#[doc = "chain, and it would be charged from the transferred assets. If set"]
					#[doc = "below requirements, the execution may fail and assets wouldn't be"]
					#[doc = "received."]
					#[doc = ""]
					#[doc = "`fee` is the multiasset to be spent to pay for execution in"]
					#[doc = "destination chain. Both fee and amount will be subtracted form the"]
					#[doc = "callers balance For now we only accept fee and asset having the same"]
					#[doc = "`MultiLocation` id."]
					#[doc = ""]
					#[doc = "If `fee` is not high enough to cover for the execution costs in the"]
					#[doc = "destination chain, then the assets will be trapped in the"]
					#[doc = "destination chain"]
					#[doc = ""]
					#[doc = "It's a no-op if any error on local XCM execution or message sending."]
					#[doc = "Note sending assets out per se doesn't guarantee they would be"]
					#[doc = "received. Receiving depends on if the XCM message could be delivered"]
					#[doc = "by the network, and if the receiving chain would handle"]
					#[doc = "messages correctly."]
					transfer_multiasset_with_fee {
						asset: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiAsset,
						>,
						fee: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiAsset,
						>,
						dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 4)]
					#[doc = "Transfer several currencies specifying the item to be used as fee"]
					#[doc = ""]
					#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
					#[doc = "chain, and it would be charged from the transferred assets. If set"]
					#[doc = "below requirements, the execution may fail and assets wouldn't be"]
					#[doc = "received."]
					#[doc = ""]
					#[doc = "`fee_item` is index of the currencies tuple that we want to use for"]
					#[doc = "payment"]
					#[doc = ""]
					#[doc = "It's a no-op if any error on local XCM execution or message sending."]
					#[doc = "Note sending assets out per se doesn't guarantee they would be"]
					#[doc = "received. Receiving depends on if the XCM message could be delivered"]
					#[doc = "by the network, and if the receiving chain would handle"]
					#[doc = "messages correctly."]
					transfer_multicurrencies {
						currencies: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							runtime_types::primitives::currency::CurrencyId,
							::core::primitive::u128,
						)>,
						fee_item: ::core::primitive::u32,
						dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 5)]
					#[doc = "Transfer several `MultiAsset` specifying the item to be used as fee"]
					#[doc = ""]
					#[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
					#[doc = "chain, and it would be charged from the transferred assets. If set"]
					#[doc = "below requirements, the execution may fail and assets wouldn't be"]
					#[doc = "received."]
					#[doc = ""]
					#[doc = "`fee_item` is index of the MultiAssets that we want to use for"]
					#[doc = "payment"]
					#[doc = ""]
					#[doc = "It's a no-op if any error on local XCM execution or message sending."]
					#[doc = "Note sending assets out per se doesn't guarantee they would be"]
					#[doc = "received. Receiving depends on if the XCM message could be delivered"]
					#[doc = "by the network, and if the receiving chain would handle"]
					#[doc = "messages correctly."]
					transfer_multiassets {
						assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiAssets,
						>,
						fee_item: ::core::primitive::u32,
						dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Asset has no reserve location."]
					AssetHasNoReserve,
					#[codec(index = 1)]
					#[doc = "Not cross-chain transfer."]
					NotCrossChainTransfer,
					#[codec(index = 2)]
					#[doc = "Invalid transfer destination."]
					InvalidDest,
					#[codec(index = 3)]
					#[doc = "Currency is not cross-chain transferable."]
					NotCrossChainTransferableCurrency,
					#[codec(index = 4)]
					#[doc = "The message's weight could not be determined."]
					UnweighableMessage,
					#[codec(index = 5)]
					#[doc = "XCM execution failed."]
					XcmExecutionFailed,
					#[codec(index = 6)]
					#[doc = "Could not re-anchor the assets to declare the fees for the"]
					#[doc = "destination chain."]
					CannotReanchor,
					#[codec(index = 7)]
					#[doc = "Could not get ancestry of asset reserve location."]
					InvalidAncestry,
					#[codec(index = 8)]
					#[doc = "The MultiAsset is invalid."]
					InvalidAsset,
					#[codec(index = 9)]
					#[doc = "The destination `MultiLocation` provided cannot be inverted."]
					DestinationNotInvertible,
					#[codec(index = 10)]
					#[doc = "The version of the `Versioned` value used is not able to be"]
					#[doc = "interpreted."]
					BadVersion,
					#[codec(index = 11)]
					#[doc = "We tried sending distinct asset and fee but they have different"]
					#[doc = "reserve chains."]
					DistinctReserveForAssetAndFee,
					#[codec(index = 12)]
					#[doc = "The fee is zero."]
					ZeroFee,
					#[codec(index = 13)]
					#[doc = "The transfering asset amount is zero."]
					ZeroAmount,
					#[codec(index = 14)]
					#[doc = "The number of assets to be sent is over the maximum."]
					TooManyAssetsBeingSent,
					#[codec(index = 15)]
					#[doc = "The specified index does not exist in a MultiAssets struct."]
					AssetIndexNonExistent,
					#[codec(index = 16)]
					#[doc = "Fee is not enough."]
					FeeNotEnough,
					#[codec(index = 17)]
					#[doc = "Not supported MultiLocation"]
					NotSupportedMultiLocation,
					#[codec(index = 18)]
					#[doc = "MinXcmFee not registered for certain reserve location"]
					MinXcmFeeNotDefined,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Transferred `MultiAsset` with fee."]
					TransferredMultiAssets {
						sender: ::subxt::ext::subxt_core::utils::AccountId32,
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						fee: runtime_types::xcm::v3::multiasset::MultiAsset,
						dest: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
				}
			}
		}
		pub mod pallet_asset_tx_payment {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Sets or resets payment asset."]
					#[doc = ""]
					#[doc = "If `asset_id` is `None`, then native asset is used."]
					#[doc = "Else new asset is configured and ED is on hold."]
					set_payment_asset {
						payer: ::subxt::ext::subxt_core::utils::AccountId32,
						asset_id:
							::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ChargeAssetTxPayment {
				#[codec(compact)]
				pub tip: ::core::primitive::u128,
				pub asset_id:
					::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
			}
		}
		pub mod pallet_assets {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Transfer `amount` of `asset` from `origin` to `dest`."]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When `origin` is not signed."]
					#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
					#[doc = "   cannot be respected."]
					#[doc = " - If the `dest` cannot be looked up."]
					transfer {
						asset: runtime_types::primitives::currency::CurrencyId,
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 1)]
					#[doc = "Transfer `amount` of the native asset from `origin` to `dest`. This is slightly"]
					#[doc = "cheaper to call, as it avoids an asset lookup."]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When `origin` is not signed."]
					#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
					#[doc = "   cannot be respected."]
					#[doc = " - If the `dest` cannot be looked up."]
					transfer_native {
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					#[doc = "Transfer `amount` of the `asset` from `origin` to `dest`. This requires root."]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When `origin` is not root."]
					#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
					#[doc = "   cannot be respected."]
					#[doc = " - If the `dest` cannot be looked up."]
					force_transfer {
						asset: runtime_types::primitives::currency::CurrencyId,
						source: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 3)]
					#[doc = "Transfer `amount` of the the native asset from `origin` to `dest`. This requires root."]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When `origin` is not root."]
					#[doc = " - If the account has insufficient free balance to make the transfer, or if `keep_alive`"]
					#[doc = "   cannot be respected."]
					#[doc = " - If the `dest` cannot be looked up."]
					force_transfer_native {
						source: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					#[doc = "Transfer all free balance of the `asset` from `origin` to `dest`."]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When `origin` is not signed."]
					#[doc = " - If the `dest` cannot be looked up."]
					transfer_all {
						asset: runtime_types::primitives::currency::CurrencyId,
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "Transfer all free balance of the native asset from `origin` to `dest`."]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When `origin` is not signed."]
					#[doc = " - If the `dest` cannot be looked up."]
					transfer_all_native {
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 6)]
					#[doc = "Creates a new asset, minting `amount` of funds into the `dest` account. Intended to be"]
					#[doc = "used for creating wrapped assets, not associated with any project."]
					mint_initialize {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 7)]
					#[doc = "Creates a new asset, minting `amount` of funds into the `dest` account. The `dest`"]
					#[doc = "account can use the democracy pallet to mint further assets, or if the governance_origin"]
					#[doc = "is set to an owned account, using signed transactions. In general the"]
					#[doc = "`governance_origin` should be generated from the pallet id."]
					mint_initialize_with_governance {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						governance_origin: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 8)]
					#[doc = "Mints `amount` of `asset_id` into the `dest` account."]
					mint_into {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					#[doc = "Burns `amount` of `asset_id` into the `dest` account."]
					burn_from {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					#[doc = "Transfer all free balance of the `asset` from `source` to `dest`."]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When `origin` is not signed."]
					#[doc = " - If the `dest` cannot be looked up."]
					force_transfer_all {
						asset: runtime_types::primitives::currency::CurrencyId,
						source: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 11)]
					#[doc = "Transfer all free balance of the native asset from `source` to `dest`."]
					#[doc = ""]
					#[doc = "# Errors"]
					#[doc = " - When `origin` is not signed."]
					#[doc = " - If the `dest` cannot be looked up."]
					force_transfer_all_native {
						source: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						keep_alive: ::core::primitive::bool,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					CannotSetNewCurrencyToRegistry,
					#[codec(index = 1)]
					InvalidCurrency,
				}
			}
		}
		pub mod pallet_assets_registry {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Creates an asset."]
					#[doc = ""]
					#[doc = "# Parameters:"]
					#[doc = ""]
					#[doc = "* `local_or_foreign` - Foreign asset location or unused local asset ID"]
					#[doc = ""]
					#[doc = "* `asset_info` - Information to register the asset with, see [`AssetInfo`]"]
					#[doc = ""]
					#[doc = "# Emits"]
					#[doc = "* `AssetRegistered`"]
					register_asset {
						protocol_id: [::core::primitive::u8; 4usize],
						nonce: ::core::primitive::u64,
						location: ::core::option::Option<
							runtime_types::primitives::currency::ForeignAssetId,
						>,
						asset_info: runtime_types::composable_traits::assets::AssetInfo<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Update stored asset information."]
					#[doc = ""]
					#[doc = "Emits:"]
					#[doc = "* `AssetUpdated`"]
					update_asset {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						asset_info: runtime_types::composable_traits::assets::AssetInfoUpdate<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 2)]
					#[doc = "Minimal amount of `foreign_asset_id` required to send message to other network."]
					#[doc = "Target network may or may not accept payment `amount`."]
					#[doc = "Assumed this is maintained up to date by technical team."]
					#[doc = "Mostly UI hint and fail fast solution."]
					#[doc = "Messages sending smaller fee will not be sent."]
					#[doc = "In theory can be updated by parachain sovereign account too."]
					#[doc = "If None, than it is well known cannot pay with that asset on target_parachain_id."]
					#[doc = "If Some(0), than price can be anything greater or equal to zero."]
					#[doc = "If Some(MAX), than actually it forbids transfers."]
					set_min_fee {
						target_parachain_id: ::core::primitive::u32,
						foreign_asset_id: runtime_types::primitives::currency::ForeignAssetId,
						amount: ::core::option::Option<::core::primitive::u128>,
					},
					#[codec(index = 3)]
					update_asset_location {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						location: ::core::option::Option<
							runtime_types::primitives::currency::ForeignAssetId,
						>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					AssetNotFound,
					#[codec(index = 1)]
					AssetAlreadyRegistered,
					#[codec(index = 2)]
					AssetLocationIsNone,
					#[codec(index = 3)]
					StringExceedsMaxLength,
					#[codec(index = 4)]
					LocationIsUsed,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					AssetRegistered {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						location: ::core::option::Option<
							runtime_types::primitives::currency::ForeignAssetId,
						>,
						asset_info: runtime_types::composable_traits::assets::AssetInfo<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 1)]
					AssetUpdated {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						asset_info: runtime_types::composable_traits::assets::AssetInfoUpdate<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 2)]
					AssetLocationUpdated {
						asset_id: runtime_types::primitives::currency::CurrencyId,
						location: runtime_types::primitives::currency::ForeignAssetId,
					},
					#[codec(index = 3)]
					AssetLocationRemoved {
						asset_id: runtime_types::primitives::currency::CurrencyId,
					},
					#[codec(index = 4)]
					MinFeeUpdated {
						target_parachain_id: ::core::primitive::u32,
						foreign_asset_id: runtime_types::primitives::currency::ForeignAssetId,
						amount: ::core::option::Option<::core::primitive::u128>,
					},
				}
			}
		}
		pub mod pallet_balances {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Transfer some liquid free balance to another account."]
					#[doc = ""]
					#[doc = "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver."]
					#[doc = "If the sender's account is below the existential deposit as a result"]
					#[doc = "of the transfer, the account will be reaped."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
					transfer_allow_death {
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "Set the regular balance of a given account; it also takes a reserved balance but this"]
					#[doc = "must be the same as the account's current reserved balance."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call is `root`."]
					#[doc = ""]
					#[doc = "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."]
					set_balance_deprecated {
						who: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						new_free: ::core::primitive::u128,
						#[codec(compact)]
						old_reserved: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Exactly as `transfer_allow_death`, except the origin must be root and the source account"]
					#[doc = "may be specified."]
					force_transfer {
						source: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not"]
					#[doc = "kill the origin account."]
					#[doc = ""]
					#[doc = "99% of the time you want [`transfer_allow_death`] instead."]
					#[doc = ""]
					#[doc = "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"]
					transfer_keep_alive {
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Transfer the entire transferable balance from the caller account."]
					#[doc = ""]
					#[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
					#[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
					#[doc = "transferred by this function. To ensure that this function results in a killed account,"]
					#[doc = "you might need to prepare the account by removing any reference counters, storage"]
					#[doc = "deposits, etc..."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be Signed."]
					#[doc = ""]
					#[doc = "- `dest`: The recipient of the transfer."]
					#[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
					#[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
					#[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
					#[doc = "  keep the sender account alive (true)."]
					transfer_all {
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "Unreserve some balance from a user by force."]
					#[doc = ""]
					#[doc = "Can only be called by ROOT."]
					force_unreserve {
						who: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					#[doc = "Upgrade a specified account."]
					#[doc = ""]
					#[doc = "- `origin`: Must be `Signed`."]
					#[doc = "- `who`: The account to be upgraded."]
					#[doc = ""]
					#[doc = "This will waive the transaction fee if at least all but 10% of the accounts needed to"]
					#[doc = "be upgraded. (We let some not have to be upgraded just in order to allow for the"]
					#[doc = "possibililty of churn)."]
					upgrade_accounts {
						who: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
					},
					#[codec(index = 7)]
					#[doc = "Alias for `transfer_allow_death`, provided only for name-wise compatibility."]
					#[doc = ""]
					#[doc = "WARNING: DEPRECATED! Will be released in approximately 3 months."]
					transfer {
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					#[doc = "Set the regular balance of a given account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call is `root`."]
					force_set_balance {
						who: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						new_free: ::core::primitive::u128,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Vesting balance too high to send value."]
					VestingBalance,
					#[codec(index = 1)]
					#[doc = "Account liquidity restrictions prevent withdrawal."]
					LiquidityRestrictions,
					#[codec(index = 2)]
					#[doc = "Balance too low to send value."]
					InsufficientBalance,
					#[codec(index = 3)]
					#[doc = "Value too low to create account due to existential deposit."]
					ExistentialDeposit,
					#[codec(index = 4)]
					#[doc = "Transfer/payment would kill account."]
					Expendability,
					#[codec(index = 5)]
					#[doc = "A vesting schedule already exists for this account."]
					ExistingVestingSchedule,
					#[codec(index = 6)]
					#[doc = "Beneficiary account must pre-exist."]
					DeadAccount,
					#[codec(index = 7)]
					#[doc = "Number of named reserves exceed `MaxReserves`."]
					TooManyReserves,
					#[codec(index = 8)]
					#[doc = "Number of holds exceed `MaxHolds`."]
					TooManyHolds,
					#[codec(index = 9)]
					#[doc = "Number of freezes exceed `MaxFreezes`."]
					TooManyFreezes,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "An account was created with some free balance."]
					Endowed {
						account: ::subxt::ext::subxt_core::utils::AccountId32,
						free_balance: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
					#[doc = "resulting in an outright loss."]
					DustLost {
						account: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Transfer succeeded."]
					Transfer {
						from: ::subxt::ext::subxt_core::utils::AccountId32,
						to: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "A balance was set by root."]
					BalanceSet {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						free: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Some balance was reserved (moved from free to reserved)."]
					Reserved {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					#[doc = "Some balance was unreserved (moved from reserved to free)."]
					Unreserved {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					#[doc = "Some balance was moved from the reserve of the first account to the second account."]
					#[doc = "Final argument indicates the destination balance type."]
					ReserveRepatriated {
						from: ::subxt::ext::subxt_core::utils::AccountId32,
						to: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
						destination_status:
							runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
					},
					#[codec(index = 7)]
					#[doc = "Some amount was deposited (e.g. for transaction fees)."]
					Deposit {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					#[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
					Withdraw {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					#[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
					Slashed {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					#[doc = "Some amount was minted into an account."]
					Minted {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					#[doc = "Some amount was burned from an account."]
					Burned {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 12)]
					#[doc = "Some amount was suspended from an account (it can be restored later)."]
					Suspended {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 13)]
					#[doc = "Some amount was restored into an account."]
					Restored {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 14)]
					#[doc = "An account was upgraded."]
					Upgraded { who: ::subxt::ext::subxt_core::utils::AccountId32 },
					#[codec(index = 15)]
					#[doc = "Total issuance was increased by `amount`, creating a credit to be balanced."]
					Issued { amount: ::core::primitive::u128 },
					#[codec(index = 16)]
					#[doc = "Total issuance was decreased by `amount`, creating a debt to be balanced."]
					Rescinded { amount: ::core::primitive::u128 },
					#[codec(index = 17)]
					#[doc = "Some balance was locked."]
					Locked {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 18)]
					#[doc = "Some balance was unlocked."]
					Unlocked {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 19)]
					#[doc = "Some balance was frozen."]
					Frozen {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 20)]
					#[doc = "Some balance was thawed."]
					Thawed {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct AccountData<_0> {
					pub free: _0,
					pub reserved: _0,
					pub frozen: _0,
					pub flags: runtime_types::pallet_balances::types::ExtraFlags,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct BalanceLock<_0> {
					pub id: [::core::primitive::u8; 8usize],
					pub amount: _0,
					pub reasons: runtime_types::pallet_balances::types::Reasons,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct ExtraFlags(pub ::core::primitive::u128);
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct IdAmount<_0, _1> {
					pub id: _0,
					pub amount: _1,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Reasons {
					#[codec(index = 0)]
					Fee,
					#[codec(index = 1)]
					Misc,
					#[codec(index = 2)]
					All,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct ReserveData<_0, _1> {
					pub id: _0,
					pub amount: _1,
				}
			}
		}
		pub mod pallet_call_filter {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Disable a pallet function."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be"]
					#[doc = "`DisableOrigin`."]
					#[doc = ""]
					#[doc = "Possibly emits a `Disabled` event."]
					disable {
						entry: runtime_types::pallet_call_filter::types::CallFilterEntry<
							runtime_types::common::MaxStringSize,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Enable a previously disabled pallet function."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must be"]
					#[doc = "`EnableOrigin`."]
					#[doc = ""]
					#[doc = "Possibly emits an `Enabled` event."]
					enable {
						entry: runtime_types::pallet_call_filter::types::CallFilterEntry<
							runtime_types::common::MaxStringSize,
						>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "We tried to disable an extrinsic that cannot be disabled."]
					CannotDisable,
					#[codec(index = 1)]
					#[doc = "The pallet name is not a valid UTF8 string."]
					InvalidString,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Paused transaction"]
					Disabled {
						entry: runtime_types::pallet_call_filter::types::CallFilterEntry<
							runtime_types::common::MaxStringSize,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Unpaused transaction"]
					Enabled {
						entry: runtime_types::pallet_call_filter::types::CallFilterEntry<
							runtime_types::common::MaxStringSize,
						>,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct CallFilterEntry<_0> {
					pub pallet_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					pub function_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					#[codec(skip)]
					pub __ignore: ::core::marker::PhantomData<_0>,
				}
			}
		}
		pub mod pallet_collator_selection {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Set the list of invulnerable (fixed) collators."]
					set_invulnerables {
						new: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Set the ideal number of collators (not including the invulnerables)."]
					#[doc = "If lowering this number, then the number of running collators could be higher than this figure."]
					#[doc = "Aside from that edge case, there should be no other way to have more collators than the desired number."]
					set_desired_candidates { max: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "Set the candidacy bond amount."]
					set_candidacy_bond { bond: ::core::primitive::u128 },
					#[codec(index = 3)]
					#[doc = "Register this account as a collator candidate. The account must (a) already have"]
					#[doc = "registered session keys and (b) be able to reserve the `CandidacyBond`."]
					#[doc = ""]
					#[doc = "This call is not available to `Invulnerable` collators."]
					register_as_candidate,
					#[codec(index = 4)]
					#[doc = "Deregister `origin` as a collator candidate. Note that the collator can only leave on"]
					#[doc = "session change. The `CandidacyBond` will be unreserved immediately."]
					#[doc = ""]
					#[doc = "This call will fail if the total number of candidates would drop below `MinCandidates`."]
					#[doc = ""]
					#[doc = "This call is not available to `Invulnerable` collators."]
					leave_intent,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct CandidateInfo<_0, _1> {
					pub who: _0,
					pub deposit: _1,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Too many candidates"]
					TooManyCandidates,
					#[codec(index = 1)]
					#[doc = "Too few candidates"]
					TooFewCandidates,
					#[codec(index = 2)]
					#[doc = "Unknown error"]
					Unknown,
					#[codec(index = 3)]
					#[doc = "Permission issue"]
					Permission,
					#[codec(index = 4)]
					#[doc = "User is already a candidate"]
					AlreadyCandidate,
					#[codec(index = 5)]
					#[doc = "User is not a candidate"]
					NotCandidate,
					#[codec(index = 6)]
					#[doc = "Too many invulnerables"]
					TooManyInvulnerables,
					#[codec(index = 7)]
					#[doc = "User is already an Invulnerable"]
					AlreadyInvulnerable,
					#[codec(index = 8)]
					#[doc = "Account has no associated validator ID"]
					NoAssociatedValidatorId,
					#[codec(index = 9)]
					#[doc = "Validator ID is not yet registered"]
					ValidatorNotRegistered,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					NewInvulnerables {
						invulnerables: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
					},
					#[codec(index = 1)]
					NewDesiredCandidates { desired_candidates: ::core::primitive::u32 },
					#[codec(index = 2)]
					NewCandidacyBond { bond_amount: ::core::primitive::u128 },
					#[codec(index = 3)]
					CandidateAdded {
						account_id: ::subxt::ext::subxt_core::utils::AccountId32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					CandidateRemoved { account_id: ::subxt::ext::subxt_core::utils::AccountId32 },
				}
			}
		}
		pub mod pallet_collective {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Set the collective's membership."]
					#[doc = ""]
					#[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
					#[doc = "- `prime`: The prime member whose vote sets the default."]
					#[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
					#[doc = "  weight estimation."]
					#[doc = ""]
					#[doc = "The dispatch of this call must be `SetMembersOrigin`."]
					#[doc = ""]
					#[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
					#[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
					#[doc = ""]
					#[doc = "# WARNING:"]
					#[doc = ""]
					#[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
					#[doc = "implementation of the trait [`ChangeMembers`]."]
					#[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
					#[doc = "with other logic managing the member set."]
					#[doc = ""]
					#[doc = "## Complexity:"]
					#[doc = "- `O(MP + N)` where:"]
					#[doc = "  - `M` old-members-count (code- and governance-bounded)"]
					#[doc = "  - `N` new-members-count (code- and governance-bounded)"]
					#[doc = "  - `P` proposals-count (code-bounded)"]
					set_members {
						new_members: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
						prime: ::core::option::Option<::subxt::ext::subxt_core::utils::AccountId32>,
						old_count: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "Dispatch a proposal from a member using the `Member` origin."]
					#[doc = ""]
					#[doc = "Origin must be a member of the collective."]
					#[doc = ""]
					#[doc = "## Complexity:"]
					#[doc = "- `O(B + M + P)` where:"]
					#[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
					#[doc = "- `M` members-count (code-bounded)"]
					#[doc = "- `P` complexity of dispatching `proposal`"]
					execute {
						proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Add a new proposal to either be voted on or executed directly."]
					#[doc = ""]
					#[doc = "Requires the sender to be member."]
					#[doc = ""]
					#[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
					#[doc = "or put up for voting."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
					#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
					#[doc = "  - `M` is members-count (code- and governance-bounded)"]
					#[doc = "  - branching is influenced by `threshold` where:"]
					#[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
					#[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
					propose {
						#[codec(compact)]
						threshold: ::core::primitive::u32,
						proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Add an aye or nay vote for the sender to the given proposal."]
					#[doc = ""]
					#[doc = "Requires the sender to be a member."]
					#[doc = ""]
					#[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
					#[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
					#[doc = "fee."]
					#[doc = "## Complexity"]
					#[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
					vote {
						proposal: ::subxt::ext::subxt_core::utils::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						approve: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					#[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
					#[doc = "state."]
					#[doc = ""]
					#[doc = "Must be called by the Root origin."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "O(P) where P is the number of max proposals"]
					disapprove_proposal { proposal_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 6)]
					#[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
					#[doc = ""]
					#[doc = "May be called by any signed account in order to finish voting and close the proposal."]
					#[doc = ""]
					#[doc = "If called before the end of the voting period it will only close the vote if it is"]
					#[doc = "has enough votes to be approved or disapproved."]
					#[doc = ""]
					#[doc = "If called after the end of the voting period abstentions are counted as rejections"]
					#[doc = "unless there is a prime member set and the prime member cast an approval."]
					#[doc = ""]
					#[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
					#[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
					#[doc = ""]
					#[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
					#[doc = "proposal."]
					#[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
					#[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- `O(B + M + P1 + P2)` where:"]
					#[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
					#[doc = "  - `M` is members-count (code- and governance-bounded)"]
					#[doc = "  - `P1` is the complexity of `proposal` preimage."]
					#[doc = "  - `P2` is proposal-count (code-bounded)"]
					close {
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Account is not a member"]
					NotMember,
					#[codec(index = 1)]
					#[doc = "Duplicate proposals not allowed"]
					DuplicateProposal,
					#[codec(index = 2)]
					#[doc = "Proposal must exist"]
					ProposalMissing,
					#[codec(index = 3)]
					#[doc = "Mismatched index"]
					WrongIndex,
					#[codec(index = 4)]
					#[doc = "Duplicate vote ignored"]
					DuplicateVote,
					#[codec(index = 5)]
					#[doc = "Members are already initialized!"]
					AlreadyInitialized,
					#[codec(index = 6)]
					#[doc = "The close call was made too early, before the end of the voting."]
					TooEarly,
					#[codec(index = 7)]
					#[doc = "There can only be a maximum of `MaxProposals` active proposals."]
					TooManyProposals,
					#[codec(index = 8)]
					#[doc = "The given weight bound for the proposal was too low."]
					WrongProposalWeight,
					#[codec(index = 9)]
					#[doc = "The given length bound for the proposal was too low."]
					WrongProposalLength,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
					#[doc = "`MemberCount`)."]
					Proposed {
						account: ::subxt::ext::subxt_core::utils::AccountId32,
						proposal_index: ::core::primitive::u32,
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						threshold: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "A motion (given hash) has been voted on by given account, leaving"]
					#[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
					Voted {
						account: ::subxt::ext::subxt_core::utils::AccountId32,
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						voted: ::core::primitive::bool,
						yes: ::core::primitive::u32,
						no: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "A motion was approved by the required threshold."]
					Approved { proposal_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 3)]
					#[doc = "A motion was not approved by the required threshold."]
					Disapproved { proposal_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 4)]
					#[doc = "A motion was executed; result will be `Ok` if it returned without error."]
					Executed {
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 5)]
					#[doc = "A single member did some action; result will be `Ok` if it returned without error."]
					MemberExecuted {
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 6)]
					#[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
					Closed {
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						yes: ::core::primitive::u32,
						no: ::core::primitive::u32,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum RawOrigin<_0> {
				#[codec(index = 0)]
				Members(::core::primitive::u32, ::core::primitive::u32),
				#[codec(index = 1)]
				Member(_0),
				#[codec(index = 2)]
				_Phantom,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct Votes<_0, _1> {
				pub index: ::core::primitive::u32,
				pub threshold: ::core::primitive::u32,
				pub ayes: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
				pub nays: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
				pub end: _1,
			}
		}
		pub mod pallet_conviction_voting {
			use super::runtime_types;
			pub mod conviction {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Conviction {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Locked1x,
					#[codec(index = 2)]
					Locked2x,
					#[codec(index = 3)]
					Locked3x,
					#[codec(index = 4)]
					Locked4x,
					#[codec(index = 5)]
					Locked5x,
					#[codec(index = 6)]
					Locked6x,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;"]
					#[doc = "otherwise it is a vote to keep the status quo."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `poll_index`: The index of the poll to vote for."]
					#[doc = "- `vote`: The vote configuration."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` where R is the number of polls the voter has voted on."]
					vote {
						#[codec(compact)]
						poll_index: ::core::primitive::u32,
						vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Delegate the voting power (with some given conviction) of the sending account for a"]
					#[doc = "particular class of polls."]
					#[doc = ""]
					#[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
					#[doc = "time appropriate for the conviction's lock period."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
					#[doc = "  - be delegating already; or"]
					#[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
					#[doc = "    through `reap_vote` or `unvote`)."]
					#[doc = ""]
					#[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
					#[doc = "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls"]
					#[doc = "  to this function are required."]
					#[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
					#[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
					#[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
					#[doc = "  be more than the account's current balance."]
					#[doc = ""]
					#[doc = "Emits `Delegated`."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` where R is the number of polls the voter delegating to has"]
					#[doc = "  voted on. Weight is initially charged as if maximum votes, but is refunded later."]
					delegate {
						class: ::core::primitive::u16,
						to: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "Undelegate the voting power of the sending account for a particular class of polls."]
					#[doc = ""]
					#[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
					#[doc = "of the conviction with which the delegation was issued has passed."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
					#[doc = "currently delegating."]
					#[doc = ""]
					#[doc = "- `class`: The class of polls to remove the delegation from."]
					#[doc = ""]
					#[doc = "Emits `Undelegated`."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` where R is the number of polls the voter delegating to has"]
					#[doc = "  voted on. Weight is initially charged as if maximum votes, but is refunded later."]
					undelegate { class: ::core::primitive::u16 },
					#[codec(index = 3)]
					#[doc = "Remove the lock caused by prior voting/delegating which has expired within a particular"]
					#[doc = "class."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `class`: The class of polls to unlock."]
					#[doc = "- `target`: The account to remove the lock on."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` with R number of vote of target."]
					unlock {
						class: ::core::primitive::u16,
						target: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 4)]
					#[doc = "Remove a vote for a poll."]
					#[doc = ""]
					#[doc = "If:"]
					#[doc = "- the poll was cancelled, or"]
					#[doc = "- the poll is ongoing, or"]
					#[doc = "- the poll has ended such that"]
					#[doc = "  - the vote of the account was in opposition to the result; or"]
					#[doc = "  - there was no conviction to the account's vote; or"]
					#[doc = "  - the account made a split vote"]
					#[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
					#[doc = "funds being available."]
					#[doc = ""]
					#[doc = "If, however, the poll has ended and:"]
					#[doc = "- it finished corresponding to the vote of the account, and"]
					#[doc = "- the account made a standard vote with conviction, and"]
					#[doc = "- the lock period of the conviction is not over"]
					#[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
					#[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
					#[doc = "of both the amount locked and the time is it locked for)."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
					#[doc = "registered for poll `index`."]
					#[doc = ""]
					#[doc = "- `index`: The index of poll of the vote to be removed."]
					#[doc = "- `class`: Optional parameter, if given it indicates the class of the poll. For polls"]
					#[doc = "  which have finished or are cancelled, this must be `Some`."]
					#[doc = ""]
					#[doc = "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on."]
					#[doc = "  Weight is calculated for the maximum number of vote."]
					remove_vote {
						class: ::core::option::Option<::core::primitive::u16>,
						index: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "Remove a vote for a poll."]
					#[doc = ""]
					#[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
					#[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
					#[doc = "either because the poll was cancelled, because the voter lost the poll or"]
					#[doc = "because the conviction period is over."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `target`: The account of the vote to be removed; this account must have voted for poll"]
					#[doc = "  `index`."]
					#[doc = "- `index`: The index of poll of the vote to be removed."]
					#[doc = "- `class`: The class of the poll."]
					#[doc = ""]
					#[doc = "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on."]
					#[doc = "  Weight is calculated for the maximum number of vote."]
					remove_other_vote {
						target: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						class: ::core::primitive::u16,
						index: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Poll is not ongoing."]
					NotOngoing,
					#[codec(index = 1)]
					#[doc = "The given account did not vote on the poll."]
					NotVoter,
					#[codec(index = 2)]
					#[doc = "The actor has no permission to conduct the action."]
					NoPermission,
					#[codec(index = 3)]
					#[doc = "The actor has no permission to conduct the action right now but will do in the future."]
					NoPermissionYet,
					#[codec(index = 4)]
					#[doc = "The account is already delegating."]
					AlreadyDelegating,
					#[codec(index = 5)]
					#[doc = "The account currently has votes attached to it and the operation cannot succeed until"]
					#[doc = "these are removed, either through `unvote` or `reap_vote`."]
					AlreadyVoting,
					#[codec(index = 6)]
					#[doc = "Too high a balance was provided that the account cannot afford."]
					InsufficientFunds,
					#[codec(index = 7)]
					#[doc = "The account is not currently delegating."]
					NotDelegating,
					#[codec(index = 8)]
					#[doc = "Delegation to oneself makes no sense."]
					Nonsense,
					#[codec(index = 9)]
					#[doc = "Maximum number of votes reached."]
					MaxVotesReached,
					#[codec(index = 10)]
					#[doc = "The class must be supplied since it is not easily determinable from the state."]
					ClassNeeded,
					#[codec(index = 11)]
					#[doc = "The class ID supplied is invalid."]
					BadClass,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "An account has delegated their vote to another account. \\[who, target\\]"]
					Delegated(
						::subxt::ext::subxt_core::utils::AccountId32,
						::subxt::ext::subxt_core::utils::AccountId32,
					),
					#[codec(index = 1)]
					#[doc = "An \\[account\\] has cancelled a previous delegation operation."]
					Undelegated(::subxt::ext::subxt_core::utils::AccountId32),
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Delegations<_0> {
					pub votes: _0,
					pub capital: _0,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Tally<_0> {
					pub ayes: _0,
					pub nays: _0,
					pub support: _0,
				}
			}
			pub mod vote {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum AccountVote<_0> {
					#[codec(index = 0)]
					Standard {
						vote: runtime_types::pallet_conviction_voting::vote::Vote,
						balance: _0,
					},
					#[codec(index = 1)]
					Split { aye: _0, nay: _0 },
					#[codec(index = 2)]
					SplitAbstain { aye: _0, nay: _0, abstain: _0 },
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Casting<_0, _1, _2> {
					pub votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						_1,
						runtime_types::pallet_conviction_voting::vote::AccountVote<_0>,
					)>,
					pub delegations:
						runtime_types::pallet_conviction_voting::types::Delegations<_0>,
					pub prior: runtime_types::pallet_conviction_voting::vote::PriorLock<_1, _0>,
					#[codec(skip)]
					pub __ignore: ::core::marker::PhantomData<_2>,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Delegating<_0, _1, _2> {
					pub balance: _0,
					pub target: _1,
					pub conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
					pub delegations:
						runtime_types::pallet_conviction_voting::types::Delegations<_0>,
					pub prior: runtime_types::pallet_conviction_voting::vote::PriorLock<_2, _0>,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct PriorLock<_0, _1>(pub _0, pub _1);
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Vote(pub ::core::primitive::u8);
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Voting<_0, _1, _2, _3> {
					#[codec(index = 0)]
					Casting(runtime_types::pallet_conviction_voting::vote::Casting<_0, _2, _2>),
					#[codec(index = 1)]
					Delegating(
						runtime_types::pallet_conviction_voting::vote::Delegating<_0, _1, _2>,
					),
					__Ignore(::core::marker::PhantomData<_3>),
				}
			}
		}
		pub mod pallet_crowdloan_rewards {
			use super::runtime_types;
			pub mod models {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Proof<_0> {
					#[codec(index = 0)]
					RelayChain(_0, runtime_types::sp_runtime::MultiSignature),
					#[codec(index = 1)]
					Ethereum(runtime_types::composable_support::types::EcdsaSignature),
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum RemoteAccount<_0> {
					#[codec(index = 0)]
					RelayChain(_0),
					#[codec(index = 1)]
					Ethereum(runtime_types::composable_support::types::EthereumAddress),
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Reward<_0, _1> {
					pub total: _0,
					pub claimed: _0,
					pub vesting_period: _1,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Initialize the pallet at the current timestamp."]
					initialize,
					#[codec(index = 1)]
					#[doc = "Initialize the pallet at the given timestamp."]
					initialize_at { at: ::core::primitive::u64 },
					#[codec(index = 2)]
					#[doc = "Populate pallet by adding more rewards."]
					#[doc = ""]
					#[doc = "Each index in the rewards vector should contain: `remote_account`, `reward_account`,"]
					#[doc = "`vesting_period`."]
					#[doc = ""]
					#[doc = "Can be called multiple times. If an remote account"]
					#[doc = "already has a reward, it will be replaced by the new reward value."]
					#[doc = ""]
					#[doc = "Can only be called before `initialize`."]
					populate {
						rewards: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
								[::core::primitive::u8; 32usize],
							>,
							::core::primitive::u128,
							::core::primitive::u64,
						)>,
					},
					#[codec(index = 3)]
					#[doc = "Associate a reward account. A valid proof has to be provided."]
					#[doc = "This call also claim the first reward (a.k.a. the first payment, which is a % of the"]
					#[doc = "vested reward)."]
					#[doc = "If logic gate pass, no fees are applied."]
					#[doc = ""]
					#[doc = "The proof should be:"]
					#[doc = "```haskell"]
					#[doc = "proof = sign (concat prefix (hex reward_account))"]
					#[doc = "```"]
					associate {
						reward_account: ::subxt::ext::subxt_core::utils::AccountId32,
						proof: runtime_types::pallet_crowdloan_rewards::models::Proof<
							[::core::primitive::u8; 32usize],
						>,
					},
					#[codec(index = 4)]
					#[doc = "Claim a reward from the associated reward account."]
					#[doc = "A previous call to `associate` should have been made."]
					#[doc = "If logic gate pass, no fees are applied."]
					claim,
					#[codec(index = 5)]
					unlock_rewards_for {
						reward_accounts: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
					},
					#[codec(index = 6)]
					#[doc = "Adds all accounts in the `additions` vector. Add may be called even if the pallet has"]
					#[doc = "been initialized."]
					add {
						additions: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
								[::core::primitive::u8; 32usize],
							>,
							::core::primitive::u128,
							::core::primitive::u64,
						)>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					NotInitialized,
					#[codec(index = 1)]
					AlreadyInitialized,
					#[codec(index = 2)]
					BackToTheFuture,
					#[codec(index = 3)]
					RewardsNotFunded,
					#[codec(index = 4)]
					InvalidProof,
					#[codec(index = 5)]
					InvalidClaim,
					#[codec(index = 6)]
					NothingToClaim,
					#[codec(index = 7)]
					NotAssociated,
					#[codec(index = 8)]
					AlreadyAssociated,
					#[codec(index = 9)]
					NotClaimableYet,
					#[codec(index = 10)]
					#[doc = "Returned by `delete` if the provided expected reward mismatches the actual reward."]
					UnexpectedRewardAmount,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "The crowdloan has been initialized or set to initialize at some time."]
					Initialized { at: ::core::primitive::u64 },
					#[codec(index = 1)]
					#[doc = "A claim has been made."]
					Claimed {
						remote_account:
							runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
								[::core::primitive::u8; 32usize],
							>,
						reward_account: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "A remote account has been associated with a reward account."]
					Associated {
						remote_account:
							runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
								[::core::primitive::u8; 32usize],
							>,
						reward_account: ::subxt::ext::subxt_core::utils::AccountId32,
					},
					#[codec(index = 3)]
					#[doc = "The crowdloan was successfully initialized, but with excess funds that won't be"]
					#[doc = "claimed."]
					OverFunded { excess_funds: ::core::primitive::u128 },
					#[codec(index = 4)]
					#[doc = "A portion of rewards have been unlocked and future claims will not have locks"]
					RewardsUnlocked { at: ::core::primitive::u64 },
					#[codec(index = 5)]
					#[doc = "Called after rewards have been added through the `add` extrinsic."]
					RewardsAdded {
						additions: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
								[::core::primitive::u8; 32usize],
							>,
							::core::primitive::u128,
							::core::primitive::u64,
						)>,
					},
					#[codec(index = 6)]
					#[doc = "Called after rewards have been deleted through the `delete` extrinsic."]
					RewardsDeleted {
						deletions: ::subxt::ext::subxt_core::alloc::vec::Vec<
							runtime_types::pallet_crowdloan_rewards::models::RemoteAccount<
								[::core::primitive::u8; 32usize],
							>,
						>,
					},
				}
			}
		}
		pub mod pallet_custom_origins {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Origin {
					#[codec(index = 0)]
					WhitelistedCaller,
					#[codec(index = 1)]
					GeneralAdmin,
					#[codec(index = 2)]
					ReferendumCanceller,
					#[codec(index = 3)]
					ReferendumKiller,
				}
			}
		}
		pub mod pallet_democracy {
			use super::runtime_types;
			pub mod conviction {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Conviction {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Locked1x,
					#[codec(index = 2)]
					Locked2x,
					#[codec(index = 3)]
					Locked3x,
					#[codec(index = 4)]
					Locked4x,
					#[codec(index = 5)]
					Locked5x,
					#[codec(index = 6)]
					Locked6x,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Propose a sensitive action to be taken."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
					#[doc = "have funds to cover the deposit."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The hash of the proposal preimage."]
					#[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
					#[doc = ""]
					#[doc = "Emits `Proposed`."]
					propose {
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::composable_runtime::RuntimeCall,
						>,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "Signals agreement with a particular proposal."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
					#[doc = "must have funds to cover the deposit, equal to the original deposit."]
					#[doc = ""]
					#[doc = "- `proposal`: The index of the proposal to second."]
					second {
						#[codec(compact)]
						proposal: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
					#[doc = "otherwise it is a vote to keep the status quo."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `ref_index`: The index of the referendum to vote for."]
					#[doc = "- `vote`: The vote configuration."]
					vote {
						#[codec(compact)]
						ref_index: ::core::primitive::u32,
						vote: runtime_types::pallet_democracy::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 3)]
					#[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
					#[doc = "referendum."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
					#[doc = ""]
					#[doc = "-`ref_index`: The index of the referendum to cancel."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`."]
					emergency_cancel { ref_index: ::core::primitive::u32 },
					#[codec(index = 4)]
					#[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
					#[doc = "referendum."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
					external_propose {
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 5)]
					#[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
					#[doc = "an external referendum."]
					#[doc = ""]
					#[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
					#[doc = ""]
					#[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
					#[doc = "pre-scheduled `external_propose` call."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`"]
					external_propose_majority {
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 6)]
					#[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
					#[doc = "schedule an external referendum."]
					#[doc = ""]
					#[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The preimage hash of the proposal."]
					#[doc = ""]
					#[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
					#[doc = "pre-scheduled `external_propose` call."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`"]
					external_propose_default {
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 7)]
					#[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
					#[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
					#[doc = "but it is not a majority-carries referendum then it fails."]
					#[doc = ""]
					#[doc = "The dispatch of this call must be `FastTrackOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The hash of the current external proposal."]
					#[doc = "- `voting_period`: The period that is allowed for voting on this proposal. Increased to"]
					#[doc = "\tMust be always greater than zero."]
					#[doc = "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`."]
					#[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
					#[doc = "  enacted. This doesn't have a minimum amount."]
					#[doc = ""]
					#[doc = "Emits `Started`."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`"]
					fast_track {
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						voting_period: ::core::primitive::u32,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					#[doc = "Veto and blacklist the external proposal hash."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `VetoOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
					#[doc = ""]
					#[doc = "Emits `Vetoed`."]
					#[doc = ""]
					#[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
					veto_external { proposal_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 9)]
					#[doc = "Remove a referendum."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Root_."]
					#[doc = ""]
					#[doc = "- `ref_index`: The index of the referendum to cancel."]
					#[doc = ""]
					#[doc = "# Weight: `O(1)`."]
					cancel_referendum {
						#[codec(compact)]
						ref_index: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					#[doc = "Delegate the voting power (with some given conviction) of the sending account."]
					#[doc = ""]
					#[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
					#[doc = "time appropriate for the conviction's lock period."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
					#[doc = "  - be delegating already; or"]
					#[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
					#[doc = "    through `reap_vote` or `unvote`)."]
					#[doc = ""]
					#[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
					#[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
					#[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
					#[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
					#[doc = "  be more than the account's current balance."]
					#[doc = ""]
					#[doc = "Emits `Delegated`."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
					#[doc = "  voted on. Weight is charged as if maximum votes."]
					delegate {
						to: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						conviction: runtime_types::pallet_democracy::conviction::Conviction,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					#[doc = "Undelegate the voting power of the sending account."]
					#[doc = ""]
					#[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
					#[doc = "of the conviction with which the delegation was issued."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
					#[doc = "currently delegating."]
					#[doc = ""]
					#[doc = "Emits `Undelegated`."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
					#[doc = "  voted on. Weight is charged as if maximum votes."]
					undelegate,
					#[codec(index = 12)]
					#[doc = "Clears all public proposals."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Root_."]
					#[doc = ""]
					#[doc = "Weight: `O(1)`."]
					clear_public_proposals,
					#[codec(index = 13)]
					#[doc = "Unlock tokens that have an expired lock."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `target`: The account to remove the lock on."]
					#[doc = ""]
					#[doc = "Weight: `O(R)` with R number of vote of target."]
					unlock {
						target: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 14)]
					#[doc = "Remove a vote for a referendum."]
					#[doc = ""]
					#[doc = "If:"]
					#[doc = "- the referendum was cancelled, or"]
					#[doc = "- the referendum is ongoing, or"]
					#[doc = "- the referendum has ended such that"]
					#[doc = "  - the vote of the account was in opposition to the result; or"]
					#[doc = "  - there was no conviction to the account's vote; or"]
					#[doc = "  - the account made a split vote"]
					#[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
					#[doc = "funds being available."]
					#[doc = ""]
					#[doc = "If, however, the referendum has ended and:"]
					#[doc = "- it finished corresponding to the vote of the account, and"]
					#[doc = "- the account made a standard vote with conviction, and"]
					#[doc = "- the lock period of the conviction is not over"]
					#[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
					#[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
					#[doc = "of both the amount locked and the time is it locked for)."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
					#[doc = "registered for referendum `index`."]
					#[doc = ""]
					#[doc = "- `index`: The index of referendum of the vote to be removed."]
					#[doc = ""]
					#[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
					#[doc = "  Weight is calculated for the maximum number of vote."]
					remove_vote { index: ::core::primitive::u32 },
					#[codec(index = 15)]
					#[doc = "Remove a vote for a referendum."]
					#[doc = ""]
					#[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
					#[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
					#[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
					#[doc = "because the conviction period is over."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
					#[doc = "  referendum `index`."]
					#[doc = "- `index`: The index of referendum of the vote to be removed."]
					#[doc = ""]
					#[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
					#[doc = "  Weight is calculated for the maximum number of vote."]
					remove_other_vote {
						target: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						index: ::core::primitive::u32,
					},
					#[codec(index = 16)]
					#[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
					#[doc = "proposed again."]
					#[doc = ""]
					#[doc = "If called on a queued public or external proposal, then this will result in it being"]
					#[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
					#[doc = "then it will be cancelled."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
					#[doc = ""]
					#[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
					#[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
					#[doc = "cancelled."]
					#[doc = ""]
					#[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
					#[doc = "  reasonable value)."]
					blacklist {
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 17)]
					#[doc = "Remove a proposal."]
					#[doc = ""]
					#[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
					#[doc = ""]
					#[doc = "- `prop_index`: The index of the proposal to cancel."]
					#[doc = ""]
					#[doc = "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"]
					cancel_proposal {
						#[codec(compact)]
						prop_index: ::core::primitive::u32,
					},
					#[codec(index = 18)]
					#[doc = "Set or clear a metadata of a proposal or a referendum."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `origin`: Must correspond to the `MetadataOwner`."]
					#[doc = "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`"]
					#[doc = "      threshold."]
					#[doc = "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`"]
					#[doc = "      threshold."]
					#[doc = "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`"]
					#[doc = "      threshold."]
					#[doc = "    - `Signed` by a creator for a public proposal."]
					#[doc = "    - `Signed` to clear a metadata for a finished referendum."]
					#[doc = "    - `Root` to set a metadata for an ongoing referendum."]
					#[doc = "- `owner`: an identifier of a metadata owner."]
					#[doc = "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."]
					set_metadata {
						owner: runtime_types::pallet_democracy::types::MetadataOwner,
						maybe_hash: ::core::option::Option<::subxt::ext::subxt_core::utils::H256>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Value too low"]
					ValueLow,
					#[codec(index = 1)]
					#[doc = "Proposal does not exist"]
					ProposalMissing,
					#[codec(index = 2)]
					#[doc = "Cannot cancel the same proposal twice"]
					AlreadyCanceled,
					#[codec(index = 3)]
					#[doc = "Proposal already made"]
					DuplicateProposal,
					#[codec(index = 4)]
					#[doc = "Proposal still blacklisted"]
					ProposalBlacklisted,
					#[codec(index = 5)]
					#[doc = "Next external proposal not simple majority"]
					NotSimpleMajority,
					#[codec(index = 6)]
					#[doc = "Invalid hash"]
					InvalidHash,
					#[codec(index = 7)]
					#[doc = "No external proposal"]
					NoProposal,
					#[codec(index = 8)]
					#[doc = "Identity may not veto a proposal twice"]
					AlreadyVetoed,
					#[codec(index = 9)]
					#[doc = "Vote given for invalid referendum"]
					ReferendumInvalid,
					#[codec(index = 10)]
					#[doc = "No proposals waiting"]
					NoneWaiting,
					#[codec(index = 11)]
					#[doc = "The given account did not vote on the referendum."]
					NotVoter,
					#[codec(index = 12)]
					#[doc = "The actor has no permission to conduct the action."]
					NoPermission,
					#[codec(index = 13)]
					#[doc = "The account is already delegating."]
					AlreadyDelegating,
					#[codec(index = 14)]
					#[doc = "Too high a balance was provided that the account cannot afford."]
					InsufficientFunds,
					#[codec(index = 15)]
					#[doc = "The account is not currently delegating."]
					NotDelegating,
					#[codec(index = 16)]
					#[doc = "The account currently has votes attached to it and the operation cannot succeed until"]
					#[doc = "these are removed, either through `unvote` or `reap_vote`."]
					VotesExist,
					#[codec(index = 17)]
					#[doc = "The instant referendum origin is currently disallowed."]
					InstantNotAllowed,
					#[codec(index = 18)]
					#[doc = "Delegation to oneself makes no sense."]
					Nonsense,
					#[codec(index = 19)]
					#[doc = "Invalid upper bound."]
					WrongUpperBound,
					#[codec(index = 20)]
					#[doc = "Maximum number of votes reached."]
					MaxVotesReached,
					#[codec(index = 21)]
					#[doc = "Maximum number of items reached."]
					TooMany,
					#[codec(index = 22)]
					#[doc = "Voting period too low"]
					VotingPeriodLow,
					#[codec(index = 23)]
					#[doc = "The preimage does not exist."]
					PreimageNotExist,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A motion has been proposed by a public account."]
					Proposed {
						proposal_index: ::core::primitive::u32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "A public proposal has been tabled for referendum vote."]
					Tabled {
						proposal_index: ::core::primitive::u32,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "An external proposal has been tabled."]
					ExternalTabled,
					#[codec(index = 3)]
					#[doc = "A referendum has begun."]
					Started {
						ref_index: ::core::primitive::u32,
						threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
					},
					#[codec(index = 4)]
					#[doc = "A proposal has been approved by referendum."]
					Passed { ref_index: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "A proposal has been rejected by referendum."]
					NotPassed { ref_index: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "A referendum has been cancelled."]
					Cancelled { ref_index: ::core::primitive::u32 },
					#[codec(index = 7)]
					#[doc = "An account has delegated their vote to another account."]
					Delegated {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						target: ::subxt::ext::subxt_core::utils::AccountId32,
					},
					#[codec(index = 8)]
					#[doc = "An account has cancelled a previous delegation operation."]
					Undelegated { account: ::subxt::ext::subxt_core::utils::AccountId32 },
					#[codec(index = 9)]
					#[doc = "An external proposal has been vetoed."]
					Vetoed {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						until: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					#[doc = "A proposal_hash has been blacklisted permanently."]
					Blacklisted { proposal_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 11)]
					#[doc = "An account has voted in a referendum"]
					Voted {
						voter: ::subxt::ext::subxt_core::utils::AccountId32,
						ref_index: ::core::primitive::u32,
						vote: runtime_types::pallet_democracy::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 12)]
					#[doc = "An account has secconded a proposal"]
					Seconded {
						seconder: ::subxt::ext::subxt_core::utils::AccountId32,
						prop_index: ::core::primitive::u32,
					},
					#[codec(index = 13)]
					#[doc = "A proposal got canceled."]
					ProposalCanceled { prop_index: ::core::primitive::u32 },
					#[codec(index = 14)]
					#[doc = "Metadata for a proposal or a referendum has been set."]
					MetadataSet {
						owner: runtime_types::pallet_democracy::types::MetadataOwner,
						hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 15)]
					#[doc = "Metadata for a proposal or a referendum has been cleared."]
					MetadataCleared {
						owner: runtime_types::pallet_democracy::types::MetadataOwner,
						hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 16)]
					#[doc = "Metadata has been transferred to new owner."]
					MetadataTransferred {
						prev_owner: runtime_types::pallet_democracy::types::MetadataOwner,
						owner: runtime_types::pallet_democracy::types::MetadataOwner,
						hash: ::subxt::ext::subxt_core::utils::H256,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Delegations<_0> {
					pub votes: _0,
					pub capital: _0,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum MetadataOwner {
					#[codec(index = 0)]
					External,
					#[codec(index = 1)]
					Proposal(::core::primitive::u32),
					#[codec(index = 2)]
					Referendum(::core::primitive::u32),
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum ReferendumInfo<_0, _1, _2> {
					#[codec(index = 0)]
					Ongoing(runtime_types::pallet_democracy::types::ReferendumStatus<_0, _1, _2>),
					#[codec(index = 1)]
					Finished { approved: ::core::primitive::bool, end: _0 },
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct ReferendumStatus<_0, _1, _2> {
					pub end: _0,
					pub proposal: _1,
					pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
					pub delay: _0,
					pub tally: runtime_types::pallet_democracy::types::Tally<_2>,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Tally<_0> {
					pub ayes: _0,
					pub nays: _0,
					pub turnout: _0,
				}
			}
			pub mod vote {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum AccountVote<_0> {
					#[codec(index = 0)]
					Standard { vote: runtime_types::pallet_democracy::vote::Vote, balance: _0 },
					#[codec(index = 1)]
					Split { aye: _0, nay: _0 },
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct PriorLock<_0, _1>(pub _0, pub _1);
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Vote(pub ::core::primitive::u8);
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Voting<_0, _1, _2> {
					#[codec(index = 0)]
					Direct {
						votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							_2,
							runtime_types::pallet_democracy::vote::AccountVote<_0>,
						)>,
						delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
						prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
					},
					#[codec(index = 1)]
					Delegating {
						balance: _0,
						target: _1,
						conviction: runtime_types::pallet_democracy::conviction::Conviction,
						delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
						prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
					},
				}
			}
			pub mod vote_threshold {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum VoteThreshold {
					#[codec(index = 0)]
					SuperMajorityApprove,
					#[codec(index = 1)]
					SuperMajorityAgainst,
					#[codec(index = 2)]
					SimpleMajority,
				}
			}
		}
		pub mod pallet_ibc {
			use super::runtime_types;
			pub mod errors {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum IbcError {
					#[codec(index = 0)]
					Ics02Client {
						message: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					Ics03Connection {
						message: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 2)]
					Ics04Channel {
						message: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 3)]
					Ics20FungibleTokenTransfer {
						message: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 4)]
					UnknownMessageTypeUrl {
						message: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 5)]
					MalformedMessageBytes {
						message: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
				}
			}
			pub mod events {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum IbcEvent {
					#[codec(index = 0)]
					NewBlock {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
					},
					#[codec(index = 1)]
					CreateClient {
						client_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						client_type:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						consensus_height: ::core::primitive::u64,
						consensus_revision_number: ::core::primitive::u64,
					},
					#[codec(index = 2)]
					UpdateClient {
						client_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						client_type:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						consensus_height: ::core::primitive::u64,
						consensus_revision_number: ::core::primitive::u64,
					},
					#[codec(index = 3)]
					UpgradeClient {
						client_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						client_type:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						consensus_height: ::core::primitive::u64,
						consensus_revision_number: ::core::primitive::u64,
					},
					#[codec(index = 4)]
					ClientMisbehaviour {
						client_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						client_type:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						consensus_height: ::core::primitive::u64,
						consensus_revision_number: ::core::primitive::u64,
					},
					#[codec(index = 5)]
					OpenInitConnection {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						connection_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
						client_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_connection_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
						counterparty_client_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 6)]
					OpenConfirmConnection {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						connection_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
						client_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_connection_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
						counterparty_client_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 7)]
					OpenTryConnection {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						connection_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
						client_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_connection_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
						counterparty_client_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 8)]
					OpenAckConnection {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						connection_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
						client_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_connection_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
						counterparty_client_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 9)]
					OpenInitChannel {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						channel_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
						connection_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_port_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_channel_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
					},
					#[codec(index = 10)]
					OpenConfirmChannel {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						channel_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
						connection_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_port_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_channel_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
					},
					#[codec(index = 11)]
					OpenTryChannel {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						channel_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
						connection_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_port_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_channel_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
					},
					#[codec(index = 12)]
					OpenAckChannel {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						channel_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
						connection_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_port_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_channel_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
					},
					#[codec(index = 13)]
					CloseInitChannel {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						channel_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						connection_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_port_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_channel_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
					},
					#[codec(index = 14)]
					CloseConfirmChannel {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						channel_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
						port_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						connection_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_port_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						counterparty_channel_id: ::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
					},
					#[codec(index = 15)]
					ReceivePacket {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						channel_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						dest_port: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						dest_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						sequence: ::core::primitive::u64,
					},
					#[codec(index = 16)]
					SendPacket {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						channel_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						dest_port: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						dest_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						sequence: ::core::primitive::u64,
					},
					#[codec(index = 17)]
					AcknowledgePacket {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						channel_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						sequence: ::core::primitive::u64,
					},
					#[codec(index = 18)]
					WriteAcknowledgement {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						channel_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						dest_port: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						dest_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						sequence: ::core::primitive::u64,
					},
					#[codec(index = 19)]
					TimeoutPacket {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						channel_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						sequence: ::core::primitive::u64,
					},
					#[codec(index = 20)]
					TimeoutOnClosePacket {
						revision_height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
						port_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						channel_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						sequence: ::core::primitive::u64,
					},
					#[codec(index = 21)]
					Empty,
					#[codec(index = 22)]
					ChainError,
					#[codec(index = 23)]
					AppModule {
						kind: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						module_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 24)]
					PushWasmCode {
						wasm_code_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
				}
			}
			pub mod ics20_fee {
				use super::runtime_types;
				pub mod pallet {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
					pub enum Call {
						#[codec(index = 0)]
						set_charge { charge: runtime_types::sp_arithmetic::per_things::Perbill },
						#[codec(index = 1)]
						add_channels_to_feeless_channel_list {
							source_channel: ::core::primitive::u64,
							destination_channel: ::core::primitive::u64,
						},
						#[codec(index = 2)]
						remove_channels_from_feeless_channel_list {
							source_channel: ::core::primitive::u64,
							destination_channel: ::core::primitive::u64,
						},
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
					pub enum Event {
						#[codec(index = 0)]
						IbcTransferFeeCollected {
							amount: ::core::primitive::u128,
							asset_id: runtime_types::primitives::currency::CurrencyId,
						},
						#[codec(index = 1)]
						FeeLessChannelIdsAdded {
							source_channel: ::core::primitive::u64,
							destination_channel: ::core::primitive::u64,
						},
						#[codec(index = 2)]
						FeeLessChannelIdsRemoved {
							source_channel: ::core::primitive::u64,
							destination_channel: ::core::primitive::u64,
						},
					}
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					deliver {
						messages: ::subxt::ext::subxt_core::alloc::vec::Vec<
							runtime_types::pallet_ibc::Any,
						>,
					},
					#[codec(index = 1)]
					transfer {
						params: runtime_types::pallet_ibc::TransferParams<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
						memo: ::core::option::Option<runtime_types::common::ibc::RawMemo>,
					},
					#[codec(index = 3)]
					#[doc = "We write the consensus & client state under these predefined paths so that"]
					#[doc = "we can produce state proofs of the values to connected chains"]
					#[doc = "in order to execute client upgrades."]
					upgrade_client { params: runtime_types::pallet_ibc::UpgradeParams },
					#[codec(index = 4)]
					#[doc = "Freeze a client at a specific height"]
					freeze_client {
						client_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						height: ::core::primitive::u64,
					},
					#[codec(index = 5)]
					#[doc = "Increase all IBC counters by 1. Used only in testing to ensure that"]
					#[doc = "relayer uses proper proper values for source/sink chains."]
					increase_counters,
					#[codec(index = 6)]
					add_channels_to_feeless_channel_list {
						source_channel: ::core::primitive::u64,
						destination_channel: ::core::primitive::u64,
					},
					#[codec(index = 7)]
					remove_channels_from_feeless_channel_list {
						source_channel: ::core::primitive::u64,
						destination_channel: ::core::primitive::u64,
					},
					#[codec(index = 8)]
					set_child_storage {
						key: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						value: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 9)]
					substitute_client_state {
						client_id: ::subxt::ext::subxt_core::alloc::string::String,
						height: runtime_types::ibc::core::ics02_client::height::Height,
						client_state_bytes:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						consensus_state_bytes:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Errors inform users that something went wrong."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Error processing ibc messages"]
					ProcessingError,
					#[codec(index = 1)]
					#[doc = "Error decoding some type"]
					DecodingError,
					#[codec(index = 2)]
					#[doc = "Error encoding some type"]
					EncodingError,
					#[codec(index = 3)]
					#[doc = "Error generating trie proof"]
					ProofGenerationError,
					#[codec(index = 4)]
					#[doc = "Client consensus state not found for height"]
					ConsensusStateNotFound,
					#[codec(index = 5)]
					#[doc = "Channel not found"]
					ChannelNotFound,
					#[codec(index = 6)]
					#[doc = "Client state not found"]
					ClientStateNotFound,
					#[codec(index = 7)]
					#[doc = "Connection not found"]
					ConnectionNotFound,
					#[codec(index = 8)]
					#[doc = "Packet commitment wasn't found"]
					PacketCommitmentNotFound,
					#[codec(index = 9)]
					#[doc = "Packet receipt wasn't found"]
					PacketReceiptNotFound,
					#[codec(index = 10)]
					#[doc = "Packet Acknowledgment wasn't found"]
					PacketAcknowledgmentNotFound,
					#[codec(index = 11)]
					#[doc = "Error constructing packet"]
					SendPacketError,
					#[codec(index = 12)]
					#[doc = "Invalid channel id"]
					InvalidChannelId,
					#[codec(index = 13)]
					#[doc = "Invalid port id"]
					InvalidPortId,
					#[codec(index = 14)]
					#[doc = "Other forms of errors"]
					Other,
					#[codec(index = 15)]
					#[doc = "Invalid route"]
					InvalidRoute,
					#[codec(index = 16)]
					#[doc = "Invalid message for extrinsic"]
					InvalidMessageType,
					#[codec(index = 17)]
					#[doc = "The interchain token transfer was not successfully initiated"]
					TransferInternals,
					#[codec(index = 18)]
					TransferSerde,
					#[codec(index = 19)]
					TransferOther,
					#[codec(index = 20)]
					TransferProtocol,
					#[codec(index = 21)]
					TransferSend,
					#[codec(index = 22)]
					#[doc = "Error Decoding utf8 bytes"]
					Utf8Error,
					#[codec(index = 23)]
					#[doc = "Invalid asset id"]
					InvalidAssetId,
					#[codec(index = 24)]
					#[doc = "Invalid Ibc denom"]
					PrefixedDenomParse,
					#[codec(index = 25)]
					#[doc = "Invalid amount"]
					InvalidAmount,
					#[codec(index = 26)]
					#[doc = "Invalid timestamp"]
					InvalidTimestamp,
					#[codec(index = 27)]
					#[doc = "Unable to get client revision number"]
					FailedToGetRevisionNumber,
					#[codec(index = 28)]
					#[doc = "Invalid params passed"]
					InvalidParams,
					#[codec(index = 29)]
					#[doc = "Error opening channel"]
					ChannelInitError,
					#[codec(index = 30)]
					#[doc = "Latest height and timestamp for a client not found"]
					TimestampAndHeightNotFound,
					#[codec(index = 31)]
					#[doc = "Failed to derive channel escrow address"]
					ChannelEscrowAddress,
					#[codec(index = 32)]
					#[doc = "Error writing acknowledgement to storage"]
					WriteAckError,
					#[codec(index = 33)]
					#[doc = "Client update time and height not found"]
					ClientUpdateNotFound,
					#[codec(index = 34)]
					#[doc = "Error Freezing client"]
					ClientFreezeFailed,
					#[codec(index = 35)]
					#[doc = "Access denied"]
					AccessDenied,
					#[codec(index = 36)]
					RateLimiter,
					#[codec(index = 37)]
					#[doc = "Fee errors"]
					FailedSendFeeToAccount,
					#[codec(index = 38)]
					#[doc = "Failed to derive origin sender address."]
					OriginAddress,
					#[codec(index = 39)]
					#[doc = "The memo hasn't passed the validation. Potential reasons:"]
					#[doc = "- The memo is too long."]
					#[doc = "- The memo is in invalid format"]
					#[doc = "- The memo contains unsupported middlewares"]
					InvalidMemo,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Events emitted by the ibc subsystem"]
					Events {
						events: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::core::result::Result<
								runtime_types::pallet_ibc::events::IbcEvent,
								runtime_types::pallet_ibc::errors::IbcError,
							>,
						>,
					},
					#[codec(index = 1)]
					#[doc = "An Ibc token transfer has been started"]
					TokenTransferInitiated {
						from: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						to: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						ibc_denom: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						local_asset_id:
							::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
						amount: ::core::primitive::u128,
						is_sender_source: ::core::primitive::bool,
						source_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						destination_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 2)]
					#[doc = "A channel has been opened"]
					ChannelOpened {
						channel_id:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						port_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 3)]
					#[doc = "Pallet params updated"]
					ParamsUpdated {
						send_enabled: ::core::primitive::bool,
						receive_enabled: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					#[doc = "An outgoing Ibc token transfer has been completed and burnt"]
					TokenTransferCompleted {
						from: runtime_types::ibc::signer::Signer,
						to: runtime_types::ibc::signer::Signer,
						ibc_denom: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						local_asset_id:
							::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
						amount: ::core::primitive::u128,
						is_sender_source: ::core::primitive::bool,
						source_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						destination_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 5)]
					#[doc = "Ibc tokens have been received and minted"]
					TokenReceived {
						from: runtime_types::ibc::signer::Signer,
						to: runtime_types::ibc::signer::Signer,
						ibc_denom: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						local_asset_id:
							::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
						amount: ::core::primitive::u128,
						is_receiver_source: ::core::primitive::bool,
						source_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						destination_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 6)]
					#[doc = "Ibc transfer failed, received an acknowledgement error, tokens have been refunded"]
					TokenTransferFailed {
						from: runtime_types::ibc::signer::Signer,
						to: runtime_types::ibc::signer::Signer,
						ibc_denom: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						local_asset_id:
							::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
						amount: ::core::primitive::u128,
						is_sender_source: ::core::primitive::bool,
						source_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						destination_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 7)]
					#[doc = "Happens when token transfer timeouts, tokens have been refunded. expected"]
					#[doc = "`TokenTransferFailed` does not happen in this case."]
					TokenTransferTimeout {
						from: runtime_types::ibc::signer::Signer,
						to: runtime_types::ibc::signer::Signer,
						ibc_denom: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						local_asset_id:
							::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
						amount: ::core::primitive::u128,
						is_sender_source: ::core::primitive::bool,
						source_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						destination_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 8)]
					#[doc = "On recv packet was not processed successfully processes"]
					OnRecvPacketError {
						msg: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 9)]
					#[doc = "Client upgrade path has been set"]
					ClientUpgradeSet,
					#[codec(index = 10)]
					#[doc = "Client has been frozen"]
					ClientFrozen {
						client_id: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						height: ::core::primitive::u64,
						revision_number: ::core::primitive::u64,
					},
					#[codec(index = 11)]
					#[doc = "Asset Admin Account Updated"]
					AssetAdminUpdated {
						admin_account: ::subxt::ext::subxt_core::utils::AccountId32,
					},
					#[codec(index = 12)]
					FeeLessChannelIdsAdded {
						source_channel: ::core::primitive::u64,
						destination_channel: ::core::primitive::u64,
					},
					#[codec(index = 13)]
					FeeLessChannelIdsRemoved {
						source_channel: ::core::primitive::u64,
						destination_channel: ::core::primitive::u64,
					},
					#[codec(index = 14)]
					ChargingFeeOnTransferInitiated {
						sequence: ::core::primitive::u64,
						from: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						to: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						ibc_denom: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						local_asset_id:
							::core::option::Option<runtime_types::primitives::currency::CurrencyId>,
						amount: ::core::primitive::u128,
						is_flat_fee: ::core::primitive::bool,
						source_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						destination_channel:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 15)]
					ChargingFeeConfirmed { sequence: ::core::primitive::u64 },
					#[codec(index = 16)]
					ChargingFeeTimeout { sequence: ::core::primitive::u64 },
					#[codec(index = 17)]
					ChargingFeeFailedAcknowledgement { sequence: ::core::primitive::u64 },
					#[codec(index = 18)]
					ChildStateUpdated,
					#[codec(index = 19)]
					ClientStateSubstituted {
						client_id: ::subxt::ext::subxt_core::alloc::string::String,
						height: runtime_types::ibc::core::ics02_client::height::Height,
					},
					#[codec(index = 20)]
					ExecuteMemoStarted {
						account_id: ::subxt::ext::subxt_core::utils::AccountId32,
						memo:
							::core::option::Option<::subxt::ext::subxt_core::alloc::string::String>,
					},
					#[codec(index = 21)]
					ExecuteMemoIbcTokenTransferSuccess {
						from: ::subxt::ext::subxt_core::utils::AccountId32,
						to: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
						channel: ::core::primitive::u64,
						next_memo: ::core::option::Option<runtime_types::common::ibc::RawMemo>,
					},
					#[codec(index = 22)]
					ExecuteMemoIbcTokenTransferFailedWithReason {
						from: ::subxt::ext::subxt_core::utils::AccountId32,
						memo: ::subxt::ext::subxt_core::alloc::string::String,
						reason: ::core::primitive::u8,
					},
					#[codec(index = 23)]
					ExecuteMemoIbcTokenTransferFailed {
						from: ::subxt::ext::subxt_core::utils::AccountId32,
						to: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						amount: ::core::primitive::u128,
						channel: ::core::primitive::u64,
						next_memo: ::core::option::Option<runtime_types::common::ibc::RawMemo>,
					},
					#[codec(index = 24)]
					ExecuteMemoXcmSuccess {
						from: ::subxt::ext::subxt_core::utils::AccountId32,
						to: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						para_id: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 25)]
					ExecuteMemoXcmFailed {
						from: ::subxt::ext::subxt_core::utils::AccountId32,
						to: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						para_id: ::core::option::Option<::core::primitive::u32>,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct Any {
				pub type_url: ::subxt::ext::subxt_core::alloc::string::String,
				pub value: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum LightClientProtocol {
				#[codec(index = 0)]
				Beefy,
				#[codec(index = 1)]
				Grandpa,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum MultiAddress<_0> {
				#[codec(index = 0)]
				Id(_0),
				#[codec(index = 1)]
				Raw(::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>),
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct TransferParams<_0> {
				pub to: runtime_types::pallet_ibc::MultiAddress<_0>,
				pub source_channel: ::core::primitive::u64,
				pub timeout: runtime_types::ibc_primitives::Timeout,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct UpgradeParams {
				pub client_state: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
				pub consensus_state:
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
			}
		}
		pub mod pallet_indices {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Assign an previously unassigned index."]
					#[doc = ""]
					#[doc = "Payment: `Deposit` is reserved from the sender account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `index`: the index to be claimed. This must not be in use."]
					#[doc = ""]
					#[doc = "Emits `IndexAssigned` if successful."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- `O(1)`."]
					claim { index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "Assign an index already owned by the sender to another account. The balance reservation"]
					#[doc = "is effectively transferred to the new account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `index`: the index to be re-assigned. This must be owned by the sender."]
					#[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
					#[doc = ""]
					#[doc = "Emits `IndexAssigned` if successful."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- `O(1)`."]
					transfer {
						new: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						index: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Free up an index owned by the sender."]
					#[doc = ""]
					#[doc = "Payment: Any previous deposit placed for the index is unreserved in the sender account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the sender must own the index."]
					#[doc = ""]
					#[doc = "- `index`: the index to be freed. This must be owned by the sender."]
					#[doc = ""]
					#[doc = "Emits `IndexFreed` if successful."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- `O(1)`."]
					free { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					#[doc = "Force an index to an account. This doesn't require a deposit. If the index is already"]
					#[doc = "held, then any deposit is reimbursed to its current owner."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Root_."]
					#[doc = ""]
					#[doc = "- `index`: the index to be (re-)assigned."]
					#[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
					#[doc = "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred."]
					#[doc = ""]
					#[doc = "Emits `IndexAssigned` if successful."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- `O(1)`."]
					force_transfer {
						new: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						index: ::core::primitive::u32,
						freeze: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					#[doc = "Freeze an index so it will always point to the sender account. This consumes the"]
					#[doc = "deposit."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and the signing account must have a"]
					#[doc = "non-frozen account `index`."]
					#[doc = ""]
					#[doc = "- `index`: the index to be frozen in place."]
					#[doc = ""]
					#[doc = "Emits `IndexFrozen` if successful."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- `O(1)`."]
					freeze { index: ::core::primitive::u32 },
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The index was not already assigned."]
					NotAssigned,
					#[codec(index = 1)]
					#[doc = "The index is assigned to another account."]
					NotOwner,
					#[codec(index = 2)]
					#[doc = "The index was not available."]
					InUse,
					#[codec(index = 3)]
					#[doc = "The source and destination accounts are identical."]
					NotTransfer,
					#[codec(index = 4)]
					#[doc = "The index is permanent and may not be freed/changed."]
					Permanent,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A account index was assigned."]
					IndexAssigned {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						index: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					#[doc = "A account index has been freed up (unassigned)."]
					IndexFreed { index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "A account index has been frozen to its current account ID."]
					IndexFrozen {
						index: ::core::primitive::u32,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
					},
				}
			}
		}
		pub mod pallet_liquid_staking {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Put assets under staking, the native assets will be transferred to the account"]
					#[doc = "owned by the pallet, user receive derivative in return, such derivative can be"]
					#[doc = "further used as collateral for lending."]
					#[doc = ""]
					#[doc = "- `amount`: the amount of staking assets"]
					stake {
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					#[doc = "Unstake by exchange derivative for assets, the assets will not be available immediately."]
					#[doc = "Instead, the request is recorded and pending for the nomination accounts on relaychain"]
					#[doc = "chain to do the `unbond` operation."]
					#[doc = ""]
					#[doc = "- `amount`: the amount of derivative"]
					unstake {
						#[codec(compact)]
						liquid_amount: ::core::primitive::u128,
						unstake_provider:
							runtime_types::pallet_liquid_staking::types::UnstakeProvider,
					},
					#[codec(index = 2)]
					#[doc = "Update insurance pool's reserve_factor"]
					update_reserve_factor {
						reserve_factor: runtime_types::sp_arithmetic::per_things::Permill,
					},
					#[codec(index = 3)]
					#[doc = "Update ledger's max bonded cap"]
					update_staking_ledger_cap {
						#[codec(compact)]
						cap: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Bond on relaychain via xcm.transact"]
					bond {
						derivative_index: ::core::primitive::u16,
						#[codec(compact)]
						amount: ::core::primitive::u128,
						payee: runtime_types::pallet_xcm_helper::ump::RewardDestination<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
					},
					#[codec(index = 5)]
					#[doc = "Bond_extra on relaychain via xcm.transact"]
					bond_extra {
						derivative_index: ::core::primitive::u16,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					#[doc = "Unbond on relaychain via xcm.transact"]
					unbond {
						derivative_index: ::core::primitive::u16,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					#[doc = "Rebond on relaychain via xcm.transact"]
					rebond {
						derivative_index: ::core::primitive::u16,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					#[doc = "Withdraw unbonded on relaychain via xcm.transact"]
					withdraw_unbonded {
						derivative_index: ::core::primitive::u16,
						num_slashing_spans: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					#[doc = "Nominate on relaychain via xcm.transact"]
					nominate {
						derivative_index: ::core::primitive::u16,
						targets: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
					},
					#[codec(index = 10)]
					#[doc = "Internal call which is expected to be triggered only by xcm instruction"]
					notification_received {
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v3::Response,
					},
					#[codec(index = 11)]
					#[doc = "Claim assets back when current era index arrived"]
					#[doc = "at target era"]
					claim_for {
						dest: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 12)]
					#[doc = "Force set era start block"]
					force_set_era_start_block { block_number: ::core::primitive::u32 },
					#[codec(index = 13)]
					#[doc = "Force set current era"]
					force_set_current_era { era: ::core::primitive::u32 },
					#[codec(index = 14)]
					#[doc = "Force advance era"]
					force_advance_era { offset: ::core::primitive::u32 },
					#[codec(index = 15)]
					#[doc = "Force matching"]
					force_matching,
					#[codec(index = 16)]
					#[doc = "Force set staking_ledger"]
					force_set_staking_ledger {
						derivative_index: ::core::primitive::u16,
						staking_ledger: runtime_types::pallet_liquid_staking::types::StakingLedger<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u128,
						>,
					},
					#[codec(index = 17)]
					#[doc = "Set current era by providing storage proof"]
					set_current_era {
						era: ::core::primitive::u32,
						proof: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
					},
					#[codec(index = 18)]
					#[doc = "Set staking_ledger by providing storage proof"]
					set_staking_ledger {
						derivative_index: ::core::primitive::u16,
						staking_ledger: runtime_types::pallet_liquid_staking::types::StakingLedger<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u128,
						>,
						proof: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
					},
					#[codec(index = 19)]
					#[doc = "Reduces reserves by transferring to receiver."]
					reduce_reserves {
						receiver: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						#[codec(compact)]
						reduce_amount: ::core::primitive::u128,
					},
					#[codec(index = 20)]
					#[doc = "Cancel unstake"]
					cancel_unstake {
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 21)]
					#[doc = "Update commission rate"]
					update_commission_rate {
						commission_rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
					},
					#[codec(index = 22)]
					#[doc = "Fast match unstake through matching pool"]
					fast_match_unstake {
						unstaker_list: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
					},
					#[codec(index = 23)]
					#[doc = "Update incentive amount"]
					update_incentive {
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 24)]
					initiate_exchange_rate,
					#[codec(index = 25)]
					relaychain_storage_proof_key { derivative_index: ::core::primitive::u16 },
					#[codec(index = 26)]
					set_members {
						members: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Exchange rate is invalid."]
					InvalidExchangeRate,
					#[codec(index = 1)]
					#[doc = "The stake was below the minimum, `MinStake`."]
					StakeTooSmall,
					#[codec(index = 2)]
					#[doc = "The unstake was below the minimum, `MinUnstake`."]
					UnstakeTooSmall,
					#[codec(index = 3)]
					#[doc = "Invalid liquid currency"]
					InvalidLiquidCurrency,
					#[codec(index = 4)]
					#[doc = "Invalid staking currency"]
					InvalidStakingCurrency,
					#[codec(index = 5)]
					#[doc = "Invalid derivative index"]
					InvalidDerivativeIndex,
					#[codec(index = 6)]
					#[doc = "Invalid staking ledger"]
					InvalidStakingLedger,
					#[codec(index = 7)]
					#[doc = "Exceeded liquid currency's market cap"]
					CapExceeded,
					#[codec(index = 8)]
					#[doc = "Invalid market cap"]
					InvalidCap,
					#[codec(index = 9)]
					#[doc = "The factor should be bigger than 0% and smaller than 100%"]
					InvalidFactor,
					#[codec(index = 10)]
					#[doc = "Nothing to claim yet"]
					NothingToClaim,
					#[codec(index = 11)]
					#[doc = "Stash wasn't bonded yet"]
					NotBonded,
					#[codec(index = 12)]
					#[doc = "Stash is already bonded."]
					AlreadyBonded,
					#[codec(index = 13)]
					#[doc = "Can not schedule more unlock chunks."]
					NoMoreChunks,
					#[codec(index = 14)]
					#[doc = "Staking ledger is locked due to mutation in notification_received"]
					StakingLedgerLocked,
					#[codec(index = 15)]
					#[doc = "Not withdrawn unbonded yet"]
					NotWithdrawn,
					#[codec(index = 16)]
					#[doc = "Cannot have a nominator role with value less than the minimum defined by"]
					#[doc = "`MinNominatorBond`"]
					InsufficientBond,
					#[codec(index = 17)]
					#[doc = "The merkle proof is invalid"]
					InvalidProof,
					#[codec(index = 18)]
					#[doc = "No unlocking items"]
					NoUnlockings,
					#[codec(index = 19)]
					#[doc = "Invalid commission rate"]
					InvalidCommissionRate,
					#[codec(index = 20)]
					InvalidOrigin,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "The assets get staked successfully"]
					Staked(::subxt::ext::subxt_core::utils::AccountId32, ::core::primitive::u128),
					#[codec(index = 1)]
					#[doc = "The derivative get unstaked successfully"]
					Unstaked(
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u128,
						::core::primitive::u128,
					),
					#[codec(index = 2)]
					#[doc = "Staking ledger updated"]
					StakingLedgerUpdated(
						::core::primitive::u16,
						runtime_types::pallet_liquid_staking::types::StakingLedger<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u128,
						>,
					),
					#[codec(index = 3)]
					#[doc = "Sent staking.bond call to relaychain"]
					Bonding(
						::core::primitive::u16,
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u128,
						runtime_types::pallet_xcm_helper::ump::RewardDestination<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
					),
					#[codec(index = 4)]
					#[doc = "Sent staking.bond_extra call to relaychain"]
					BondingExtra(::core::primitive::u16, ::core::primitive::u128),
					#[codec(index = 5)]
					#[doc = "Sent staking.unbond call to relaychain"]
					Unbonding(::core::primitive::u16, ::core::primitive::u128),
					#[codec(index = 6)]
					#[doc = "Sent staking.rebond call to relaychain"]
					Rebonding(::core::primitive::u16, ::core::primitive::u128),
					#[codec(index = 7)]
					#[doc = "Sent staking.withdraw_unbonded call to relaychain"]
					WithdrawingUnbonded(::core::primitive::u16, ::core::primitive::u32),
					#[codec(index = 8)]
					#[doc = "Sent staking.nominate call to relaychain"]
					Nominating(
						::core::primitive::u16,
						::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
					),
					#[codec(index = 9)]
					#[doc = "Staking ledger's cap was updated"]
					StakingLedgerCapUpdated(::core::primitive::u128),
					#[codec(index = 10)]
					#[doc = "Reserve_factor was updated"]
					ReserveFactorUpdated(runtime_types::sp_arithmetic::per_things::Permill),
					#[codec(index = 11)]
					#[doc = "Exchange rate was updated"]
					ExchangeRateUpdated(runtime_types::sp_arithmetic::fixed_point::FixedU128),
					#[codec(index = 12)]
					#[doc = "Notification received"]
					#[doc = "[multi_location, query_id, res]"]
					NotificationReceived(
						::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::v3::multilocation::MultiLocation,
						>,
						::core::primitive::u64,
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v3::traits::Error,
						)>,
					),
					#[codec(index = 13)]
					#[doc = "Claim user's unbonded staking assets"]
					#[doc = "[account_id, amount]"]
					ClaimedFor(
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u128,
					),
					#[codec(index = 14)]
					#[doc = "New era"]
					#[doc = "[era_index]"]
					NewEra(::core::primitive::u32),
					#[codec(index = 15)]
					#[doc = "Matching stakes & unstakes for optimizing operations to be done"]
					#[doc = "on relay chain"]
					#[doc = "[bond_amount, rebond_amount, unbond_amount]"]
					Matching(
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u128,
					),
					#[codec(index = 16)]
					#[doc = "Event emitted when the reserves are reduced"]
					#[doc = "[receiver, reduced_amount]"]
					ReservesReduced(
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u128,
					),
					#[codec(index = 17)]
					#[doc = "Unstake cancelled"]
					#[doc = "[account_id, amount, liquid_amount]"]
					UnstakeCancelled(
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u128,
						::core::primitive::u128,
					),
					#[codec(index = 18)]
					#[doc = "Commission rate was updated"]
					CommissionRateUpdated(runtime_types::sp_arithmetic::fixed_point::FixedU128),
					#[codec(index = 19)]
					#[doc = "Fast Unstake Matched"]
					#[doc = "[unstaker, received_staking_amount, matched_liquid_amount, fee_in_liquid_currency]"]
					FastUnstakeMatched(
						::subxt::ext::subxt_core::utils::AccountId32,
						::core::primitive::u128,
						::core::primitive::u128,
						::core::primitive::u128,
					),
					#[codec(index = 20)]
					#[doc = "Incentive amount was updated"]
					IncentiveUpdated(::core::primitive::u128),
					#[codec(index = 21)]
					#[doc = "Not the ideal staking ledger"]
					NonIdealStakingLedger(::core::primitive::u16),
					#[codec(index = 22)]
					RelaychainStorageProofKey(
						::core::primitive::u16,
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						::subxt::ext::subxt_core::utils::AccountId32,
					),
					#[codec(index = 23)]
					SetStakingLedgerTry {
						origin: ::subxt::ext::subxt_core::utils::AccountId32,
						derivative_index: ::core::primitive::u16,
						staking_ledger: runtime_types::pallet_liquid_staking::types::StakingLedger<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u128,
						>,
						proof: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
					},
					#[codec(index = 24)]
					OnInitializeHook {
						relay_block_number: ::core::primitive::u32,
						era: ::core::primitive::u32,
					},
					#[codec(index = 25)]
					SetMembers {
						members: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Versions {
					#[codec(index = 0)]
					V1,
					#[codec(index = 1)]
					V2,
					#[codec(index = 2)]
					V3,
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct MatchingLedger<_0> {
					pub total_stake_amount:
						runtime_types::pallet_liquid_staking::types::ReservableAmount<_0>,
					pub total_unstake_amount:
						runtime_types::pallet_liquid_staking::types::ReservableAmount<_0>,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct ReservableAmount<_0> {
					pub total: _0,
					pub reserved: _0,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct StakingLedger<_0, _1> {
					pub stash: _0,
					#[codec(compact)]
					pub total: _1,
					#[codec(compact)]
					pub active: _1,
					pub unlocking: ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::pallet_liquid_staking::types::UnlockChunk<_1>,
					>,
					pub claimed_rewards:
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct UnlockChunk<_0> {
					#[codec(compact)]
					pub value: _0,
					#[codec(compact)]
					pub era: ::core::primitive::u32,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum UnstakeProvider {
					#[codec(index = 0)]
					RelayChain,
					#[codec(index = 1)]
					Loans,
					#[codec(index = 2)]
					MatchingPool,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum XcmRequest {
					#[codec(index = 0)]
					Bond { index: ::core::primitive::u16, amount: ::core::primitive::u128 },
					#[codec(index = 1)]
					BondExtra { index: ::core::primitive::u16, amount: ::core::primitive::u128 },
					#[codec(index = 2)]
					Unbond { index: ::core::primitive::u16, amount: ::core::primitive::u128 },
					#[codec(index = 3)]
					Rebond { index: ::core::primitive::u16, amount: ::core::primitive::u128 },
					#[codec(index = 4)]
					WithdrawUnbonded {
						index: ::core::primitive::u16,
						num_slashing_spans: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					Nominate {
						index: ::core::primitive::u16,
						targets: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
					},
				}
			}
		}
		pub mod pallet_membership {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Add a member `who` to the set."]
					#[doc = ""]
					#[doc = "May only be called from `T::AddOrigin`."]
					add_member {
						who: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Remove a member `who` from the set."]
					#[doc = ""]
					#[doc = "May only be called from `T::RemoveOrigin`."]
					remove_member {
						who: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 2)]
					#[doc = "Swap out one member `remove` for another `add`."]
					#[doc = ""]
					#[doc = "May only be called from `T::SwapOrigin`."]
					#[doc = ""]
					#[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
					swap_member {
						remove: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						add: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 3)]
					#[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
					#[doc = "pass `members` pre-sorted."]
					#[doc = ""]
					#[doc = "May only be called from `T::ResetOrigin`."]
					reset_members {
						members: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
					},
					#[codec(index = 4)]
					#[doc = "Swap out the sending member for some other key `new`."]
					#[doc = ""]
					#[doc = "May only be called from `Signed` origin of a current member."]
					#[doc = ""]
					#[doc = "Prime membership is passed from the origin account to `new`, if extant."]
					change_key {
						new: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 5)]
					#[doc = "Set the prime member. Must be a current member."]
					#[doc = ""]
					#[doc = "May only be called from `T::PrimeOrigin`."]
					set_prime {
						who: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 6)]
					#[doc = "Remove the prime member if it exists."]
					#[doc = ""]
					#[doc = "May only be called from `T::PrimeOrigin`."]
					clear_prime,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Already a member."]
					AlreadyMember,
					#[codec(index = 1)]
					#[doc = "Not a member."]
					NotMember,
					#[codec(index = 2)]
					#[doc = "Too many members."]
					TooManyMembers,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "The given member was added; see the transaction for who."]
					MemberAdded,
					#[codec(index = 1)]
					#[doc = "The given member was removed; see the transaction for who."]
					MemberRemoved,
					#[codec(index = 2)]
					#[doc = "Two members were swapped; see the transaction for who."]
					MembersSwapped,
					#[codec(index = 3)]
					#[doc = "The membership was reset; see the transaction for who the new set is."]
					MembersReset,
					#[codec(index = 4)]
					#[doc = "One of the members' keys changed."]
					KeyChanged,
					#[codec(index = 5)]
					#[doc = "Phantom member, never used."]
					Dummy,
				}
			}
		}
		pub mod pallet_multihop_xcm_ibc {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					add_route {
						route_id: ::core::primitive::u128,
						route: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
							runtime_types::composable_traits::xcm::memo::ChainInfo,
							runtime_types::bounded_collections::bounded_vec::BoundedVec<
								::core::primitive::u8,
							>,
						)>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					IncorrectAddress { chain_id: ::core::primitive::u8 },
					#[codec(index = 1)]
					IncorrectChainName { chain_id: ::core::primitive::u8 },
					#[codec(index = 2)]
					FailedToEncodeBech32Address { chain_id: ::core::primitive::u8 },
					#[codec(index = 3)]
					IncorrectMultiLocation,
					#[codec(index = 4)]
					XcmDepositFailed,
					#[codec(index = 5)]
					MultiHopRouteDoesNotExist,
					#[codec(index = 6)]
					DoesNotSupportNonFungible,
					#[codec(index = 7)]
					IncorrectCountOfAddresses,
					#[codec(index = 8)]
					FailedToConstructMemo,
					#[codec(index = 9)]
					FailedToDecodeAccountId,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					SuccessXcmToIbc {
						origin_address: ::subxt::ext::subxt_core::utils::AccountId32,
						to: [::core::primitive::u8; 32usize],
						amount: ::core::primitive::u128,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						memo: ::core::option::Option<runtime_types::common::ibc::RawMemo>,
					},
					#[codec(index = 1)]
					FailedXcmToIbc {
						origin_address: ::subxt::ext::subxt_core::utils::AccountId32,
						to: [::core::primitive::u8; 32usize],
						amount: ::core::primitive::u128,
						asset_id: runtime_types::primitives::currency::CurrencyId,
						memo: ::core::option::Option<runtime_types::common::ibc::RawMemo>,
					},
					#[codec(index = 2)]
					FailedCallback {
						origin_address: [::core::primitive::u8; 32usize],
						route_id: ::core::primitive::u128,
						reason: runtime_types::pallet_multihop_xcm_ibc::pallet::MultihopEventReason,
					},
					#[codec(index = 3)]
					MultihopXcmMemo {
						reason: runtime_types::pallet_multihop_xcm_ibc::pallet::MultihopEventReason,
						from: ::subxt::ext::subxt_core::utils::AccountId32,
						to: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
						asset_id: ::core::primitive::u128,
						is_error: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					FailedMatchLocation,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum MultihopEventReason {
					#[codec(index = 0)]
					FailedToConvertAddressToBytes,
					#[codec(index = 1)]
					XcmTransferInitiated,
					#[codec(index = 2)]
					IncorrectPalletId,
					#[codec(index = 3)]
					MultiHopRouteDoesNotExist,
					#[codec(index = 4)]
					MultiHopRouteExistButNotConfigured,
					#[codec(index = 5)]
					IncorrectCountOfAddresses,
					#[codec(index = 6)]
					FailedToDeriveCosmosAddressFromBytes,
					#[codec(index = 7)]
					FailedToDeriveChainNameFromUtf8,
					#[codec(index = 8)]
					FailedToEncodeBech32Address,
					#[codec(index = 9)]
					FailedToDecodeDestAccountId,
					#[codec(index = 10)]
					FailedToDecodeSenderAccountId,
					#[codec(index = 11)]
					DoesNotSupportNonFungible,
					#[codec(index = 12)]
					FailedCreateMemo,
					#[codec(index = 13)]
					FailedToConvertMemoIntoPalletIbcMemoMessageType,
				}
			}
		}
		pub mod pallet_multisig {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
					#[doc = "multi-signature, but do not participate in the approval process."]
					#[doc = "- `call`: The call to be executed."]
					#[doc = ""]
					#[doc = "Result is equivalent to the dispatched result."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
					as_multi_threshold_1 {
						other_signatories: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
					#[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
					#[doc = ""]
					#[doc = "If there are enough, then dispatch the call."]
					#[doc = ""]
					#[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
					#[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
					#[doc = "is cancelled."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
					#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
					#[doc = "dispatch. May not be empty."]
					#[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
					#[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
					#[doc = "transaction index) of the first approval transaction."]
					#[doc = "- `call`: The call to be executed."]
					#[doc = ""]
					#[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
					#[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
					#[doc = ""]
					#[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
					#[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
					#[doc = "may be found in the deposited `MultisigExecuted` event."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- `O(S + Z + Call)`."]
					#[doc = "- Up to one balance-reserve or unreserve operation."]
					#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
					#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
					#[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
					#[doc = "- One encode & hash, both of complexity `O(S)`."]
					#[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
					#[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
					#[doc = "- One event."]
					#[doc = "- The weight of the `call`."]
					#[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
					#[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
					as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
						maybe_timepoint: ::core::option::Option<
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						>,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
						max_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 2)]
					#[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
					#[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
					#[doc = ""]
					#[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
					#[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
					#[doc = "is cancelled."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
					#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
					#[doc = "dispatch. May not be empty."]
					#[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
					#[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
					#[doc = "transaction index) of the first approval transaction."]
					#[doc = "- `call_hash`: The hash of the call to be executed."]
					#[doc = ""]
					#[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- `O(S)`."]
					#[doc = "- Up to one balance-reserve or unreserve operation."]
					#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
					#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
					#[doc = "- One encode & hash, both of complexity `O(S)`."]
					#[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
					#[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
					#[doc = "- One event."]
					#[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
					#[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
					approve_as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
						maybe_timepoint: ::core::option::Option<
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						>,
						call_hash: [::core::primitive::u8; 32usize],
						max_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 3)]
					#[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
					#[doc = "for this operation will be unreserved on success."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
					#[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
					#[doc = "dispatch. May not be empty."]
					#[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
					#[doc = "transaction for this dispatch."]
					#[doc = "- `call_hash`: The hash of the call to be executed."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- `O(S)`."]
					#[doc = "- Up to one balance-reserve or unreserve operation."]
					#[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
					#[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
					#[doc = "- One encode & hash, both of complexity `O(S)`."]
					#[doc = "- One event."]
					#[doc = "- I/O: 1 read `O(S)`, one remove."]
					#[doc = "- Storage: removes one item."]
					cancel_as_multi {
						threshold: ::core::primitive::u16,
						other_signatories: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::AccountId32,
						>,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						call_hash: [::core::primitive::u8; 32usize],
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Threshold must be 2 or greater."]
					MinimumThreshold,
					#[codec(index = 1)]
					#[doc = "Call is already approved by this signatory."]
					AlreadyApproved,
					#[codec(index = 2)]
					#[doc = "Call doesn't need any (more) approvals."]
					NoApprovalsNeeded,
					#[codec(index = 3)]
					#[doc = "There are too few signatories in the list."]
					TooFewSignatories,
					#[codec(index = 4)]
					#[doc = "There are too many signatories in the list."]
					TooManySignatories,
					#[codec(index = 5)]
					#[doc = "The signatories were provided out of order; they should be ordered."]
					SignatoriesOutOfOrder,
					#[codec(index = 6)]
					#[doc = "The sender was contained in the other signatories; it shouldn't be."]
					SenderInSignatories,
					#[codec(index = 7)]
					#[doc = "Multisig operation not found when attempting to cancel."]
					NotFound,
					#[codec(index = 8)]
					#[doc = "Only the account that originally created the multisig is able to cancel it."]
					NotOwner,
					#[codec(index = 9)]
					#[doc = "No timepoint was given, yet the multisig operation is already underway."]
					NoTimepoint,
					#[codec(index = 10)]
					#[doc = "A different timepoint was given to the multisig operation that is underway."]
					WrongTimepoint,
					#[codec(index = 11)]
					#[doc = "A timepoint was given, yet no multisig operation is underway."]
					UnexpectedTimepoint,
					#[codec(index = 12)]
					#[doc = "The maximum weight information provided was too low."]
					MaxWeightTooLow,
					#[codec(index = 13)]
					#[doc = "The data to be stored is already stored."]
					AlreadyStored,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A new multisig operation has begun."]
					NewMultisig {
						approving: ::subxt::ext::subxt_core::utils::AccountId32,
						multisig: ::subxt::ext::subxt_core::utils::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 1)]
					#[doc = "A multisig operation has been approved by someone."]
					MultisigApproval {
						approving: ::subxt::ext::subxt_core::utils::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::ext::subxt_core::utils::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 2)]
					#[doc = "A multisig operation has been executed."]
					MultisigExecuted {
						approving: ::subxt::ext::subxt_core::utils::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::ext::subxt_core::utils::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 3)]
					#[doc = "A multisig operation has been cancelled."]
					MultisigCancelled {
						cancelling: ::subxt::ext::subxt_core::utils::AccountId32,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::subxt::ext::subxt_core::utils::AccountId32,
						call_hash: [::core::primitive::u8; 32usize],
					},
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct Multisig<_0, _1, _2> {
				pub when: runtime_types::pallet_multisig::Timepoint<_0>,
				pub deposit: _1,
				pub depositor: _2,
				pub approvals: runtime_types::bounded_collections::bounded_vec::BoundedVec<_2>,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct Timepoint<_0> {
				pub height: _0,
				pub index: ::core::primitive::u32,
			}
		}
		pub mod pallet_preimage {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Register a preimage on-chain."]
					#[doc = ""]
					#[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
					#[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
					note_preimage {
						bytes: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					#[doc = "Clear an unrequested preimage from the runtime storage."]
					#[doc = ""]
					#[doc = "If `len` is provided, then it will be a much cheaper operation."]
					#[doc = ""]
					#[doc = "- `hash`: The hash of the preimage to be removed from the store."]
					#[doc = "- `len`: The length of the preimage of `hash`."]
					unnote_preimage { hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 2)]
					#[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
					#[doc = ""]
					#[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
					#[doc = "a user may have paid, and take the control of the preimage out of their hands."]
					request_preimage { hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 3)]
					#[doc = "Clear a previously made request for a preimage."]
					#[doc = ""]
					#[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
					unrequest_preimage { hash: ::subxt::ext::subxt_core::utils::H256 },
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Preimage is too large to store on-chain."]
					TooBig,
					#[codec(index = 1)]
					#[doc = "Preimage has already been noted on-chain."]
					AlreadyNoted,
					#[codec(index = 2)]
					#[doc = "The user is not authorized to perform this action."]
					NotAuthorized,
					#[codec(index = 3)]
					#[doc = "The preimage cannot be removed since it has not yet been noted."]
					NotNoted,
					#[codec(index = 4)]
					#[doc = "A preimage may not be removed when there are outstanding requests."]
					Requested,
					#[codec(index = 5)]
					#[doc = "The preimage request cannot be removed since no outstanding requests exist."]
					NotRequested,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A preimage has been noted."]
					Noted { hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 1)]
					#[doc = "A preimage has been requested."]
					Requested { hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 2)]
					#[doc = "A preimage has ben cleared."]
					Cleared { hash: ::subxt::ext::subxt_core::utils::H256 },
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum RequestStatus<_0, _1> {
				#[codec(index = 0)]
				Unrequested { deposit: (_0, _1), len: ::core::primitive::u32 },
				#[codec(index = 1)]
				Requested {
					deposit: ::core::option::Option<(_0, _1)>,
					count: ::core::primitive::u32,
					len: ::core::option::Option<::core::primitive::u32>,
				},
			}
		}
		pub mod pallet_proxy {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
					#[doc = "`add_proxy`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
					#[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
					#[doc = "- `call`: The call to be made by the `real` account."]
					proxy {
						real: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						force_proxy_type: ::core::option::Option<
							runtime_types::composable_traits::account_proxy::ProxyType,
						>,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
					#[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
					#[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
					#[doc = "zero."]
					add_proxy {
						delegate: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Unregister a proxy account for the sender."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
					#[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
					remove_proxy {
						delegate: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Unregister all proxy accounts for the sender."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "WARNING: This may be called on accounts created by `pure`, however if done, then"]
					#[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
					remove_proxies,
					#[codec(index = 4)]
					#[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
					#[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
					#[doc = ""]
					#[doc = "Requires a `Signed` origin."]
					#[doc = ""]
					#[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
					#[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
					#[doc = "allow for maximum flexibility."]
					#[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
					#[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
					#[doc = "want to use `0`."]
					#[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
					#[doc = "zero."]
					#[doc = ""]
					#[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
					#[doc = "same sender, with the same parameters."]
					#[doc = ""]
					#[doc = "Fails if there are insufficient funds to pay for deposit."]
					create_pure {
						proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
						delay: ::core::primitive::u32,
						index: ::core::primitive::u16,
					},
					#[codec(index = 5)]
					#[doc = "Removes a previously spawned pure proxy."]
					#[doc = ""]
					#[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
					#[doc = "inaccessible."]
					#[doc = ""]
					#[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
					#[doc = "`pure` with corresponding parameters."]
					#[doc = ""]
					#[doc = "- `spawner`: The account that originally called `pure` to create this account."]
					#[doc = "- `index`: The disambiguation index originally passed to `pure`. Probably `0`."]
					#[doc = "- `proxy_type`: The proxy type originally passed to `pure`."]
					#[doc = "- `height`: The height of the chain when the call to `pure` was processed."]
					#[doc = "- `ext_index`: The extrinsic index in which the call to `pure` was processed."]
					#[doc = ""]
					#[doc = "Fails with `NoPermission` in case the caller is not a previously created pure"]
					#[doc = "account whose `pure` call has corresponding parameters."]
					kill_pure {
						spawner: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
						index: ::core::primitive::u16,
						#[codec(compact)]
						height: ::core::primitive::u32,
						#[codec(compact)]
						ext_index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					#[doc = "Publish the hash of a proxy-call that will be made in the future."]
					#[doc = ""]
					#[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
					#[doc = "if the delay associated with the proxy relationship is greater than zero."]
					#[doc = ""]
					#[doc = "No more than `MaxPending` announcements may be made at any one time."]
					#[doc = ""]
					#[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
					#[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
					#[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
					announce {
						real: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						call_hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 7)]
					#[doc = "Remove a given announcement."]
					#[doc = ""]
					#[doc = "May be called by a proxy account to remove a call they previously announced and return"]
					#[doc = "the deposit."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
					#[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
					remove_announcement {
						real: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						call_hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 8)]
					#[doc = "Remove the given announcement of a delegate."]
					#[doc = ""]
					#[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
					#[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `delegate`: The account that previously announced the call."]
					#[doc = "- `call_hash`: The hash of the call to be made."]
					reject_announcement {
						delegate: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						call_hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 9)]
					#[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
					#[doc = "`add_proxy`."]
					#[doc = ""]
					#[doc = "Removes any corresponding announcement(s)."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `real`: The account that the proxy will make a call on behalf of."]
					#[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
					#[doc = "- `call`: The call to be made by the `real` account."]
					proxy_announced {
						delegate: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						real: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						force_proxy_type: ::core::option::Option<
							runtime_types::composable_traits::account_proxy::ProxyType,
						>,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "There are too many proxies registered or too many announcements pending."]
					TooMany,
					#[codec(index = 1)]
					#[doc = "Proxy registration not found."]
					NotFound,
					#[codec(index = 2)]
					#[doc = "Sender is not a proxy of the account to be proxied."]
					NotProxy,
					#[codec(index = 3)]
					#[doc = "A call which is incompatible with the proxy type's filter was attempted."]
					Unproxyable,
					#[codec(index = 4)]
					#[doc = "Account is already a proxy."]
					Duplicate,
					#[codec(index = 5)]
					#[doc = "Call may not be made by proxy because it may escalate its privileges."]
					NoPermission,
					#[codec(index = 6)]
					#[doc = "Announcement, if made at all, was made too recently."]
					Unannounced,
					#[codec(index = 7)]
					#[doc = "Cannot add self as proxy."]
					NoSelfProxy,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A proxy was executed correctly, with the given."]
					ProxyExecuted {
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 1)]
					#[doc = "A pure account has been created by new proxy with given"]
					#[doc = "disambiguation index and proxy type."]
					PureCreated {
						pure: ::subxt::ext::subxt_core::utils::AccountId32,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
						disambiguation_index: ::core::primitive::u16,
					},
					#[codec(index = 2)]
					#[doc = "An announcement was placed to make a call in the future."]
					Announced {
						real: ::subxt::ext::subxt_core::utils::AccountId32,
						proxy: ::subxt::ext::subxt_core::utils::AccountId32,
						call_hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 3)]
					#[doc = "A proxy was added."]
					ProxyAdded {
						delegator: ::subxt::ext::subxt_core::utils::AccountId32,
						delegatee: ::subxt::ext::subxt_core::utils::AccountId32,
						proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					#[doc = "A proxy was removed."]
					ProxyRemoved {
						delegator: ::subxt::ext::subxt_core::utils::AccountId32,
						delegatee: ::subxt::ext::subxt_core::utils::AccountId32,
						proxy_type: runtime_types::composable_traits::account_proxy::ProxyType,
						delay: ::core::primitive::u32,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct Announcement<_0, _1, _2> {
				pub real: _0,
				pub call_hash: _1,
				pub height: _2,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ProxyDefinition<_0, _1, _2> {
				pub delegate: _0,
				pub proxy_type: _1,
				pub delay: _2,
			}
		}
		pub mod pallet_referenda {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Propose a referendum on a privileged action."]
					#[doc = ""]
					#[doc = "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds"]
					#[doc = "  available."]
					#[doc = "- `proposal_origin`: The origin from which the proposal should be executed."]
					#[doc = "- `proposal`: The proposal."]
					#[doc = "- `enactment_moment`: The moment that the proposal should be enacted."]
					#[doc = ""]
					#[doc = "Emits `Submitted`."]
					submit {
						proposal_origin: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::OriginCaller,
						>,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::composable_runtime::RuntimeCall,
						>,
						enactment_moment:
							runtime_types::frame_support::traits::schedule::DispatchTime<
								::core::primitive::u32,
							>,
					},
					#[codec(index = 1)]
					#[doc = "Post the Decision Deposit for a referendum."]
					#[doc = ""]
					#[doc = "- `origin`: must be `Signed` and the account must have funds available for the"]
					#[doc = "  referendum's track's Decision Deposit."]
					#[doc = "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be"]
					#[doc = "  posted."]
					#[doc = ""]
					#[doc = "Emits `DecisionDepositPlaced`."]
					place_decision_deposit { index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "Refund the Decision Deposit for a closed referendum back to the depositor."]
					#[doc = ""]
					#[doc = "- `origin`: must be `Signed` or `Root`."]
					#[doc = "- `index`: The index of a closed referendum whose Decision Deposit has not yet been"]
					#[doc = "  refunded."]
					#[doc = ""]
					#[doc = "Emits `DecisionDepositRefunded`."]
					refund_decision_deposit { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					#[doc = "Cancel an ongoing referendum."]
					#[doc = ""]
					#[doc = "- `origin`: must be the `CancelOrigin`."]
					#[doc = "- `index`: The index of the referendum to be cancelled."]
					#[doc = ""]
					#[doc = "Emits `Cancelled`."]
					cancel { index: ::core::primitive::u32 },
					#[codec(index = 4)]
					#[doc = "Cancel an ongoing referendum and slash the deposits."]
					#[doc = ""]
					#[doc = "- `origin`: must be the `KillOrigin`."]
					#[doc = "- `index`: The index of the referendum to be cancelled."]
					#[doc = ""]
					#[doc = "Emits `Killed` and `DepositSlashed`."]
					kill { index: ::core::primitive::u32 },
					#[codec(index = 5)]
					#[doc = "Advance a referendum onto its next logical state. Only used internally."]
					#[doc = ""]
					#[doc = "- `origin`: must be `Root`."]
					#[doc = "- `index`: the referendum to be advanced."]
					nudge_referendum { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					#[doc = "Advance a track onto its next logical state. Only used internally."]
					#[doc = ""]
					#[doc = "- `origin`: must be `Root`."]
					#[doc = "- `track`: the track to be advanced."]
					#[doc = ""]
					#[doc = "Action item for when there is now one fewer referendum in the deciding phase and the"]
					#[doc = "`DecidingCount` is not yet updated. This means that we should either:"]
					#[doc = "- begin deciding another referendum (and leave `DecidingCount` alone); or"]
					#[doc = "- decrement `DecidingCount`."]
					one_fewer_deciding { track: ::core::primitive::u16 },
					#[codec(index = 7)]
					#[doc = "Refund the Submission Deposit for a closed referendum back to the depositor."]
					#[doc = ""]
					#[doc = "- `origin`: must be `Signed` or `Root`."]
					#[doc = "- `index`: The index of a closed referendum whose Submission Deposit has not yet been"]
					#[doc = "  refunded."]
					#[doc = ""]
					#[doc = "Emits `SubmissionDepositRefunded`."]
					refund_submission_deposit { index: ::core::primitive::u32 },
					#[codec(index = 8)]
					#[doc = "Set or clear metadata of a referendum."]
					#[doc = ""]
					#[doc = "Parameters:"]
					#[doc = "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a"]
					#[doc = "  metadata of a finished referendum."]
					#[doc = "- `index`:  The index of a referendum to set or clear metadata for."]
					#[doc = "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."]
					set_metadata {
						index: ::core::primitive::u32,
						maybe_hash: ::core::option::Option<::subxt::ext::subxt_core::utils::H256>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Referendum is not ongoing."]
					NotOngoing,
					#[codec(index = 1)]
					#[doc = "Referendum's decision deposit is already paid."]
					HasDeposit,
					#[codec(index = 2)]
					#[doc = "The track identifier given was invalid."]
					BadTrack,
					#[codec(index = 3)]
					#[doc = "There are already a full complement of referenda in progress for this track."]
					Full,
					#[codec(index = 4)]
					#[doc = "The queue of the track is empty."]
					QueueEmpty,
					#[codec(index = 5)]
					#[doc = "The referendum index provided is invalid in this context."]
					BadReferendum,
					#[codec(index = 6)]
					#[doc = "There was nothing to do in the advancement."]
					NothingToDo,
					#[codec(index = 7)]
					#[doc = "No track exists for the proposal origin."]
					NoTrack,
					#[codec(index = 8)]
					#[doc = "Any deposit cannot be refunded until after the decision is over."]
					Unfinished,
					#[codec(index = 9)]
					#[doc = "The deposit refunder is not the depositor."]
					NoPermission,
					#[codec(index = 10)]
					#[doc = "The deposit cannot be refunded since none was made."]
					NoDeposit,
					#[codec(index = 11)]
					#[doc = "The referendum status is invalid for this operation."]
					BadStatus,
					#[codec(index = 12)]
					#[doc = "The preimage does not exist."]
					PreimageNotExist,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A referendum has been submitted."]
					Submitted {
						index: ::core::primitive::u32,
						track: ::core::primitive::u16,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 1)]
					#[doc = "The decision deposit has been placed."]
					DecisionDepositPlaced {
						index: ::core::primitive::u32,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					#[doc = "The decision deposit has been refunded."]
					DecisionDepositRefunded {
						index: ::core::primitive::u32,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					#[doc = "A deposit has been slashaed."]
					DepositSlashed {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "A referendum has moved into the deciding phase."]
					DecisionStarted {
						index: ::core::primitive::u32,
						track: ::core::primitive::u16,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::composable_runtime::RuntimeCall,
						>,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 5)]
					ConfirmStarted { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					ConfirmAborted { index: ::core::primitive::u32 },
					#[codec(index = 7)]
					#[doc = "A referendum has ended its confirmation phase and is ready for approval."]
					Confirmed {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 8)]
					#[doc = "A referendum has been approved and its proposal has been scheduled."]
					Approved { index: ::core::primitive::u32 },
					#[codec(index = 9)]
					#[doc = "A proposal has been rejected by referendum."]
					Rejected {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 10)]
					#[doc = "A referendum has been timed out without being decided."]
					TimedOut {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 11)]
					#[doc = "A referendum has been cancelled."]
					Cancelled {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 12)]
					#[doc = "A referendum has been killed."]
					Killed {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 13)]
					#[doc = "The submission deposit has been refunded."]
					SubmissionDepositRefunded {
						index: ::core::primitive::u32,
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 14)]
					#[doc = "Metadata for a referendum has been set."]
					MetadataSet {
						index: ::core::primitive::u32,
						hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 15)]
					#[doc = "Metadata for a referendum has been cleared."]
					MetadataCleared {
						index: ::core::primitive::u32,
						hash: ::subxt::ext::subxt_core::utils::H256,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Curve {
					#[codec(index = 0)]
					LinearDecreasing {
						length: runtime_types::sp_arithmetic::per_things::Perbill,
						floor: runtime_types::sp_arithmetic::per_things::Perbill,
						ceil: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 1)]
					SteppedDecreasing {
						begin: runtime_types::sp_arithmetic::per_things::Perbill,
						end: runtime_types::sp_arithmetic::per_things::Perbill,
						step: runtime_types::sp_arithmetic::per_things::Perbill,
						period: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 2)]
					Reciprocal {
						factor: runtime_types::sp_arithmetic::fixed_point::FixedI64,
						x_offset: runtime_types::sp_arithmetic::fixed_point::FixedI64,
						y_offset: runtime_types::sp_arithmetic::fixed_point::FixedI64,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct DecidingStatus<_0> {
					pub since: _0,
					pub confirming: ::core::option::Option<_0>,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Deposit<_0, _1> {
					pub who: _0,
					pub amount: _1,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum ReferendumInfo<_0, _1, _2, _3, _4, _5, _6, _7> {
					#[codec(index = 0)]
					Ongoing(
						runtime_types::pallet_referenda::types::ReferendumStatus<
							_0,
							_1,
							_2,
							_3,
							_4,
							_5,
							_6,
							_7,
						>,
					),
					#[codec(index = 1)]
					Approved(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 2)]
					Rejected(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 3)]
					Cancelled(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 4)]
					TimedOut(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 5)]
					Killed(_2),
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct ReferendumStatus<_0, _1, _2, _3, _4, _5, _6, _7> {
					pub track: _0,
					pub origin: _1,
					pub proposal: _3,
					pub enactment: runtime_types::frame_support::traits::schedule::DispatchTime<_2>,
					pub submitted: _2,
					pub submission_deposit: runtime_types::pallet_referenda::types::Deposit<_6, _4>,
					pub decision_deposit: ::core::option::Option<
						runtime_types::pallet_referenda::types::Deposit<_6, _4>,
					>,
					pub deciding: ::core::option::Option<
						runtime_types::pallet_referenda::types::DecidingStatus<_2>,
					>,
					pub tally: _5,
					pub in_queue: ::core::primitive::bool,
					pub alarm: ::core::option::Option<(_2, _7)>,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct TrackInfo<_0, _1> {
					pub name: ::subxt::ext::subxt_core::alloc::string::String,
					pub max_deciding: ::core::primitive::u32,
					pub decision_deposit: _0,
					pub prepare_period: _1,
					pub decision_period: _1,
					pub confirm_period: _1,
					pub min_enactment_period: _1,
					pub min_approval: runtime_types::pallet_referenda::types::Curve,
					pub min_support: runtime_types::pallet_referenda::types::Curve,
				}
			}
		}
		pub mod pallet_scheduler {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Anonymously schedule a task."]
					schedule {
						when: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Cancel an anonymously scheduled task."]
					cancel { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "Schedule a named task."]
					schedule_named {
						id: [::core::primitive::u8; 32usize],
						when: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 3)]
					#[doc = "Cancel a named scheduled task."]
					cancel_named { id: [::core::primitive::u8; 32usize] },
					#[codec(index = 4)]
					#[doc = "Anonymously schedule a task after a delay."]
					schedule_after {
						after: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 5)]
					#[doc = "Schedule a named task after a delay."]
					schedule_named_after {
						id: [::core::primitive::u8; 32usize],
						after: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Failed to schedule a call"]
					FailedToSchedule,
					#[codec(index = 1)]
					#[doc = "Cannot find the scheduled call."]
					NotFound,
					#[codec(index = 2)]
					#[doc = "Given target block number is in the past."]
					TargetBlockNumberInPast,
					#[codec(index = 3)]
					#[doc = "Reschedule failed because it does not change scheduled time."]
					RescheduleNoChange,
					#[codec(index = 4)]
					#[doc = "Attempt to use a non-named function on a named task."]
					Named,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Events type."]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Scheduled some task."]
					Scheduled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "Canceled some task."]
					Canceled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					#[doc = "Dispatched some task."]
					Dispatched {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 3)]
					#[doc = "The call for the provided hash was not found so the task has been aborted."]
					CallUnavailable {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 4)]
					#[doc = "The given task was unable to be renewed since the agenda is full at that block."]
					PeriodicFailed {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 5)]
					#[doc = "The given task can never be executed since it is overweight."]
					PermanentlyOverweight {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct Scheduled<_0, _1, _2, _3, _4> {
				pub maybe_id: ::core::option::Option<_0>,
				pub priority: ::core::primitive::u8,
				pub call: _1,
				pub maybe_periodic: ::core::option::Option<(_2, _2)>,
				pub origin: _3,
				#[codec(skip)]
				pub __ignore: ::core::marker::PhantomData<_4>,
			}
		}
		pub mod pallet_session {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Sets the session key(s) of the function caller to `keys`."]
					#[doc = "Allows an account to set its session key prior to becoming a validator."]
					#[doc = "This doesn't take effect until the next session."]
					#[doc = ""]
					#[doc = "The dispatch origin of this function must be signed."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is"]
					#[doc = "  fixed."]
					set_keys {
						keys: runtime_types::composable_runtime::opaque::SessionKeys,
						proof: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					#[doc = "Removes any session key(s) of the function caller."]
					#[doc = ""]
					#[doc = "This doesn't take effect until the next session."]
					#[doc = ""]
					#[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
					#[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
					#[doc = "means being a controller account) or directly convertible into a validator ID (which"]
					#[doc = "usually means being a stash account)."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- `O(1)` in number of key types. Actual cost depends on the number of length of"]
					#[doc = "  `T::Keys::key_ids()` which is fixed."]
					purge_keys,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Error for the session pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Invalid ownership proof."]
					InvalidProof,
					#[codec(index = 1)]
					#[doc = "No associated validator ID for account."]
					NoAssociatedValidatorId,
					#[codec(index = 2)]
					#[doc = "Registered duplicate key."]
					DuplicatedKey,
					#[codec(index = 3)]
					#[doc = "No keys are associated with this account."]
					NoKeys,
					#[codec(index = 4)]
					#[doc = "Key setting account is not live, so it's impossible to associate keys."]
					NoAccount,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "New session has happened. Note that the argument is the session index, not the"]
					#[doc = "block number as the type might suggest."]
					NewSession { session_index: ::core::primitive::u32 },
				}
			}
		}
		pub mod pallet_sudo {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- O(1)."]
					sudo {
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
					#[doc = "This function does not check the weight of the call, and instead allows the"]
					#[doc = "Sudo user to specify the weight of the call."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- O(1)."]
					sudo_unchecked_weight {
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
						weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 2)]
					#[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
					#[doc = "key."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- O(1)."]
					set_key {
						new: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 3)]
					#[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
					#[doc = "a given account."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- O(1)."]
					sudo_as {
						who: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Error for the Sudo pallet"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Sender must be the Sudo account"]
					RequireSudo,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A sudo just took place. \\[result\\]"]
					Sudid {
						sudo_result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 1)]
					#[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
					KeyChanged {
						old_sudoer:
							::core::option::Option<::subxt::ext::subxt_core::utils::AccountId32>,
					},
					#[codec(index = 2)]
					#[doc = "A sudo just took place. \\[result\\]"]
					SudoAsDone {
						sudo_result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
				}
			}
		}
		pub mod pallet_timestamp {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Set the current time."]
					#[doc = ""]
					#[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
					#[doc = "phase, if this call hasn't been invoked by that time."]
					#[doc = ""]
					#[doc = "The timestamp should be greater than the previous one by the amount specified by"]
					#[doc = "`MinimumPeriod`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be `Inherent`."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
					#[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
					#[doc = "  `on_finalize`)"]
					#[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
					set {
						#[codec(compact)]
						now: ::core::primitive::u64,
					},
				}
			}
		}
		pub mod pallet_transaction_payment {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
					#[doc = "has been paid by `who`."]
					TransactionFeePaid {
						who: ::subxt::ext::subxt_core::utils::AccountId32,
						actual_fee: ::core::primitive::u128,
						tip: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum Releases {
				#[codec(index = 0)]
				V1Ancient,
				#[codec(index = 1)]
				V2,
			}
		}
		pub mod pallet_treasury {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
					#[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
					#[doc = "proposal is awarded."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- O(1)"]
					propose_spend {
						#[codec(compact)]
						value: ::core::primitive::u128,
						beneficiary: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Reject a proposed spend. The original deposit will be slashed."]
					#[doc = ""]
					#[doc = "May only be called from `T::RejectOrigin`."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- O(1)"]
					reject_proposal {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
					#[doc = "and the original deposit will be returned."]
					#[doc = ""]
					#[doc = "May only be called from `T::ApproveOrigin`."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = " - O(1)."]
					approve_proposal {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Propose and approve a spend of treasury funds."]
					#[doc = ""]
					#[doc = "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`."]
					#[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
					#[doc = "- `beneficiary`: The destination account for the transfer."]
					#[doc = ""]
					#[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
					#[doc = "beneficiary."]
					spend {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						beneficiary: ::subxt::ext::subxt_core::utils::MultiAddress<
							::subxt::ext::subxt_core::utils::AccountId32,
							::core::primitive::u32,
						>,
					},
					#[codec(index = 4)]
					#[doc = "Force a previously approved proposal to be removed from the approval queue."]
					#[doc = "The original deposit will no longer be returned."]
					#[doc = ""]
					#[doc = "May only be called from `T::RejectOrigin`."]
					#[doc = "- `proposal_id`: The index of a proposal"]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- O(A) where `A` is the number of approvals"]
					#[doc = ""]
					#[doc = "Errors:"]
					#[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
					#[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
					#[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
					remove_approval {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Error for the treasury pallet."]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Proposer's balance is too low."]
					InsufficientProposersBalance,
					#[codec(index = 1)]
					#[doc = "No proposal or bounty at that index."]
					InvalidIndex,
					#[codec(index = 2)]
					#[doc = "Too many approvals in the queue."]
					TooManyApprovals,
					#[codec(index = 3)]
					#[doc = "The spend origin is valid but the amount it is allowed to spend is lower than the"]
					#[doc = "amount to be spent."]
					InsufficientPermission,
					#[codec(index = 4)]
					#[doc = "Proposal has not been approved."]
					ProposalNotApproved,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "New proposal."]
					Proposed { proposal_index: ::core::primitive::u32 },
					#[codec(index = 1)]
					#[doc = "We have ended a spend period and will now allocate funds."]
					Spending { budget_remaining: ::core::primitive::u128 },
					#[codec(index = 2)]
					#[doc = "Some funds have been allocated."]
					Awarded {
						proposal_index: ::core::primitive::u32,
						award: ::core::primitive::u128,
						account: ::subxt::ext::subxt_core::utils::AccountId32,
					},
					#[codec(index = 3)]
					#[doc = "A proposal was rejected; funds were slashed."]
					Rejected {
						proposal_index: ::core::primitive::u32,
						slashed: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					#[doc = "Some of our funds have been burnt."]
					Burnt { burnt_funds: ::core::primitive::u128 },
					#[codec(index = 5)]
					#[doc = "Spending has finished; this is the amount that rolls over until next spend."]
					Rollover { rollover_balance: ::core::primitive::u128 },
					#[codec(index = 6)]
					#[doc = "Some funds have been deposited."]
					Deposit { value: ::core::primitive::u128 },
					#[codec(index = 7)]
					#[doc = "A new spend proposal has been approved."]
					SpendApproved {
						proposal_index: ::core::primitive::u32,
						amount: ::core::primitive::u128,
						beneficiary: ::subxt::ext::subxt_core::utils::AccountId32,
					},
					#[codec(index = 8)]
					#[doc = "The inactive funds of the pallet have been updated."]
					UpdatedInactive {
						reactivated: ::core::primitive::u128,
						deactivated: ::core::primitive::u128,
					},
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct Proposal<_0, _1> {
				pub proposer: _0,
				pub value: _1,
				pub beneficiary: _0,
				pub bond: _1,
			}
		}
		pub mod pallet_utility {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Send a batch of dispatch calls."]
					#[doc = ""]
					#[doc = "May be called from any origin except `None`."]
					#[doc = ""]
					#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
					#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
					#[doc = ""]
					#[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
					#[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- O(C) where C is the number of calls to be batched."]
					#[doc = ""]
					#[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
					#[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
					#[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
					#[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
					#[doc = "event is deposited."]
					batch {
						calls: ::subxt::ext::subxt_core::alloc::vec::Vec<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Send a call through an indexed pseudonym of the sender."]
					#[doc = ""]
					#[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
					#[doc = "use the same filter as the origin of this call."]
					#[doc = ""]
					#[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
					#[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
					#[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
					#[doc = "in the Multisig pallet instead."]
					#[doc = ""]
					#[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Signed_."]
					as_derivative {
						index: ::core::primitive::u16,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 2)]
					#[doc = "Send a batch of dispatch calls and atomically execute them."]
					#[doc = "The whole transaction will rollback and fail if any of the calls failed."]
					#[doc = ""]
					#[doc = "May be called from any origin except `None`."]
					#[doc = ""]
					#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
					#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
					#[doc = ""]
					#[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
					#[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- O(C) where C is the number of calls to be batched."]
					batch_all {
						calls: ::subxt::ext::subxt_core::alloc::vec::Vec<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 3)]
					#[doc = "Dispatches a function call with a provided origin."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Root_."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- O(1)."]
					dispatch_as {
						as_origin: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::OriginCaller,
						>,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 4)]
					#[doc = "Send a batch of dispatch calls."]
					#[doc = "Unlike `batch`, it allows errors and won't interrupt."]
					#[doc = ""]
					#[doc = "May be called from any origin except `None`."]
					#[doc = ""]
					#[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
					#[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
					#[doc = ""]
					#[doc = "If origin is root then the calls are dispatch without checking origin filter. (This"]
					#[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
					#[doc = ""]
					#[doc = "## Complexity"]
					#[doc = "- O(C) where C is the number of calls to be batched."]
					force_batch {
						calls: ::subxt::ext::subxt_core::alloc::vec::Vec<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 5)]
					#[doc = "Dispatch a function call with a specified weight."]
					#[doc = ""]
					#[doc = "This function does not check the weight of the call, and instead allows the"]
					#[doc = "Root origin to specify the weight of the call."]
					#[doc = ""]
					#[doc = "The dispatch origin for this call must be _Root_."]
					with_weight {
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
						weight: runtime_types::sp_weights::weight_v2::Weight,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "Too many calls batched."]
					TooManyCalls,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
					#[doc = "well as the error."]
					BatchInterrupted {
						index: ::core::primitive::u32,
						error: runtime_types::sp_runtime::DispatchError,
					},
					#[codec(index = 1)]
					#[doc = "Batch of dispatches completed fully with no error."]
					BatchCompleted,
					#[codec(index = 2)]
					#[doc = "Batch of dispatches completed but has errors."]
					BatchCompletedWithErrors,
					#[codec(index = 3)]
					#[doc = "A single item within a Batch of dispatches has completed with no error."]
					ItemCompleted,
					#[codec(index = 4)]
					#[doc = "A single item within a Batch of dispatches has completed with error."]
					ItemFailed { error: runtime_types::sp_runtime::DispatchError },
					#[codec(index = 5)]
					#[doc = "A call was dispatched."]
					DispatchedAs {
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
				}
			}
		}
		pub mod pallet_whitelist {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					whitelist_call { call_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 1)]
					remove_whitelisted_call { call_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 2)]
					dispatch_whitelisted_call {
						call_hash: ::subxt::ext::subxt_core::utils::H256,
						call_encoded_len: ::core::primitive::u32,
						call_weight_witness: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 3)]
					dispatch_whitelisted_call_with_preimage {
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::composable_runtime::RuntimeCall,
						>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The preimage of the call hash could not be loaded."]
					UnavailablePreImage,
					#[codec(index = 1)]
					#[doc = "The call could not be decoded."]
					UndecodableCall,
					#[codec(index = 2)]
					#[doc = "The weight of the decoded call was higher than the witness."]
					InvalidCallWeightWitness,
					#[codec(index = 3)]
					#[doc = "The call was not whitelisted."]
					CallIsNotWhitelisted,
					#[codec(index = 4)]
					#[doc = "The call was already whitelisted; No-Op."]
					CallAlreadyWhitelisted,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					CallWhitelisted { call_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 1)]
					WhitelistedCallRemoved { call_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 2)]
					WhitelistedCallDispatched {
						call_hash: ::subxt::ext::subxt_core::utils::H256,
						result: ::core::result::Result<
							runtime_types::frame_support::dispatch::PostDispatchInfo,
							runtime_types::sp_runtime::DispatchErrorWithPostInfo<
								runtime_types::frame_support::dispatch::PostDispatchInfo,
							>,
						>,
					},
				}
			}
		}
		pub mod pallet_xcm {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					send {
						dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						message: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedXcm,
						>,
					},
					#[codec(index = 1)]
					#[doc = "Teleport some assets from the local chain to some destination chain."]
					#[doc = ""]
					#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
					#[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
					#[doc = "with all fees taken as needed from the asset."]
					#[doc = ""]
					#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
					#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
					#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
					#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
					#[doc = "  an `AccountId32` value."]
					#[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
					#[doc = "  `dest` side. May not be empty."]
					#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
					#[doc = "  fees."]
					teleport_assets {
						dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiAssets,
						>,
						fee_asset_item: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					#[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
					#[doc = "chain and forward a notification XCM."]
					#[doc = ""]
					#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
					#[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
					#[doc = "with all fees taken as needed from the asset."]
					#[doc = ""]
					#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
					#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
					#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
					#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
					#[doc = "  an `AccountId32` value."]
					#[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
					#[doc = "  `dest` side."]
					#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
					#[doc = "  fees."]
					reserve_transfer_assets {
						dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiAssets,
						>,
						fee_asset_item: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					#[doc = "Execute an XCM message from a local, signed, origin."]
					#[doc = ""]
					#[doc = "An event is deposited indicating whether `msg` could be executed completely or only"]
					#[doc = "partially."]
					#[doc = ""]
					#[doc = "No more than `max_weight` will be used in its attempted execution. If this is less than the"]
					#[doc = "maximum amount of weight that the message could take to be executed, then no execution"]
					#[doc = "attempt will be made."]
					#[doc = ""]
					#[doc = "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully"]
					#[doc = "to completion; only that *some* of it was executed."]
					execute {
						message: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedXcm,
						>,
						max_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 4)]
					#[doc = "Extoll that a particular destination can be communicated with through a particular"]
					#[doc = "version of XCM."]
					#[doc = ""]
					#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
					#[doc = "- `location`: The destination that is being described."]
					#[doc = "- `xcm_version`: The latest version of XCM that `location` supports."]
					force_xcm_version {
						location: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::v3::multilocation::MultiLocation,
						>,
						xcm_version: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					#[doc = "Set a safe XCM version (the version that XCM should be encoded with if the most recent"]
					#[doc = "version a destination can accept is unknown)."]
					#[doc = ""]
					#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
					#[doc = "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."]
					force_default_xcm_version {
						maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 6)]
					#[doc = "Ask a location to notify us regarding their XCM version and any changes to it."]
					#[doc = ""]
					#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
					#[doc = "- `location`: The location to which we should subscribe for XCM version notifications."]
					force_subscribe_version_notify {
						location: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
					},
					#[codec(index = 7)]
					#[doc = "Require that a particular destination should no longer notify us regarding any XCM"]
					#[doc = "version changes."]
					#[doc = ""]
					#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
					#[doc = "- `location`: The location to which we are currently subscribed for XCM version"]
					#[doc = "  notifications which we no longer desire."]
					force_unsubscribe_version_notify {
						location: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
					},
					#[codec(index = 8)]
					#[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
					#[doc = "chain and forward a notification XCM."]
					#[doc = ""]
					#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
					#[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
					#[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
					#[doc = "at risk."]
					#[doc = ""]
					#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
					#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
					#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
					#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
					#[doc = "  an `AccountId32` value."]
					#[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
					#[doc = "  `dest` side."]
					#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
					#[doc = "  fees."]
					#[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
					limited_reserve_transfer_assets {
						dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiAssets,
						>,
						fee_asset_item: ::core::primitive::u32,
						weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 9)]
					#[doc = "Teleport some assets from the local chain to some destination chain."]
					#[doc = ""]
					#[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
					#[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
					#[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
					#[doc = "at risk."]
					#[doc = ""]
					#[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
					#[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
					#[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
					#[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
					#[doc = "  an `AccountId32` value."]
					#[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
					#[doc = "  `dest` side. May not be empty."]
					#[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
					#[doc = "  fees."]
					#[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
					limited_teleport_assets {
						dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiLocation,
						>,
						assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedMultiAssets,
						>,
						fee_asset_item: ::core::primitive::u32,
						weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 10)]
					#[doc = "Set or unset the global suspension state of the XCM executor."]
					#[doc = ""]
					#[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
					#[doc = "- `suspended`: `true` to suspend, `false` to resume."]
					force_suspension { suspended: ::core::primitive::bool },
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "The desired destination was unreachable, generally because there is a no way of routing"]
					#[doc = "to it."]
					Unreachable,
					#[codec(index = 1)]
					#[doc = "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps"]
					#[doc = "a lack of space for buffering the message."]
					SendFailure,
					#[codec(index = 2)]
					#[doc = "The message execution fails the filter."]
					Filtered,
					#[codec(index = 3)]
					#[doc = "The message's weight could not be determined."]
					UnweighableMessage,
					#[codec(index = 4)]
					#[doc = "The destination `MultiLocation` provided cannot be inverted."]
					DestinationNotInvertible,
					#[codec(index = 5)]
					#[doc = "The assets to be sent are empty."]
					Empty,
					#[codec(index = 6)]
					#[doc = "Could not re-anchor the assets to declare the fees for the destination chain."]
					CannotReanchor,
					#[codec(index = 7)]
					#[doc = "Too many assets have been attempted for transfer."]
					TooManyAssets,
					#[codec(index = 8)]
					#[doc = "Origin is invalid for sending."]
					InvalidOrigin,
					#[codec(index = 9)]
					#[doc = "The version of the `Versioned` value used is not able to be interpreted."]
					BadVersion,
					#[codec(index = 10)]
					#[doc = "The given location could not be used (e.g. because it cannot be expressed in the"]
					#[doc = "desired version of XCM)."]
					BadLocation,
					#[codec(index = 11)]
					#[doc = "The referenced subscription could not be found."]
					NoSubscription,
					#[codec(index = 12)]
					#[doc = "The location is invalid since it already has a subscription from us."]
					AlreadySubscribed,
					#[codec(index = 13)]
					#[doc = "Invalid asset for the operation."]
					InvalidAsset,
					#[codec(index = 14)]
					#[doc = "The owner does not own (all) of the asset that they wish to do the operation on."]
					LowBalance,
					#[codec(index = 15)]
					#[doc = "The asset owner has too many locks on the asset."]
					TooManyLocks,
					#[codec(index = 16)]
					#[doc = "The given account is not an identifiable sovereign account for any location."]
					AccountNotSovereign,
					#[codec(index = 17)]
					#[doc = "The operation required fees to be paid which the initiator could not meet."]
					FeesNotMet,
					#[codec(index = 18)]
					#[doc = "A remote lock with the corresponding data could not be found."]
					LockNotFound,
					#[codec(index = 19)]
					#[doc = "The unlock operation cannot succeed because there are still consumers of the lock."]
					InUse,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Execution of an XCM message was attempted."]
					#[doc = ""]
					#[doc = "\\[ outcome \\]"]
					Attempted(runtime_types::xcm::v3::traits::Outcome),
					#[codec(index = 1)]
					#[doc = "A XCM message was sent."]
					#[doc = ""]
					#[doc = "\\[ origin, destination, message \\]"]
					Sent(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::v3::Xcm,
					),
					#[codec(index = 2)]
					#[doc = "Query response received which does not match a registered query. This may be because a"]
					#[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
					#[doc = "because the query timed out."]
					#[doc = ""]
					#[doc = "\\[ origin location, id \\]"]
					UnexpectedResponse(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u64,
					),
					#[codec(index = 3)]
					#[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
					#[doc = "no registered notification call."]
					#[doc = ""]
					#[doc = "\\[ id, response \\]"]
					ResponseReady(::core::primitive::u64, runtime_types::xcm::v3::Response),
					#[codec(index = 4)]
					#[doc = "Query response has been received and query is removed. The registered notification has"]
					#[doc = "been dispatched and executed successfully."]
					#[doc = ""]
					#[doc = "\\[ id, pallet index, call index \\]"]
					Notified(::core::primitive::u64, ::core::primitive::u8, ::core::primitive::u8),
					#[codec(index = 5)]
					#[doc = "Query response has been received and query is removed. The registered notification could"]
					#[doc = "not be dispatched because the dispatch weight is greater than the maximum weight"]
					#[doc = "originally budgeted by this runtime for the query result."]
					#[doc = ""]
					#[doc = "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"]
					NotifyOverweight(
						::core::primitive::u64,
						::core::primitive::u8,
						::core::primitive::u8,
						runtime_types::sp_weights::weight_v2::Weight,
						runtime_types::sp_weights::weight_v2::Weight,
					),
					#[codec(index = 6)]
					#[doc = "Query response has been received and query is removed. There was a general error with"]
					#[doc = "dispatching the notification call."]
					#[doc = ""]
					#[doc = "\\[ id, pallet index, call index \\]"]
					NotifyDispatchError(
						::core::primitive::u64,
						::core::primitive::u8,
						::core::primitive::u8,
					),
					#[codec(index = 7)]
					#[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
					#[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
					#[doc = "is not `(origin, QueryId, Response)`."]
					#[doc = ""]
					#[doc = "\\[ id, pallet index, call index \\]"]
					NotifyDecodeFailed(
						::core::primitive::u64,
						::core::primitive::u8,
						::core::primitive::u8,
					),
					#[codec(index = 8)]
					#[doc = "Expected query response has been received but the origin location of the response does"]
					#[doc = "not match that expected. The query remains registered for a later, valid, response to"]
					#[doc = "be received and acted upon."]
					#[doc = ""]
					#[doc = "\\[ origin location, id, expected location \\]"]
					InvalidResponder(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u64,
						::core::option::Option<
							runtime_types::xcm::v3::multilocation::MultiLocation,
						>,
					),
					#[codec(index = 9)]
					#[doc = "Expected query response has been received but the expected origin location placed in"]
					#[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
					#[doc = ""]
					#[doc = "This is unexpected (since a location placed in storage in a previously executing"]
					#[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
					#[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
					#[doc = "needed."]
					#[doc = ""]
					#[doc = "\\[ origin location, id \\]"]
					InvalidResponderVersion(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u64,
					),
					#[codec(index = 10)]
					#[doc = "Received query response has been read and removed."]
					#[doc = ""]
					#[doc = "\\[ id \\]"]
					ResponseTaken(::core::primitive::u64),
					#[codec(index = 11)]
					#[doc = "Some assets have been placed in an asset trap."]
					#[doc = ""]
					#[doc = "\\[ hash, origin, assets \\]"]
					AssetsTrapped(
						::subxt::ext::subxt_core::utils::H256,
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::VersionedMultiAssets,
					),
					#[codec(index = 12)]
					#[doc = "An XCM version change notification message has been attempted to be sent."]
					#[doc = ""]
					#[doc = "The cost of sending it (borne by the chain) is included."]
					#[doc = ""]
					#[doc = "\\[ destination, result, cost \\]"]
					VersionChangeNotified(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u32,
						runtime_types::xcm::v3::multiasset::MultiAssets,
					),
					#[codec(index = 13)]
					#[doc = "The supported version of a location has been changed. This might be through an"]
					#[doc = "automatic notification or a manual intervention."]
					#[doc = ""]
					#[doc = "\\[ location, XCM version \\]"]
					SupportedVersionChanged(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u32,
					),
					#[codec(index = 14)]
					#[doc = "A given location which had a version change subscription was dropped owing to an error"]
					#[doc = "sending the notification to it."]
					#[doc = ""]
					#[doc = "\\[ location, query ID, error \\]"]
					NotifyTargetSendFail(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u64,
						runtime_types::xcm::v3::traits::Error,
					),
					#[codec(index = 15)]
					#[doc = "A given location which had a version change subscription was dropped owing to an error"]
					#[doc = "migrating the location to our new XCM format."]
					#[doc = ""]
					#[doc = "\\[ location, query ID \\]"]
					NotifyTargetMigrationFail(
						runtime_types::xcm::VersionedMultiLocation,
						::core::primitive::u64,
					),
					#[codec(index = 16)]
					#[doc = "Expected query response has been received but the expected querier location placed in"]
					#[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
					#[doc = ""]
					#[doc = "This is unexpected (since a location placed in storage in a previously executing"]
					#[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
					#[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
					#[doc = "needed."]
					#[doc = ""]
					#[doc = "\\[ origin location, id \\]"]
					InvalidQuerierVersion(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u64,
					),
					#[codec(index = 17)]
					#[doc = "Expected query response has been received but the querier location of the response does"]
					#[doc = "not match the expected. The query remains registered for a later, valid, response to"]
					#[doc = "be received and acted upon."]
					#[doc = ""]
					#[doc = "\\[ origin location, id, expected querier, maybe actual querier \\]"]
					InvalidQuerier(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::primitive::u64,
						runtime_types::xcm::v3::multilocation::MultiLocation,
						::core::option::Option<
							runtime_types::xcm::v3::multilocation::MultiLocation,
						>,
					),
					#[codec(index = 18)]
					#[doc = "A remote has requested XCM version change notification from us and we have honored it."]
					#[doc = "A version information message is sent to them and its cost is included."]
					#[doc = ""]
					#[doc = "\\[ destination location, cost \\]"]
					VersionNotifyStarted(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::v3::multiasset::MultiAssets,
					),
					#[codec(index = 19)]
					#[doc = "We have requested that a remote chain sends us XCM version change notifications."]
					#[doc = ""]
					#[doc = "\\[ destination location, cost \\]"]
					VersionNotifyRequested(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::v3::multiasset::MultiAssets,
					),
					#[codec(index = 20)]
					#[doc = "We have requested that a remote chain stops sending us XCM version change notifications."]
					#[doc = ""]
					#[doc = "\\[ destination location, cost \\]"]
					VersionNotifyUnrequested(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::v3::multiasset::MultiAssets,
					),
					#[codec(index = 21)]
					#[doc = "Fees were paid from a location for an operation (often for using `SendXcm`)."]
					#[doc = ""]
					#[doc = "\\[ paying location, fees \\]"]
					FeesPaid(
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::v3::multiasset::MultiAssets,
					),
					#[codec(index = 22)]
					#[doc = "Some assets have been claimed from an asset trap"]
					#[doc = ""]
					#[doc = "\\[ hash, origin, assets \\]"]
					AssetsClaimed(
						::subxt::ext::subxt_core::utils::H256,
						runtime_types::xcm::v3::multilocation::MultiLocation,
						runtime_types::xcm::VersionedMultiAssets,
					),
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Origin {
					#[codec(index = 0)]
					Xcm(runtime_types::xcm::v3::multilocation::MultiLocation),
					#[codec(index = 1)]
					Response(runtime_types::xcm::v3::multilocation::MultiLocation),
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum QueryStatus<_0> {
					#[codec(index = 0)]
					Pending {
						responder: runtime_types::xcm::VersionedMultiLocation,
						maybe_match_querier:
							::core::option::Option<runtime_types::xcm::VersionedMultiLocation>,
						maybe_notify:
							::core::option::Option<(::core::primitive::u8, ::core::primitive::u8)>,
						timeout: _0,
					},
					#[codec(index = 1)]
					VersionNotifier {
						origin: runtime_types::xcm::VersionedMultiLocation,
						is_active: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					Ready { response: runtime_types::xcm::VersionedResponse, at: _0 },
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct RemoteLockedFungibleRecord<_0> {
					pub amount: ::core::primitive::u128,
					pub owner: runtime_types::xcm::VersionedMultiLocation,
					pub locker: runtime_types::xcm::VersionedMultiLocation,
					pub consumers: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						_0,
						::core::primitive::u128,
					)>,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum VersionMigrationStage {
					#[codec(index = 0)]
					MigrateSupportedVersion,
					#[codec(index = 1)]
					MigrateVersionNotifiers,
					#[codec(index = 2)]
					NotifyCurrentTargets(
						::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
					),
					#[codec(index = 3)]
					MigrateAndNotifyOldTargets,
				}
			}
		}
		pub mod pallet_xcm_helper {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {
					#[codec(index = 0)]
					#[doc = "Update xcm fees amount to be used in xcm.Withdraw message"]
					update_xcm_weight_fee {
						xcm_call: runtime_types::pallet_xcm_helper::ump::XcmCall,
						xcm_weight_fee_misc:
							runtime_types::pallet_xcm_helper::ump::XcmWeightFeeMisc<
								runtime_types::sp_weights::weight_v2::Weight,
								::core::primitive::u128,
							>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
				pub enum Error {
					#[codec(index = 0)]
					#[doc = "`MultiLocation` value ascend more parents than known ancestors of local location."]
					MultiLocationNotInvertible,
					#[codec(index = 1)]
					#[doc = "XcmWeightMisc cannot have zero value"]
					ZeroXcmWeightMisc,
					#[codec(index = 2)]
					#[doc = "Xcm fees cannot be zero"]
					ZeroXcmFees,
					#[codec(index = 3)]
					#[doc = "Insufficient xcm fees"]
					InsufficientXcmFees,
					#[codec(index = 4)]
					#[doc = "The message and destination was recognized as being reachable but"]
					#[doc = "the operation could not be completed."]
					SendFailure,
					#[codec(index = 5)]
					#[doc = "Can not convert account success"]
					ConvertAccountError,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
				pub enum Event {
					#[codec(index = 0)]
					#[doc = "Xcm fee and weight updated"]
					XcmWeightFeeUpdated(
						runtime_types::pallet_xcm_helper::ump::XcmWeightFeeMisc<
							runtime_types::sp_weights::weight_v2::Weight,
							::core::primitive::u128,
						>,
					),
				}
			}
			pub mod ump {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum RewardDestination<_0> {
					#[codec(index = 0)]
					Staked,
					#[codec(index = 1)]
					Stash,
					#[codec(index = 2)]
					Controller,
					#[codec(index = 3)]
					Account(_0),
					#[codec(index = 4)]
					None,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum XcmCall {
					#[codec(index = 0)]
					Bond,
					#[codec(index = 1)]
					BondExtra,
					#[codec(index = 2)]
					Unbond,
					#[codec(index = 3)]
					Rebond,
					#[codec(index = 4)]
					WithdrawUnbonded,
					#[codec(index = 5)]
					Nominate,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct XcmWeightFeeMisc<_0, _1> {
					pub weight: _0,
					pub fee: _1,
				}
			}
		}
		pub mod parachain_info {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				#[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
				pub enum Call {}
			}
		}
		pub mod polkadot_core_primitives {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct InboundDownwardMessage<_0> {
				pub sent_at: _0,
				pub msg: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct InboundHrmpMessage<_0> {
				pub sent_at: _0,
				pub data: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct OutboundHrmpMessage<_0> {
				pub recipient: _0,
				pub data: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
			}
		}
		pub mod polkadot_parachain {
			use super::runtime_types;
			pub mod primitives {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct HeadData(
					pub ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
				);
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Id(pub ::core::primitive::u32);
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum XcmpMessageFormat {
					#[codec(index = 0)]
					ConcatenatedVersionedXcm,
					#[codec(index = 1)]
					ConcatenatedEncodedBlob,
					#[codec(index = 2)]
					Signals,
				}
			}
		}
		pub mod polkadot_primitives {
			use super::runtime_types;
			pub mod v4 {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct AbridgedHostConfiguration {
					pub max_code_size: ::core::primitive::u32,
					pub max_head_data_size: ::core::primitive::u32,
					pub max_upward_queue_count: ::core::primitive::u32,
					pub max_upward_queue_size: ::core::primitive::u32,
					pub max_upward_message_size: ::core::primitive::u32,
					pub max_upward_message_num_per_candidate: ::core::primitive::u32,
					pub hrmp_max_message_num_per_candidate: ::core::primitive::u32,
					pub validation_upgrade_cooldown: ::core::primitive::u32,
					pub validation_upgrade_delay: ::core::primitive::u32,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct AbridgedHrmpChannel {
					pub max_capacity: ::core::primitive::u32,
					pub max_total_size: ::core::primitive::u32,
					pub max_message_size: ::core::primitive::u32,
					pub msg_count: ::core::primitive::u32,
					pub total_size: ::core::primitive::u32,
					pub mqc_head: ::core::option::Option<::subxt::ext::subxt_core::utils::H256>,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct PersistedValidationData<_0, _1> {
					pub parent_head: runtime_types::polkadot_parachain::primitives::HeadData,
					pub relay_parent_number: _1,
					pub relay_parent_storage_root: _0,
					pub max_pov_size: ::core::primitive::u32,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum UpgradeRestriction {
					#[codec(index = 0)]
					Present,
				}
			}
		}
		pub mod primitives {
			use super::runtime_types;
			pub mod currency {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct CurrencyId(pub ::core::primitive::u128);
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum ForeignAssetId {
					#[codec(index = 0)]
					Xcm(runtime_types::primitives::currency::VersionedMultiLocation),
					#[codec(index = 1)]
					IbcIcs20(runtime_types::primitives::currency::PrefixedDenom),
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct PrefixedDenom(
					pub runtime_types::ibc::applications::transfer::denom::PrefixedDenom,
				);
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum VersionedMultiLocation {
					#[codec(index = 3)]
					V3(runtime_types::xcm::v3::multilocation::MultiLocation),
				}
			}
		}
		pub mod sp_arithmetic {
			use super::runtime_types;
			pub mod fixed_point {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct FixedI64(pub ::core::primitive::i64);
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct FixedU128(pub ::core::primitive::u128);
			}
			pub mod per_things {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Perbill(pub ::core::primitive::u32);
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Permill(pub ::core::primitive::u32);
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum ArithmeticError {
				#[codec(index = 0)]
				Underflow,
				#[codec(index = 1)]
				Overflow,
				#[codec(index = 2)]
				DivisionByZero,
			}
		}
		pub mod sp_consensus_aura {
			use super::runtime_types;
			pub mod sr25519 {
				use super::runtime_types;
				pub mod app_sr25519 {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct Public(pub runtime_types::sp_core::sr25519::Public);
				}
			}
		}
		pub mod sp_consensus_slots {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct Slot(pub ::core::primitive::u64);
		}
		pub mod sp_core {
			use super::runtime_types;
			pub mod crypto {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
			}
			pub mod ecdsa {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Signature(pub [::core::primitive::u8; 65usize]);
			}
			pub mod ed25519 {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Signature(pub [::core::primitive::u8; 64usize]);
			}
			pub mod sr25519 {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Public(pub [::core::primitive::u8; 32usize]);
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Signature(pub [::core::primitive::u8; 64usize]);
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum Void {}
		}
		pub mod sp_runtime {
			use super::runtime_types;
			pub mod generic {
				use super::runtime_types;
				pub mod digest {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct Digest {
						pub logs: ::subxt::ext::subxt_core::alloc::vec::Vec<
							runtime_types::sp_runtime::generic::digest::DigestItem,
						>,
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum DigestItem {
						#[codec(index = 6)]
						PreRuntime(
							[::core::primitive::u8; 4usize],
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 4)]
						Consensus(
							[::core::primitive::u8; 4usize],
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 5)]
						Seal(
							[::core::primitive::u8; 4usize],
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 0)]
						Other(::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>),
						#[codec(index = 8)]
						RuntimeEnvironmentUpdated,
					}
				}
				pub mod era {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum Era {
						#[codec(index = 0)]
						Immortal,
						#[codec(index = 1)]
						Mortal1(::core::primitive::u8),
						#[codec(index = 2)]
						Mortal2(::core::primitive::u8),
						#[codec(index = 3)]
						Mortal3(::core::primitive::u8),
						#[codec(index = 4)]
						Mortal4(::core::primitive::u8),
						#[codec(index = 5)]
						Mortal5(::core::primitive::u8),
						#[codec(index = 6)]
						Mortal6(::core::primitive::u8),
						#[codec(index = 7)]
						Mortal7(::core::primitive::u8),
						#[codec(index = 8)]
						Mortal8(::core::primitive::u8),
						#[codec(index = 9)]
						Mortal9(::core::primitive::u8),
						#[codec(index = 10)]
						Mortal10(::core::primitive::u8),
						#[codec(index = 11)]
						Mortal11(::core::primitive::u8),
						#[codec(index = 12)]
						Mortal12(::core::primitive::u8),
						#[codec(index = 13)]
						Mortal13(::core::primitive::u8),
						#[codec(index = 14)]
						Mortal14(::core::primitive::u8),
						#[codec(index = 15)]
						Mortal15(::core::primitive::u8),
						#[codec(index = 16)]
						Mortal16(::core::primitive::u8),
						#[codec(index = 17)]
						Mortal17(::core::primitive::u8),
						#[codec(index = 18)]
						Mortal18(::core::primitive::u8),
						#[codec(index = 19)]
						Mortal19(::core::primitive::u8),
						#[codec(index = 20)]
						Mortal20(::core::primitive::u8),
						#[codec(index = 21)]
						Mortal21(::core::primitive::u8),
						#[codec(index = 22)]
						Mortal22(::core::primitive::u8),
						#[codec(index = 23)]
						Mortal23(::core::primitive::u8),
						#[codec(index = 24)]
						Mortal24(::core::primitive::u8),
						#[codec(index = 25)]
						Mortal25(::core::primitive::u8),
						#[codec(index = 26)]
						Mortal26(::core::primitive::u8),
						#[codec(index = 27)]
						Mortal27(::core::primitive::u8),
						#[codec(index = 28)]
						Mortal28(::core::primitive::u8),
						#[codec(index = 29)]
						Mortal29(::core::primitive::u8),
						#[codec(index = 30)]
						Mortal30(::core::primitive::u8),
						#[codec(index = 31)]
						Mortal31(::core::primitive::u8),
						#[codec(index = 32)]
						Mortal32(::core::primitive::u8),
						#[codec(index = 33)]
						Mortal33(::core::primitive::u8),
						#[codec(index = 34)]
						Mortal34(::core::primitive::u8),
						#[codec(index = 35)]
						Mortal35(::core::primitive::u8),
						#[codec(index = 36)]
						Mortal36(::core::primitive::u8),
						#[codec(index = 37)]
						Mortal37(::core::primitive::u8),
						#[codec(index = 38)]
						Mortal38(::core::primitive::u8),
						#[codec(index = 39)]
						Mortal39(::core::primitive::u8),
						#[codec(index = 40)]
						Mortal40(::core::primitive::u8),
						#[codec(index = 41)]
						Mortal41(::core::primitive::u8),
						#[codec(index = 42)]
						Mortal42(::core::primitive::u8),
						#[codec(index = 43)]
						Mortal43(::core::primitive::u8),
						#[codec(index = 44)]
						Mortal44(::core::primitive::u8),
						#[codec(index = 45)]
						Mortal45(::core::primitive::u8),
						#[codec(index = 46)]
						Mortal46(::core::primitive::u8),
						#[codec(index = 47)]
						Mortal47(::core::primitive::u8),
						#[codec(index = 48)]
						Mortal48(::core::primitive::u8),
						#[codec(index = 49)]
						Mortal49(::core::primitive::u8),
						#[codec(index = 50)]
						Mortal50(::core::primitive::u8),
						#[codec(index = 51)]
						Mortal51(::core::primitive::u8),
						#[codec(index = 52)]
						Mortal52(::core::primitive::u8),
						#[codec(index = 53)]
						Mortal53(::core::primitive::u8),
						#[codec(index = 54)]
						Mortal54(::core::primitive::u8),
						#[codec(index = 55)]
						Mortal55(::core::primitive::u8),
						#[codec(index = 56)]
						Mortal56(::core::primitive::u8),
						#[codec(index = 57)]
						Mortal57(::core::primitive::u8),
						#[codec(index = 58)]
						Mortal58(::core::primitive::u8),
						#[codec(index = 59)]
						Mortal59(::core::primitive::u8),
						#[codec(index = 60)]
						Mortal60(::core::primitive::u8),
						#[codec(index = 61)]
						Mortal61(::core::primitive::u8),
						#[codec(index = 62)]
						Mortal62(::core::primitive::u8),
						#[codec(index = 63)]
						Mortal63(::core::primitive::u8),
						#[codec(index = 64)]
						Mortal64(::core::primitive::u8),
						#[codec(index = 65)]
						Mortal65(::core::primitive::u8),
						#[codec(index = 66)]
						Mortal66(::core::primitive::u8),
						#[codec(index = 67)]
						Mortal67(::core::primitive::u8),
						#[codec(index = 68)]
						Mortal68(::core::primitive::u8),
						#[codec(index = 69)]
						Mortal69(::core::primitive::u8),
						#[codec(index = 70)]
						Mortal70(::core::primitive::u8),
						#[codec(index = 71)]
						Mortal71(::core::primitive::u8),
						#[codec(index = 72)]
						Mortal72(::core::primitive::u8),
						#[codec(index = 73)]
						Mortal73(::core::primitive::u8),
						#[codec(index = 74)]
						Mortal74(::core::primitive::u8),
						#[codec(index = 75)]
						Mortal75(::core::primitive::u8),
						#[codec(index = 76)]
						Mortal76(::core::primitive::u8),
						#[codec(index = 77)]
						Mortal77(::core::primitive::u8),
						#[codec(index = 78)]
						Mortal78(::core::primitive::u8),
						#[codec(index = 79)]
						Mortal79(::core::primitive::u8),
						#[codec(index = 80)]
						Mortal80(::core::primitive::u8),
						#[codec(index = 81)]
						Mortal81(::core::primitive::u8),
						#[codec(index = 82)]
						Mortal82(::core::primitive::u8),
						#[codec(index = 83)]
						Mortal83(::core::primitive::u8),
						#[codec(index = 84)]
						Mortal84(::core::primitive::u8),
						#[codec(index = 85)]
						Mortal85(::core::primitive::u8),
						#[codec(index = 86)]
						Mortal86(::core::primitive::u8),
						#[codec(index = 87)]
						Mortal87(::core::primitive::u8),
						#[codec(index = 88)]
						Mortal88(::core::primitive::u8),
						#[codec(index = 89)]
						Mortal89(::core::primitive::u8),
						#[codec(index = 90)]
						Mortal90(::core::primitive::u8),
						#[codec(index = 91)]
						Mortal91(::core::primitive::u8),
						#[codec(index = 92)]
						Mortal92(::core::primitive::u8),
						#[codec(index = 93)]
						Mortal93(::core::primitive::u8),
						#[codec(index = 94)]
						Mortal94(::core::primitive::u8),
						#[codec(index = 95)]
						Mortal95(::core::primitive::u8),
						#[codec(index = 96)]
						Mortal96(::core::primitive::u8),
						#[codec(index = 97)]
						Mortal97(::core::primitive::u8),
						#[codec(index = 98)]
						Mortal98(::core::primitive::u8),
						#[codec(index = 99)]
						Mortal99(::core::primitive::u8),
						#[codec(index = 100)]
						Mortal100(::core::primitive::u8),
						#[codec(index = 101)]
						Mortal101(::core::primitive::u8),
						#[codec(index = 102)]
						Mortal102(::core::primitive::u8),
						#[codec(index = 103)]
						Mortal103(::core::primitive::u8),
						#[codec(index = 104)]
						Mortal104(::core::primitive::u8),
						#[codec(index = 105)]
						Mortal105(::core::primitive::u8),
						#[codec(index = 106)]
						Mortal106(::core::primitive::u8),
						#[codec(index = 107)]
						Mortal107(::core::primitive::u8),
						#[codec(index = 108)]
						Mortal108(::core::primitive::u8),
						#[codec(index = 109)]
						Mortal109(::core::primitive::u8),
						#[codec(index = 110)]
						Mortal110(::core::primitive::u8),
						#[codec(index = 111)]
						Mortal111(::core::primitive::u8),
						#[codec(index = 112)]
						Mortal112(::core::primitive::u8),
						#[codec(index = 113)]
						Mortal113(::core::primitive::u8),
						#[codec(index = 114)]
						Mortal114(::core::primitive::u8),
						#[codec(index = 115)]
						Mortal115(::core::primitive::u8),
						#[codec(index = 116)]
						Mortal116(::core::primitive::u8),
						#[codec(index = 117)]
						Mortal117(::core::primitive::u8),
						#[codec(index = 118)]
						Mortal118(::core::primitive::u8),
						#[codec(index = 119)]
						Mortal119(::core::primitive::u8),
						#[codec(index = 120)]
						Mortal120(::core::primitive::u8),
						#[codec(index = 121)]
						Mortal121(::core::primitive::u8),
						#[codec(index = 122)]
						Mortal122(::core::primitive::u8),
						#[codec(index = 123)]
						Mortal123(::core::primitive::u8),
						#[codec(index = 124)]
						Mortal124(::core::primitive::u8),
						#[codec(index = 125)]
						Mortal125(::core::primitive::u8),
						#[codec(index = 126)]
						Mortal126(::core::primitive::u8),
						#[codec(index = 127)]
						Mortal127(::core::primitive::u8),
						#[codec(index = 128)]
						Mortal128(::core::primitive::u8),
						#[codec(index = 129)]
						Mortal129(::core::primitive::u8),
						#[codec(index = 130)]
						Mortal130(::core::primitive::u8),
						#[codec(index = 131)]
						Mortal131(::core::primitive::u8),
						#[codec(index = 132)]
						Mortal132(::core::primitive::u8),
						#[codec(index = 133)]
						Mortal133(::core::primitive::u8),
						#[codec(index = 134)]
						Mortal134(::core::primitive::u8),
						#[codec(index = 135)]
						Mortal135(::core::primitive::u8),
						#[codec(index = 136)]
						Mortal136(::core::primitive::u8),
						#[codec(index = 137)]
						Mortal137(::core::primitive::u8),
						#[codec(index = 138)]
						Mortal138(::core::primitive::u8),
						#[codec(index = 139)]
						Mortal139(::core::primitive::u8),
						#[codec(index = 140)]
						Mortal140(::core::primitive::u8),
						#[codec(index = 141)]
						Mortal141(::core::primitive::u8),
						#[codec(index = 142)]
						Mortal142(::core::primitive::u8),
						#[codec(index = 143)]
						Mortal143(::core::primitive::u8),
						#[codec(index = 144)]
						Mortal144(::core::primitive::u8),
						#[codec(index = 145)]
						Mortal145(::core::primitive::u8),
						#[codec(index = 146)]
						Mortal146(::core::primitive::u8),
						#[codec(index = 147)]
						Mortal147(::core::primitive::u8),
						#[codec(index = 148)]
						Mortal148(::core::primitive::u8),
						#[codec(index = 149)]
						Mortal149(::core::primitive::u8),
						#[codec(index = 150)]
						Mortal150(::core::primitive::u8),
						#[codec(index = 151)]
						Mortal151(::core::primitive::u8),
						#[codec(index = 152)]
						Mortal152(::core::primitive::u8),
						#[codec(index = 153)]
						Mortal153(::core::primitive::u8),
						#[codec(index = 154)]
						Mortal154(::core::primitive::u8),
						#[codec(index = 155)]
						Mortal155(::core::primitive::u8),
						#[codec(index = 156)]
						Mortal156(::core::primitive::u8),
						#[codec(index = 157)]
						Mortal157(::core::primitive::u8),
						#[codec(index = 158)]
						Mortal158(::core::primitive::u8),
						#[codec(index = 159)]
						Mortal159(::core::primitive::u8),
						#[codec(index = 160)]
						Mortal160(::core::primitive::u8),
						#[codec(index = 161)]
						Mortal161(::core::primitive::u8),
						#[codec(index = 162)]
						Mortal162(::core::primitive::u8),
						#[codec(index = 163)]
						Mortal163(::core::primitive::u8),
						#[codec(index = 164)]
						Mortal164(::core::primitive::u8),
						#[codec(index = 165)]
						Mortal165(::core::primitive::u8),
						#[codec(index = 166)]
						Mortal166(::core::primitive::u8),
						#[codec(index = 167)]
						Mortal167(::core::primitive::u8),
						#[codec(index = 168)]
						Mortal168(::core::primitive::u8),
						#[codec(index = 169)]
						Mortal169(::core::primitive::u8),
						#[codec(index = 170)]
						Mortal170(::core::primitive::u8),
						#[codec(index = 171)]
						Mortal171(::core::primitive::u8),
						#[codec(index = 172)]
						Mortal172(::core::primitive::u8),
						#[codec(index = 173)]
						Mortal173(::core::primitive::u8),
						#[codec(index = 174)]
						Mortal174(::core::primitive::u8),
						#[codec(index = 175)]
						Mortal175(::core::primitive::u8),
						#[codec(index = 176)]
						Mortal176(::core::primitive::u8),
						#[codec(index = 177)]
						Mortal177(::core::primitive::u8),
						#[codec(index = 178)]
						Mortal178(::core::primitive::u8),
						#[codec(index = 179)]
						Mortal179(::core::primitive::u8),
						#[codec(index = 180)]
						Mortal180(::core::primitive::u8),
						#[codec(index = 181)]
						Mortal181(::core::primitive::u8),
						#[codec(index = 182)]
						Mortal182(::core::primitive::u8),
						#[codec(index = 183)]
						Mortal183(::core::primitive::u8),
						#[codec(index = 184)]
						Mortal184(::core::primitive::u8),
						#[codec(index = 185)]
						Mortal185(::core::primitive::u8),
						#[codec(index = 186)]
						Mortal186(::core::primitive::u8),
						#[codec(index = 187)]
						Mortal187(::core::primitive::u8),
						#[codec(index = 188)]
						Mortal188(::core::primitive::u8),
						#[codec(index = 189)]
						Mortal189(::core::primitive::u8),
						#[codec(index = 190)]
						Mortal190(::core::primitive::u8),
						#[codec(index = 191)]
						Mortal191(::core::primitive::u8),
						#[codec(index = 192)]
						Mortal192(::core::primitive::u8),
						#[codec(index = 193)]
						Mortal193(::core::primitive::u8),
						#[codec(index = 194)]
						Mortal194(::core::primitive::u8),
						#[codec(index = 195)]
						Mortal195(::core::primitive::u8),
						#[codec(index = 196)]
						Mortal196(::core::primitive::u8),
						#[codec(index = 197)]
						Mortal197(::core::primitive::u8),
						#[codec(index = 198)]
						Mortal198(::core::primitive::u8),
						#[codec(index = 199)]
						Mortal199(::core::primitive::u8),
						#[codec(index = 200)]
						Mortal200(::core::primitive::u8),
						#[codec(index = 201)]
						Mortal201(::core::primitive::u8),
						#[codec(index = 202)]
						Mortal202(::core::primitive::u8),
						#[codec(index = 203)]
						Mortal203(::core::primitive::u8),
						#[codec(index = 204)]
						Mortal204(::core::primitive::u8),
						#[codec(index = 205)]
						Mortal205(::core::primitive::u8),
						#[codec(index = 206)]
						Mortal206(::core::primitive::u8),
						#[codec(index = 207)]
						Mortal207(::core::primitive::u8),
						#[codec(index = 208)]
						Mortal208(::core::primitive::u8),
						#[codec(index = 209)]
						Mortal209(::core::primitive::u8),
						#[codec(index = 210)]
						Mortal210(::core::primitive::u8),
						#[codec(index = 211)]
						Mortal211(::core::primitive::u8),
						#[codec(index = 212)]
						Mortal212(::core::primitive::u8),
						#[codec(index = 213)]
						Mortal213(::core::primitive::u8),
						#[codec(index = 214)]
						Mortal214(::core::primitive::u8),
						#[codec(index = 215)]
						Mortal215(::core::primitive::u8),
						#[codec(index = 216)]
						Mortal216(::core::primitive::u8),
						#[codec(index = 217)]
						Mortal217(::core::primitive::u8),
						#[codec(index = 218)]
						Mortal218(::core::primitive::u8),
						#[codec(index = 219)]
						Mortal219(::core::primitive::u8),
						#[codec(index = 220)]
						Mortal220(::core::primitive::u8),
						#[codec(index = 221)]
						Mortal221(::core::primitive::u8),
						#[codec(index = 222)]
						Mortal222(::core::primitive::u8),
						#[codec(index = 223)]
						Mortal223(::core::primitive::u8),
						#[codec(index = 224)]
						Mortal224(::core::primitive::u8),
						#[codec(index = 225)]
						Mortal225(::core::primitive::u8),
						#[codec(index = 226)]
						Mortal226(::core::primitive::u8),
						#[codec(index = 227)]
						Mortal227(::core::primitive::u8),
						#[codec(index = 228)]
						Mortal228(::core::primitive::u8),
						#[codec(index = 229)]
						Mortal229(::core::primitive::u8),
						#[codec(index = 230)]
						Mortal230(::core::primitive::u8),
						#[codec(index = 231)]
						Mortal231(::core::primitive::u8),
						#[codec(index = 232)]
						Mortal232(::core::primitive::u8),
						#[codec(index = 233)]
						Mortal233(::core::primitive::u8),
						#[codec(index = 234)]
						Mortal234(::core::primitive::u8),
						#[codec(index = 235)]
						Mortal235(::core::primitive::u8),
						#[codec(index = 236)]
						Mortal236(::core::primitive::u8),
						#[codec(index = 237)]
						Mortal237(::core::primitive::u8),
						#[codec(index = 238)]
						Mortal238(::core::primitive::u8),
						#[codec(index = 239)]
						Mortal239(::core::primitive::u8),
						#[codec(index = 240)]
						Mortal240(::core::primitive::u8),
						#[codec(index = 241)]
						Mortal241(::core::primitive::u8),
						#[codec(index = 242)]
						Mortal242(::core::primitive::u8),
						#[codec(index = 243)]
						Mortal243(::core::primitive::u8),
						#[codec(index = 244)]
						Mortal244(::core::primitive::u8),
						#[codec(index = 245)]
						Mortal245(::core::primitive::u8),
						#[codec(index = 246)]
						Mortal246(::core::primitive::u8),
						#[codec(index = 247)]
						Mortal247(::core::primitive::u8),
						#[codec(index = 248)]
						Mortal248(::core::primitive::u8),
						#[codec(index = 249)]
						Mortal249(::core::primitive::u8),
						#[codec(index = 250)]
						Mortal250(::core::primitive::u8),
						#[codec(index = 251)]
						Mortal251(::core::primitive::u8),
						#[codec(index = 252)]
						Mortal252(::core::primitive::u8),
						#[codec(index = 253)]
						Mortal253(::core::primitive::u8),
						#[codec(index = 254)]
						Mortal254(::core::primitive::u8),
						#[codec(index = 255)]
						Mortal255(::core::primitive::u8),
					}
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum DispatchError {
				#[codec(index = 0)]
				Other,
				#[codec(index = 1)]
				CannotLookup,
				#[codec(index = 2)]
				BadOrigin,
				#[codec(index = 3)]
				Module(runtime_types::sp_runtime::ModuleError),
				#[codec(index = 4)]
				ConsumerRemaining,
				#[codec(index = 5)]
				NoProviders,
				#[codec(index = 6)]
				TooManyConsumers,
				#[codec(index = 7)]
				Token(runtime_types::sp_runtime::TokenError),
				#[codec(index = 8)]
				Arithmetic(runtime_types::sp_arithmetic::ArithmeticError),
				#[codec(index = 9)]
				Transactional(runtime_types::sp_runtime::TransactionalError),
				#[codec(index = 10)]
				Exhausted,
				#[codec(index = 11)]
				Corruption,
				#[codec(index = 12)]
				Unavailable,
				#[codec(index = 13)]
				RootNotAllowed,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct DispatchErrorWithPostInfo<_0> {
				pub post_info: _0,
				pub error: runtime_types::sp_runtime::DispatchError,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct ModuleError {
				pub index: ::core::primitive::u8,
				pub error: [::core::primitive::u8; 4usize],
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum MultiSignature {
				#[codec(index = 0)]
				Ed25519(runtime_types::sp_core::ed25519::Signature),
				#[codec(index = 1)]
				Sr25519(runtime_types::sp_core::sr25519::Signature),
				#[codec(index = 2)]
				Ecdsa(runtime_types::sp_core::ecdsa::Signature),
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum TokenError {
				#[codec(index = 0)]
				FundsUnavailable,
				#[codec(index = 1)]
				OnlyProvider,
				#[codec(index = 2)]
				BelowMinimum,
				#[codec(index = 3)]
				CannotCreate,
				#[codec(index = 4)]
				UnknownAsset,
				#[codec(index = 5)]
				Frozen,
				#[codec(index = 6)]
				Unsupported,
				#[codec(index = 7)]
				CannotCreateHold,
				#[codec(index = 8)]
				NotExpendable,
				#[codec(index = 9)]
				Blocked,
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum TransactionalError {
				#[codec(index = 0)]
				LimitReached,
				#[codec(index = 1)]
				NoLayer,
			}
		}
		pub mod sp_trie {
			use super::runtime_types;
			pub mod storage_proof {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct StorageProof {
					pub trie_nodes: ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					>,
				}
			}
		}
		pub mod sp_version {
			use super::runtime_types;
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct RuntimeVersion {
				pub spec_name: ::subxt::ext::subxt_core::alloc::string::String,
				pub impl_name: ::subxt::ext::subxt_core::alloc::string::String,
				pub authoring_version: ::core::primitive::u32,
				pub spec_version: ::core::primitive::u32,
				pub impl_version: ::core::primitive::u32,
				pub apis: ::subxt::ext::subxt_core::alloc::vec::Vec<(
					[::core::primitive::u8; 8usize],
					::core::primitive::u32,
				)>,
				pub transaction_version: ::core::primitive::u32,
				pub state_version: ::core::primitive::u8,
			}
		}
		pub mod sp_weights {
			use super::runtime_types;
			pub mod weight_v2 {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Weight {
					#[codec(compact)]
					pub ref_time: ::core::primitive::u64,
					#[codec(compact)]
					pub proof_size: ::core::primitive::u64,
				}
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub struct RuntimeDbWeight {
				pub read: ::core::primitive::u64,
				pub write: ::core::primitive::u64,
			}
		}
		pub mod xcm {
			use super::runtime_types;
			pub mod double_encoded {
				use super::runtime_types;
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct DoubleEncoded {
					pub encoded: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
				}
			}
			pub mod v2 {
				use super::runtime_types;
				pub mod junction {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum Junction {
						#[codec(index = 0)]
						Parachain(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 1)]
						AccountId32 {
							network: runtime_types::xcm::v2::NetworkId,
							id: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						AccountIndex64 {
							network: runtime_types::xcm::v2::NetworkId,
							#[codec(compact)]
							index: ::core::primitive::u64,
						},
						#[codec(index = 3)]
						AccountKey20 {
							network: runtime_types::xcm::v2::NetworkId,
							key: [::core::primitive::u8; 20usize],
						},
						#[codec(index = 4)]
						PalletInstance(::core::primitive::u8),
						#[codec(index = 5)]
						GeneralIndex(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 6)]
						GeneralKey(
							runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
								::core::primitive::u8,
							>,
						),
						#[codec(index = 7)]
						OnlyChild,
						#[codec(index = 8)]
						Plurality {
							id: runtime_types::xcm::v2::BodyId,
							part: runtime_types::xcm::v2::BodyPart,
						},
					}
				}
				pub mod multiasset {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum AssetId {
						#[codec(index = 0)]
						Concrete(runtime_types::xcm::v2::multilocation::MultiLocation),
						#[codec(index = 1)]
						Abstract(::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>),
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum AssetInstance {
						#[codec(index = 0)]
						Undefined,
						#[codec(index = 1)]
						Index(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 2)]
						Array4([::core::primitive::u8; 4usize]),
						#[codec(index = 3)]
						Array8([::core::primitive::u8; 8usize]),
						#[codec(index = 4)]
						Array16([::core::primitive::u8; 16usize]),
						#[codec(index = 5)]
						Array32([::core::primitive::u8; 32usize]),
						#[codec(index = 6)]
						Blob(::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>),
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum Fungibility {
						#[codec(index = 0)]
						Fungible(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 1)]
						NonFungible(runtime_types::xcm::v2::multiasset::AssetInstance),
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct MultiAsset {
						pub id: runtime_types::xcm::v2::multiasset::AssetId,
						pub fun: runtime_types::xcm::v2::multiasset::Fungibility,
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum MultiAssetFilter {
						#[codec(index = 0)]
						Definite(runtime_types::xcm::v2::multiasset::MultiAssets),
						#[codec(index = 1)]
						Wild(runtime_types::xcm::v2::multiasset::WildMultiAsset),
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct MultiAssets(
						pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
							runtime_types::xcm::v2::multiasset::MultiAsset,
						>,
					);
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum WildFungibility {
						#[codec(index = 0)]
						Fungible,
						#[codec(index = 1)]
						NonFungible,
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum WildMultiAsset {
						#[codec(index = 0)]
						All,
						#[codec(index = 1)]
						AllOf {
							id: runtime_types::xcm::v2::multiasset::AssetId,
							fun: runtime_types::xcm::v2::multiasset::WildFungibility,
						},
					}
				}
				pub mod multilocation {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum Junctions {
						#[codec(index = 0)]
						Here,
						#[codec(index = 1)]
						X1(runtime_types::xcm::v2::junction::Junction),
						#[codec(index = 2)]
						X2(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 3)]
						X3(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 4)]
						X4(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 5)]
						X5(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 6)]
						X6(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 7)]
						X7(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 8)]
						X8(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct MultiLocation {
						pub parents: ::core::primitive::u8,
						pub interior: runtime_types::xcm::v2::multilocation::Junctions,
					}
				}
				pub mod traits {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum Error {
						#[codec(index = 0)]
						Overflow,
						#[codec(index = 1)]
						Unimplemented,
						#[codec(index = 2)]
						UntrustedReserveLocation,
						#[codec(index = 3)]
						UntrustedTeleportLocation,
						#[codec(index = 4)]
						MultiLocationFull,
						#[codec(index = 5)]
						MultiLocationNotInvertible,
						#[codec(index = 6)]
						BadOrigin,
						#[codec(index = 7)]
						InvalidLocation,
						#[codec(index = 8)]
						AssetNotFound,
						#[codec(index = 9)]
						FailedToTransactAsset,
						#[codec(index = 10)]
						NotWithdrawable,
						#[codec(index = 11)]
						LocationCannotHold,
						#[codec(index = 12)]
						ExceedsMaxMessageSize,
						#[codec(index = 13)]
						DestinationUnsupported,
						#[codec(index = 14)]
						Transport,
						#[codec(index = 15)]
						Unroutable,
						#[codec(index = 16)]
						UnknownClaim,
						#[codec(index = 17)]
						FailedToDecode,
						#[codec(index = 18)]
						MaxWeightInvalid,
						#[codec(index = 19)]
						NotHoldingFees,
						#[codec(index = 20)]
						TooExpensive,
						#[codec(index = 21)]
						Trap(::core::primitive::u64),
						#[codec(index = 22)]
						UnhandledXcmVersion,
						#[codec(index = 23)]
						WeightLimitReached(::core::primitive::u64),
						#[codec(index = 24)]
						Barrier,
						#[codec(index = 25)]
						WeightNotComputable,
					}
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum BodyId {
					#[codec(index = 0)]
					Unit,
					#[codec(index = 1)]
					Named(
						runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 2)]
					Index(#[codec(compact)] ::core::primitive::u32),
					#[codec(index = 3)]
					Executive,
					#[codec(index = 4)]
					Technical,
					#[codec(index = 5)]
					Legislative,
					#[codec(index = 6)]
					Judicial,
					#[codec(index = 7)]
					Defense,
					#[codec(index = 8)]
					Administration,
					#[codec(index = 9)]
					Treasury,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum BodyPart {
					#[codec(index = 0)]
					Voice,
					#[codec(index = 1)]
					Members {
						#[codec(compact)]
						count: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					Fraction {
						#[codec(compact)]
						nom: ::core::primitive::u32,
						#[codec(compact)]
						denom: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					AtLeastProportion {
						#[codec(compact)]
						nom: ::core::primitive::u32,
						#[codec(compact)]
						denom: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					MoreThanProportion {
						#[codec(compact)]
						nom: ::core::primitive::u32,
						#[codec(compact)]
						denom: ::core::primitive::u32,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Instruction {
					#[codec(index = 0)]
					WithdrawAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 1)]
					ReserveAssetDeposited(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 2)]
					ReceiveTeleportedAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v2::Response,
						#[codec(compact)]
						max_weight: ::core::primitive::u64,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 6)]
					Transact {
						origin_type: runtime_types::xcm::v2::OriginKind,
						#[codec(compact)]
						require_weight_at_most: ::core::primitive::u64,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					ClearOrigin,
					#[codec(index = 11)]
					DescendOrigin(runtime_types::xcm::v2::multilocation::Junctions),
					#[codec(index = 12)]
					ReportError {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 13)]
					DepositAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_assets: ::core::primitive::u32,
						beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 14)]
					DepositReserveAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_assets: ::core::primitive::u32,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 15)]
					ExchangeAsset {
						give: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						receive: runtime_types::xcm::v2::multiasset::MultiAssets,
					},
					#[codec(index = 16)]
					InitiateReserveWithdraw {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						reserve: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 17)]
					InitiateTeleport {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 18)]
					QueryHolding {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 19)]
					BuyExecution {
						fees: runtime_types::xcm::v2::multiasset::MultiAsset,
						weight_limit: runtime_types::xcm::v2::WeightLimit,
					},
					#[codec(index = 20)]
					RefundSurplus,
					#[codec(index = 21)]
					SetErrorHandler(runtime_types::xcm::v2::Xcm),
					#[codec(index = 22)]
					SetAppendix(runtime_types::xcm::v2::Xcm),
					#[codec(index = 23)]
					ClearError,
					#[codec(index = 24)]
					ClaimAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						ticket: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 25)]
					Trap(#[codec(compact)] ::core::primitive::u64),
					#[codec(index = 26)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 27)]
					UnsubscribeVersion,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum NetworkId {
					#[codec(index = 0)]
					Any,
					#[codec(index = 1)]
					Named(
						runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 2)]
					Polkadot,
					#[codec(index = 3)]
					Kusama,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum OriginKind {
					#[codec(index = 0)]
					Native,
					#[codec(index = 1)]
					SovereignAccount,
					#[codec(index = 2)]
					Superuser,
					#[codec(index = 3)]
					Xcm,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Response {
					#[codec(index = 0)]
					Null,
					#[codec(index = 1)]
					Assets(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 2)]
					ExecutionResult(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v2::traits::Error,
						)>,
					),
					#[codec(index = 3)]
					Version(::core::primitive::u32),
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum WeightLimit {
					#[codec(index = 0)]
					Unlimited,
					#[codec(index = 1)]
					Limited(#[codec(compact)] ::core::primitive::u64),
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Xcm(
					pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::xcm::v2::Instruction,
					>,
				);
			}
			pub mod v3 {
				use super::runtime_types;
				pub mod junction {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum BodyId {
						#[codec(index = 0)]
						Unit,
						#[codec(index = 1)]
						Moniker([::core::primitive::u8; 4usize]),
						#[codec(index = 2)]
						Index(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 3)]
						Executive,
						#[codec(index = 4)]
						Technical,
						#[codec(index = 5)]
						Legislative,
						#[codec(index = 6)]
						Judicial,
						#[codec(index = 7)]
						Defense,
						#[codec(index = 8)]
						Administration,
						#[codec(index = 9)]
						Treasury,
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum BodyPart {
						#[codec(index = 0)]
						Voice,
						#[codec(index = 1)]
						Members {
							#[codec(compact)]
							count: ::core::primitive::u32,
						},
						#[codec(index = 2)]
						Fraction {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
						#[codec(index = 3)]
						AtLeastProportion {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
						#[codec(index = 4)]
						MoreThanProportion {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum Junction {
						#[codec(index = 0)]
						Parachain(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 1)]
						AccountId32 {
							network:
								::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
							id: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						AccountIndex64 {
							network:
								::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
							#[codec(compact)]
							index: ::core::primitive::u64,
						},
						#[codec(index = 3)]
						AccountKey20 {
							network:
								::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
							key: [::core::primitive::u8; 20usize],
						},
						#[codec(index = 4)]
						PalletInstance(::core::primitive::u8),
						#[codec(index = 5)]
						GeneralIndex(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 6)]
						GeneralKey {
							length: ::core::primitive::u8,
							data: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 7)]
						OnlyChild,
						#[codec(index = 8)]
						Plurality {
							id: runtime_types::xcm::v3::junction::BodyId,
							part: runtime_types::xcm::v3::junction::BodyPart,
						},
						#[codec(index = 9)]
						GlobalConsensus(runtime_types::xcm::v3::junction::NetworkId),
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum NetworkId {
						#[codec(index = 0)]
						ByGenesis([::core::primitive::u8; 32usize]),
						#[codec(index = 1)]
						ByFork {
							block_number: ::core::primitive::u64,
							block_hash: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						Polkadot,
						#[codec(index = 3)]
						Kusama,
						#[codec(index = 4)]
						Westend,
						#[codec(index = 5)]
						Rococo,
						#[codec(index = 6)]
						Wococo,
						#[codec(index = 7)]
						Ethereum {
							#[codec(compact)]
							chain_id: ::core::primitive::u64,
						},
						#[codec(index = 8)]
						BitcoinCore,
						#[codec(index = 9)]
						BitcoinCash,
					}
				}
				pub mod junctions {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum Junctions {
						#[codec(index = 0)]
						Here,
						#[codec(index = 1)]
						X1(runtime_types::xcm::v3::junction::Junction),
						#[codec(index = 2)]
						X2(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 3)]
						X3(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 4)]
						X4(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 5)]
						X5(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 6)]
						X6(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 7)]
						X7(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 8)]
						X8(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
					}
				}
				pub mod multiasset {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum AssetId {
						#[codec(index = 0)]
						Concrete(runtime_types::xcm::v3::multilocation::MultiLocation),
						#[codec(index = 1)]
						Abstract([::core::primitive::u8; 32usize]),
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum AssetInstance {
						#[codec(index = 0)]
						Undefined,
						#[codec(index = 1)]
						Index(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 2)]
						Array4([::core::primitive::u8; 4usize]),
						#[codec(index = 3)]
						Array8([::core::primitive::u8; 8usize]),
						#[codec(index = 4)]
						Array16([::core::primitive::u8; 16usize]),
						#[codec(index = 5)]
						Array32([::core::primitive::u8; 32usize]),
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum Fungibility {
						#[codec(index = 0)]
						Fungible(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 1)]
						NonFungible(runtime_types::xcm::v3::multiasset::AssetInstance),
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct MultiAsset {
						pub id: runtime_types::xcm::v3::multiasset::AssetId,
						pub fun: runtime_types::xcm::v3::multiasset::Fungibility,
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum MultiAssetFilter {
						#[codec(index = 0)]
						Definite(runtime_types::xcm::v3::multiasset::MultiAssets),
						#[codec(index = 1)]
						Wild(runtime_types::xcm::v3::multiasset::WildMultiAsset),
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct MultiAssets(
						pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
							runtime_types::xcm::v3::multiasset::MultiAsset,
						>,
					);
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum WildFungibility {
						#[codec(index = 0)]
						Fungible,
						#[codec(index = 1)]
						NonFungible,
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum WildMultiAsset {
						#[codec(index = 0)]
						All,
						#[codec(index = 1)]
						AllOf {
							id: runtime_types::xcm::v3::multiasset::AssetId,
							fun: runtime_types::xcm::v3::multiasset::WildFungibility,
						},
						#[codec(index = 2)]
						AllCounted(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 3)]
						AllOfCounted {
							id: runtime_types::xcm::v3::multiasset::AssetId,
							fun: runtime_types::xcm::v3::multiasset::WildFungibility,
							#[codec(compact)]
							count: ::core::primitive::u32,
						},
					}
				}
				pub mod multilocation {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub struct MultiLocation {
						pub parents: ::core::primitive::u8,
						pub interior: runtime_types::xcm::v3::junctions::Junctions,
					}
				}
				pub mod traits {
					use super::runtime_types;
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum Error {
						#[codec(index = 0)]
						Overflow,
						#[codec(index = 1)]
						Unimplemented,
						#[codec(index = 2)]
						UntrustedReserveLocation,
						#[codec(index = 3)]
						UntrustedTeleportLocation,
						#[codec(index = 4)]
						LocationFull,
						#[codec(index = 5)]
						LocationNotInvertible,
						#[codec(index = 6)]
						BadOrigin,
						#[codec(index = 7)]
						InvalidLocation,
						#[codec(index = 8)]
						AssetNotFound,
						#[codec(index = 9)]
						FailedToTransactAsset,
						#[codec(index = 10)]
						NotWithdrawable,
						#[codec(index = 11)]
						LocationCannotHold,
						#[codec(index = 12)]
						ExceedsMaxMessageSize,
						#[codec(index = 13)]
						DestinationUnsupported,
						#[codec(index = 14)]
						Transport,
						#[codec(index = 15)]
						Unroutable,
						#[codec(index = 16)]
						UnknownClaim,
						#[codec(index = 17)]
						FailedToDecode,
						#[codec(index = 18)]
						MaxWeightInvalid,
						#[codec(index = 19)]
						NotHoldingFees,
						#[codec(index = 20)]
						TooExpensive,
						#[codec(index = 21)]
						Trap(::core::primitive::u64),
						#[codec(index = 22)]
						ExpectationFalse,
						#[codec(index = 23)]
						PalletNotFound,
						#[codec(index = 24)]
						NameMismatch,
						#[codec(index = 25)]
						VersionIncompatible,
						#[codec(index = 26)]
						HoldingWouldOverflow,
						#[codec(index = 27)]
						ExportError,
						#[codec(index = 28)]
						ReanchorFailed,
						#[codec(index = 29)]
						NoDeal,
						#[codec(index = 30)]
						FeesNotMet,
						#[codec(index = 31)]
						LockError,
						#[codec(index = 32)]
						NoPermission,
						#[codec(index = 33)]
						Unanchored,
						#[codec(index = 34)]
						NotDepositable,
						#[codec(index = 35)]
						UnhandledXcmVersion,
						#[codec(index = 36)]
						WeightLimitReached(runtime_types::sp_weights::weight_v2::Weight),
						#[codec(index = 37)]
						Barrier,
						#[codec(index = 38)]
						WeightNotComputable,
						#[codec(index = 39)]
						ExceedsStackLimit,
					}
					#[derive(
						:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
						:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
						:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
						:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
						Clone,
						Debug,
						Eq,
						PartialEq,
					)]
					# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
					#[decode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
					)]
					#[encode_as_type(
						crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
					)]
					pub enum Outcome {
						#[codec(index = 0)]
						Complete(runtime_types::sp_weights::weight_v2::Weight),
						#[codec(index = 1)]
						Incomplete(
							runtime_types::sp_weights::weight_v2::Weight,
							runtime_types::xcm::v3::traits::Error,
						),
						#[codec(index = 2)]
						Error(runtime_types::xcm::v3::traits::Error),
					}
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Instruction {
					#[codec(index = 0)]
					WithdrawAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 1)]
					ReserveAssetDeposited(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 2)]
					ReceiveTeleportedAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v3::Response,
						max_weight: runtime_types::sp_weights::weight_v2::Weight,
						querier: ::core::option::Option<
							runtime_types::xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						beneficiary: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						dest: runtime_types::xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 6)]
					Transact {
						origin_kind: runtime_types::xcm::v2::OriginKind,
						require_weight_at_most: runtime_types::sp_weights::weight_v2::Weight,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					ClearOrigin,
					#[codec(index = 11)]
					DescendOrigin(runtime_types::xcm::v3::junctions::Junctions),
					#[codec(index = 12)]
					ReportError(runtime_types::xcm::v3::QueryResponseInfo),
					#[codec(index = 13)]
					DepositAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						beneficiary: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 14)]
					DepositReserveAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						dest: runtime_types::xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 15)]
					ExchangeAsset {
						give: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						want: runtime_types::xcm::v3::multiasset::MultiAssets,
						maximal: ::core::primitive::bool,
					},
					#[codec(index = 16)]
					InitiateReserveWithdraw {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						reserve: runtime_types::xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 17)]
					InitiateTeleport {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						dest: runtime_types::xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 18)]
					ReportHolding {
						response_info: runtime_types::xcm::v3::QueryResponseInfo,
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
					},
					#[codec(index = 19)]
					BuyExecution {
						fees: runtime_types::xcm::v3::multiasset::MultiAsset,
						weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 20)]
					RefundSurplus,
					#[codec(index = 21)]
					SetErrorHandler(runtime_types::xcm::v3::Xcm),
					#[codec(index = 22)]
					SetAppendix(runtime_types::xcm::v3::Xcm),
					#[codec(index = 23)]
					ClearError,
					#[codec(index = 24)]
					ClaimAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						ticket: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 25)]
					Trap(#[codec(compact)] ::core::primitive::u64),
					#[codec(index = 26)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
					},
					#[codec(index = 27)]
					UnsubscribeVersion,
					#[codec(index = 28)]
					BurnAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 29)]
					ExpectAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 30)]
					ExpectOrigin(
						::core::option::Option<
							runtime_types::xcm::v3::multilocation::MultiLocation,
						>,
					),
					#[codec(index = 31)]
					ExpectError(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v3::traits::Error,
						)>,
					),
					#[codec(index = 32)]
					ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
					#[codec(index = 33)]
					QueryPallet {
						module_name:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						response_info: runtime_types::xcm::v3::QueryResponseInfo,
					},
					#[codec(index = 34)]
					ExpectPallet {
						#[codec(compact)]
						index: ::core::primitive::u32,
						name: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						module_name:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						#[codec(compact)]
						crate_major: ::core::primitive::u32,
						#[codec(compact)]
						min_crate_minor: ::core::primitive::u32,
					},
					#[codec(index = 35)]
					ReportTransactStatus(runtime_types::xcm::v3::QueryResponseInfo),
					#[codec(index = 36)]
					ClearTransactStatus,
					#[codec(index = 37)]
					UniversalOrigin(runtime_types::xcm::v3::junction::Junction),
					#[codec(index = 38)]
					ExportMessage {
						network: runtime_types::xcm::v3::junction::NetworkId,
						destination: runtime_types::xcm::v3::junctions::Junctions,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 39)]
					LockAsset {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						unlocker: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 40)]
					UnlockAsset {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						target: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 41)]
					NoteUnlockable {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						owner: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 42)]
					RequestUnlock {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						locker: runtime_types::xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 43)]
					SetFeesMode { jit_withdraw: ::core::primitive::bool },
					#[codec(index = 44)]
					SetTopic([::core::primitive::u8; 32usize]),
					#[codec(index = 45)]
					ClearTopic,
					#[codec(index = 46)]
					AliasOrigin(runtime_types::xcm::v3::multilocation::MultiLocation),
					#[codec(index = 47)]
					UnpaidExecution {
						weight_limit: runtime_types::xcm::v3::WeightLimit,
						check_origin: ::core::option::Option<
							runtime_types::xcm::v3::multilocation::MultiLocation,
						>,
					},
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum MaybeErrorCode {
					#[codec(index = 0)]
					Success,
					#[codec(index = 1)]
					Error(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 2)]
					TruncatedError(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					),
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct PalletInfo {
					#[codec(compact)]
					pub index: ::core::primitive::u32,
					pub name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					pub module_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					#[codec(compact)]
					pub major: ::core::primitive::u32,
					#[codec(compact)]
					pub minor: ::core::primitive::u32,
					#[codec(compact)]
					pub patch: ::core::primitive::u32,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct QueryResponseInfo {
					pub destination: runtime_types::xcm::v3::multilocation::MultiLocation,
					#[codec(compact)]
					pub query_id: ::core::primitive::u64,
					pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum Response {
					#[codec(index = 0)]
					Null,
					#[codec(index = 1)]
					Assets(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 2)]
					ExecutionResult(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v3::traits::Error,
						)>,
					),
					#[codec(index = 3)]
					Version(::core::primitive::u32),
					#[codec(index = 4)]
					PalletsInfo(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::xcm::v3::PalletInfo,
						>,
					),
					#[codec(index = 5)]
					DispatchResult(runtime_types::xcm::v3::MaybeErrorCode),
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub enum WeightLimit {
					#[codec(index = 0)]
					Unlimited,
					#[codec(index = 1)]
					Limited(runtime_types::sp_weights::weight_v2::Weight),
				}
				#[derive(
					:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
					:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
					:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
					:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
					Clone,
					Debug,
					Eq,
					PartialEq,
				)]
				# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
				#[decode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
				)]
				#[encode_as_type(
					crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
				)]
				pub struct Xcm(
					pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::xcm::v3::Instruction,
					>,
				);
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum VersionedAssetId {
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::multiasset::AssetId),
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum VersionedMultiAsset {
				#[codec(index = 1)]
				V2(runtime_types::xcm::v2::multiasset::MultiAsset),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::multiasset::MultiAsset),
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum VersionedMultiAssets {
				#[codec(index = 1)]
				V2(runtime_types::xcm::v2::multiasset::MultiAssets),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::multiasset::MultiAssets),
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum VersionedMultiLocation {
				#[codec(index = 1)]
				V2(runtime_types::xcm::v2::multilocation::MultiLocation),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::multilocation::MultiLocation),
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum VersionedResponse {
				#[codec(index = 2)]
				V2(runtime_types::xcm::v2::Response),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::Response),
			}
			#[derive(
				:: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
				:: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
				:: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
				:: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
				Clone,
				Debug,
				Eq,
				PartialEq,
			)]
			# [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
			#[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
			#[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
			pub enum VersionedXcm {
				#[codec(index = 2)]
				V2(runtime_types::xcm::v2::Xcm),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::Xcm),
			}
		}
	}
}
