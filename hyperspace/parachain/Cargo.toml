[package]
name = "hyperspace-parachain"
version = "0.1.0"
edition = "2021"
description = "Hyperspace relayer interface for Parachains"
authors = [
	"Seun Lanlege <seunlanlege@gmail.com>",
	"David Salami <wizdave97@gmail.com>",
]

[dependencies]
hyperspace-primitives = { path = "../primitives", features = [
	"testing",
] }

# crates.io
anyhow = { workspace = true }
futures = { workspace = true }
async-trait = { workspace = true }
log = { workspace = true }
hex = { workspace = true }
tokio = { workspace = true, features = ["macros", "sync"] }
rs_merkle = { workspace = true }
parity-scale-codec = { workspace = true, default-features = false, features = [
	"derive",
	"max-encoded-len",
] }
hex-literal = { workspace = true }
serde_json = { workspace = true }
derive_more = { workspace = true, features = ["from"] }
serde = { workspace = true, features = ["derive"] }
tokio-stream = { workspace = true, features = ["sync"] }
thiserror = { workspace = true }
itertools = { workspace = true }
jsonrpsee = { workspace = true }
jsonrpsee-ws-client = { workspace = true }
finality-grandpa = { workspace = true }
prost = { workspace = true }
rand = { workspace = true }

# substrate
sp-core = { workspace = true, features = [
	"full_crypto",
] }
ss58-registry = { workspace = true }
sp-runtime = { workspace = true }

# subxt
subxt = { workspace = true, features = [
	"substrate-compat",
] }

sp-consensus-beefy = { workspace = true }
pallet-beefy-mmr = { workspace = true }
pallet-mmr = { workspace = true }
sp-mmr-primitives = { workspace = true }
frame-support = { workspace = true, default-features = false }
sp-io = { workspace = true, default-features = false }
sp-trie = { workspace = true }
frame-system = { workspace = true }
pallet-transaction-payment-rpc = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
sp-keystore = { workspace = true }

# composable
ibc = { workspace = true, features = [] }
ibc-proto = { workspace = true }
tendermint-proto = { workspace = true, default-features = false }
light-client-common = { workspace = true }
ibc-rpc = { workspace = true }
pallet-ibc = { workspace = true }
pallet-ibc-ping = { workspace = true }
ibc-primitives = { workspace = true }

# Beefy
beefy-prover = { workspace = true }
beefy-light-client = { workspace = true }
beefy-light-client-primitives = { workspace = true }
ics11-beefy = { workspace = true }
sc-consensus-beefy-rpc = { workspace = true }

# Grandpa
grandpa-prover = { workspace = true }
grandpa-light-client-primitives = { workspace = true }
ics10-grandpa = { workspace = true }
sc-consensus-grandpa-rpc = { workspace = true }
polkadot-core-primitives = { workspace = true }
sp-consensus-grandpa = { workspace = true }
sc-keystore = { workspace = true }
sp-authority-discovery = { workspace = true }
sp-weights = { workspace = true }

[dev-dependencies]
derive_more = { workspace = true }
clap = { workspace = true, features = ["derive"] }
sp-state-machine = { workspace = true }
prost = { workspace = true }
hyperspace-primitives = { path = "../primitives", features = [
	"testing",
] }
subxt-generated = { path = "../../utils/subxt/generated" }

[features]
default = ["std"]
testing = ["hyperspace-primitives/testing"]
std = [
	"sp-io/std",
	"frame-support/std",
	"anyhow/std",
	"beefy-light-client/std",
	"beefy-light-client-primitives/std",
	"clap/std",
	"finality-grandpa/std",
	"frame-system/std",
	"futures/std",
	"grandpa-light-client-primitives/std",
	"hex/std",
	"ibc/std",
	"ibc-primitives/std",
	"ibc-proto/std",
	"ics10-grandpa/std",
	"ics11-beefy/std",
	"light-client-common/std",
	"log/std",
	"pallet-beefy-mmr/std",
	"pallet-ibc/std",
	"pallet-ibc-ping/std",
	"pallet-mmr/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"parity-scale-codec/std",
	"polkadot-core-primitives/std",
	"prost/std",
	"rand/std",
	"rs_merkle/std",
	"serde/std",
	"serde_json/std",
	"sp-authority-discovery/std",
	"sp-consensus-beefy/std",
	"sp-consensus-grandpa/std",
	"sp-core/std",
	"sp-keystore/std",
	"sp-mmr-primitives/std",
	"sp-runtime/std",
	"sp-state-machine/std",
	"sp-trie/std",
	"ss58-registry/std",
]
